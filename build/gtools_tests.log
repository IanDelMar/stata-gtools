
  ___  ____  ____  ____  ____ (R)
 /__    /   ____/   /   ____/
___/   /   /___/   /   /___/   13.1   Copyright 1985-2013 StataCorp LP
  Statistics/Data Analysis            StataCorp
                                      4905 Lakeway Drive
                                      College Station, Texas 77845 USA
                                      800-STATA-PC        http://www.stata.com
                                      979-696-4600        stata@stata.com
                                      979-696-4601 (fax)

Single-user Stata perpetual license:
       Serial number:  301306294610
         Licensed to:  Mauricio Caceres
                       mauricio.caceres.bravo@gmail.com

Notes:
      1.  Command line editing disabled
      2.  Stata running in batch mode

Note:  Your site can add messages to the introduction by editing the file
       stata.msg in the directory where Stata is installed.


running /home/mauricio/ado/personal/sysprofile.do ...


running /home/mauricio/ado/profile.do ...

. do gtools_tests.do 

. * ---------------------------------------------------------------------------
> -
. * Project: gtools
. * Program: gtools_tests.do
. * Author:  Mauricio Caceres Bravo <mauricio.caceres.bravo@gmail.com>
. * Created: Tue May 16 07:23:02 EDT 2017
. * Updated: Fri Aug 27 22:38:53 EDT 2021
. * Purpose: Unit tests for gtools
. * Version: 1.8.1
. * Manual:  help gtools
. * Note:    You may need to run `ftools, compile` and `reghdfe, compile`
. *          to test gtools against ftools functions and reghdfe.
. 
. * Stata start-up options
. * ----------------------
. 
. version 13

. clear all

. set more off

. set varabbrev off

. set seed 42

. set linesize 255

. set type double

. global GTOOLS_BETA = 1

. 
. * Main program wrapper
. * --------------------
. 
. program main
  1.     syntax, [NOIsily *]
  2. 
.     if ( inlist("`c(os)'", "MacOSX") | strpos("`c(machine_type)'", "Mac") ) {
  3.         local c_os_ macosx
  4.     }
  5.     else {
  6.         local c_os_: di lower("`c(os)'")
  7.     }
  8.     log using gtools_tests_`c_os_'.log, text replace name(gtools_tests)
  9. 
.     * Set up
.     * ------
. 
.     local  progname tests
 10.     local  start_time "$S_TIME $S_DATE"
 11. 
.     di _n(1)
 12.     di "Start:        `start_time'"
 13.     di "Options:      `options'"
 14.     di "OS:           `c(os)'"
 15.     di "Machine Type: `c(machine_type)'"
 16. 
.     * Run the things
.     * --------------
. 
.     cap noi {
 17.         * qui do test_gcollapse.do
.         * qui do test_gcontract.do
.         * qui do test_gduplicates.do
.         * qui do test_gegen.do
.         * qui do test_gisid.do
.         * qui do test_glevelsof.do
.         * qui do test_gquantiles.do
.         * qui do test_gquantiles_by.do
.         * qui do test_gtoplevelsof.do
.         * qui do test_gunique.do
.         * qui do test_hashsort.do
.         * qui do test_gstats.do
.         * qui do test_greshape.do
.         * qui do test_gregress.do
. 
.         * qui do docs/examples/gcollapse.do
.         * qui do docs/examples/gcontract.do
.         * qui do docs/examples/gdistinct.do
.         * qui do docs/examples/gduplicates.do
.         * qui do docs/examples/gquantiles.do
.         * qui do docs/examples/gtoplevelsof.do
.         * qui do docs/examples/gunique.do
.         * qui do docs/examples/hashsort.do
.         * qui do docs/examples/gegen.do,     nostop
.         * qui do docs/examples/gisid.do,     nostop
.         * qui do docs/examples/glevelsof.do, nostop
.         * qui do docs/examples/gstats_summarize.do
.         * qui do docs/examples/gstats_transform.do
.         * qui do docs/examples/gstats_winsor.do
.         * qui do docs/examples/greshape.do
.         * qui do docs/examples/gregress.do
. 
.         if ( `:list posof "dependencies" in options' ) {
 18.             cap ssc install ralpha
 19.             cap ssc install ftools
 20.             cap ssc install unique
 21.             cap ssc install winsor2
 22.             cap ssc install distinct
 23.             cap ssc install moremata
 24.             cap ssc install fastxtile
 25.             cap ssc install egenmisc
 26.             cap ssc install egenmore
 27.             cap ssc install rangestat
 28.             * ftools,  compile
.             * reghdfe, compile
.         }
 29. 
.         if ( `:list posof "basic_checks" in options' ) {
 30. 
.             di ""
 31.             di "-------------------------------------"
 32.             di "Basic unit-tests $S_TIME $S_DATE"
 33.             di "-------------------------------------"
 34. 
.             unit_test, `noisily' test(checks_gcontract,     `noisily' oncollision(error))
 35.             unit_test, `noisily' test(checks_isid,          `noisily' oncollision(error))
 36.             unit_test, `noisily' test(checks_duplicates,    `noisily' oncollision(error))
 37.             unit_test, `noisily' test(checks_toplevelsof,   `noisily' oncollision(error))
 38.             unit_test, `noisily' test(checks_levelsof,      `noisily' oncollision(error))
 39.             unit_test, `noisily' test(checks_unique,        `noisily' oncollision(error))
 40.             unit_test, `noisily' test(checks_hashsort,      `noisily' oncollision(error))
 41.             unit_test, `noisily' test(checks_gregress,      `noisily' oncollision(error))
 42.             unit_test, `noisily' test(checks_greshape,      `noisily' oncollision(error))
 43.             unit_test, `noisily' test(checks_gstats,        `noisily' oncollision(error))
 44. 
.             unit_test, `noisily' test(checks_gquantiles_by, `noisily' oncollision(error))
 45.             unit_test, `noisily' test(checks_gquantiles_by, `noisily' oncollision(error) wgt([fw = int1]))
 46.             unit_test, `noisily' test(checks_gquantiles_by, `noisily' oncollision(error) wgt([pw = int1]))
 47.             unit_test, `noisily' test(checks_gquantiles_by, `noisily' oncollision(error) wgt([aw = int1]))
 48.             unit_test, `noisily' test(checks_gquantiles,    `noisily' oncollision(error))
 49.             unit_test, `noisily' test(checks_gquantiles,    `noisily' oncollision(error) wgt([fw = int1]))
 50.             unit_test, `noisily' test(checks_gquantiles,    `noisily' oncollision(error) wgt([pw = int1]))
 51.             unit_test, `noisily' test(checks_gquantiles,    `noisily' oncollision(error) wgt([aw = int1]))
 52. 
.             unit_test, `noisily' test(checks_gegen,         `noisily' oncollision(error))
 53.             unit_test, `noisily' test(checks_gegen,         `noisily' oncollision(error) wgt([fw = int1]))
 54.             unit_test, `noisily' test(checks_gegen,         `noisily' oncollision(error) wgt([iw = int1]))
 55.             unit_test, `noisily' test(checks_gegen,         `noisily' oncollision(error) wgt([pw = int1]))
 56.             unit_test, `noisily' test(checks_gegen,         `noisily' oncollision(error) wgt([aw = int1]))
 57. 
.             unit_test, `noisily' test(checks_gcollapse,     `noisily' oncollision(error))
 58.             unit_test, `noisily' test(checks_gcollapse,     `noisily' oncollision(error) wgt([fw = int1]))
 59.             unit_test, `noisily' test(checks_gcollapse,     `noisily' oncollision(error) wgt([iw = int1]))
 60.             unit_test, `noisily' test(checks_gcollapse,     `noisily' oncollision(error) wgt([pw = int1]))
 61.             unit_test, `noisily' test(checks_gcollapse,     `noisily' oncollision(error) wgt([aw = int1]))
 62. 
.             di _n(1)
 63. 
.             unit_test, `noisily' test(checks_corners, `noisily' oncollision(error))
 64.         }
 65. 
.         if ( `:list posof "comparisons" in options' ) {
 66. 
.             di ""
 67.             di "-----------------------------------------------------------"
 68.             di "Consistency checks (v native commands) $S_TIME $S_DATE"
 69.             di "-----------------------------------------------------------"
 70. 
.             compare_isid,          `noisily' oncollision(error)
 71.             compare_duplicates,    `noisily' oncollision(error)
 72.             compare_levelsof,      `noisily' oncollision(error)
 73.             compare_unique,        `noisily' oncollision(error) distinct
 74.             compare_hashsort,      `noisily' oncollision(error)
 75.             compare_egen,          `noisily' oncollision(error)
 76.             compare_gcontract,     `noisily' oncollision(error)
 77.             compare_toplevelsof,   `noisily' oncollision(error) tol(1e-4)
 78.             compare_toplevelsof,   `noisily' oncollision(error) tol(1e-4) wgt(both f)
 79.             compare_gstats,        `noisily' oncollision(error)
 80.             compare_greshape,      `noisily' oncollision(error)
 81.             * compare_gregress,      `noisily' oncollision(error)
. 
.             compare_gquantiles_by, `noisily' oncollision(error)
 82.             compare_gquantiles_by, `noisily' oncollision(error) noaltdef wgt(both mix)
 83.             compare_gquantiles,    `noisily' oncollision(error) noaltdef
 84.             compare_gquantiles,    `noisily' oncollision(error) noaltdef wgt(both mix)
 85. 
.             compare_gcollapse,     `noisily' oncollision(error)
 86.             compare_gcollapse,     `noisily' oncollision(error) wgt(g [fw = 1]) tol(1e-4)
 87.             compare_gcollapse,     `noisily' oncollision(error) wgt(c [fw = 1]) tol(1e-4)
 88.             compare_gcollapse,     `noisily' oncollision(error) wgt(both mix)   tol(1e-4)
 89.         }
 90. 
.         if ( `:list posof "switches" in options' ) {
 91.             gquantiles_switch_sanity v1
 92.             gquantiles_switch_sanity v2
 93.             gquantiles_switch_sanity v3
 94.         }
 95. 
.         if ( `:list posof "bench_test" in options' ) {
 96.             bench_gquantiles_by, n(100)  bench(100) `noisily' oncollision(error)
 97.             bench_gquantiles,    n(1000) bench(1)   `noisily' oncollision(error)
 98.             bench_contract,      n(1000) bench(1)   `noisily' oncollision(error)
 99.             bench_egen,          n(1000) bench(1)   `noisily' oncollision(error)
100.             bench_isid,          n(1000) bench(1)   `noisily' oncollision(error)
101.             bench_duplicates,    n(1000) bench(1)   `noisily' oncollision(error)
102.             bench_levelsof,      n(100)  bench(1)   `noisily' oncollision(error)
103.             bench_toplevelsof,   n(1000) bench(1)   `noisily' oncollision(error)
104.             bench_unique,        n(1000) bench(1)   `noisily' oncollision(error)
105.             bench_unique,        n(1000) bench(1)   `noisily' oncollision(error) distinct
106.             bench_hashsort,      n(1000) bench(1)   `noisily' oncollision(error) benchmode
107.             bench_gstats,        n(1000) bench(1)   `noisily' oncollision(error)
108.             bench_greshape,      n(1000) bench(1)   `noisily' oncollision(error)
109.             * bench_gregress,      n(1000) bench(1)   `noisily' oncollision(error)
. 
.             bench_collapse, collapse fcollapse bench(10)  n(100)    style(sum)    vars(15) oncollision(error)
110.             bench_collapse, collapse fcollapse bench(10)  n(100)    style(ftools) vars(6)  oncollision(error)
111.             bench_collapse, collapse fcollapse bench(10)  n(100)    style(full)   vars(1)  oncollision(error)
112. 
.             bench_collapse, collapse fcollapse bench(0.05) n(10000) style(sum)    vars(15) oncollision(error)
113.             bench_collapse, collapse fcollapse bench(0.05) n(10000) style(ftools) vars(6)  oncollision(error)
114.             bench_collapse, collapse fcollapse bench(0.05) n(10000) style(full)   vars(1)  oncollision(error)
115.         }
116. 
.         if ( `:list posof "bench_full" in options' ) {
117.             bench_gquantiles_by, n(10000)   bench(1000) `noisily' oncollision(error)
118.             bench_gquantiles,    n(1000000) bench(10)   `noisily' oncollision(error)
119.             bench_contract,      n(10000)   bench(10)   `noisily' oncollision(error)
120.             bench_egen,          n(10000)   bench(10)   `noisily' oncollision(error)
121.             bench_isid,          n(10000)   bench(10)   `noisily' oncollision(error)
122.             bench_duplicates,    n(10000)   bench(10)   `noisily' oncollision(error)
123.             bench_levelsof,      n(100)     bench(100)  `noisily' oncollision(error)
124.             bench_toplevelsof,   n(10000)   bench(10)   `noisily' oncollision(error)
125.             bench_unique,        n(10000)   bench(10)   `noisily' oncollision(error)
126.             bench_unique,        n(10000)   bench(10)   `noisily' oncollision(error) distinct
127.             bench_hashsort,      n(10000)   bench(10)   `noisily' oncollision(error) benchmode
128.             bench_gstats,        n(10000)   bench(10)   `noisily' oncollision(error)
129.             bench_greshape,      n(10000)   bench(10)   `noisily' oncollision(error)
130.             * bench_gregress,      n(10000)   bench(10)   `noisily' oncollision(error)
. 
.             bench_collapse, collapse fcollapse bench(1000) n(100)    style(sum)    vars(15) oncollision(error)
131.             bench_collapse, collapse fcollapse bench(1000) n(100)    style(ftools) vars(6)  oncollision(error)
132.             bench_collapse, collapse fcollapse bench(1000) n(100)    style(full)   vars(1)  oncollision(error)
133. 
.             bench_collapse, collapse fcollapse bench(0.1)  n(1000000) style(sum)    vars(15) oncollision(error)
134.             bench_collapse, collapse fcollapse bench(0.1)  n(1000000) style(ftools) vars(6)  oncollision(error)
135.             bench_collapse, collapse fcollapse bench(0.1)  n(1000000) style(full)   vars(1)  oncollision(error)
136.         }
137.     }
138.     local rc = _rc
139. 
.     exit_message, rc(`rc') progname(`progname') start_time(`start_time') `capture'
140.     log close gtools_tests
141.     exit `rc'
142. end

. 
. * ---------------------------------------------------------------------
. * Aux programs
. 
. capture program drop exit_message

. program exit_message
  1.     syntax, rc(int) progname(str) start_time(str) [CAPture]
  2.     local end_time "$S_TIME $S_DATE"
  3.     local time     "Start: `start_time'" _n(1) "End: `end_time'"
  4.     di ""
  5.     if (`rc' == 0) {
  6.         di "End: $S_TIME $S_DATE"
  7.         local paux      ran
  8.         local message "`progname' finished running" _n(2) "`time'"
  9.         local subject "`progname' `paux'"
 10.     }
 11.     else if ("`capture'" == "") {
 12.         di "WARNING: $S_TIME $S_DATE"
 13.         local paux ran with non-0 exit status
 14.         local message "`progname' ran but Stata gave error code r(`rc')" _n(2) "`time'"
 15.         local subject "`progname' `paux'"
 16.     }
 17.     else {
 18.         di "ERROR: $S_TIME $S_DATE"
 19.         local paux ran with errors
 20.         local message "`progname' stopped with error code r(`rc')" _n(2) "`time'"
 21.         local subject "`progname' `paux'"
 22.     }
 23.     di "`subject'"
 24.     di ""
 25.     di "`message'"
 26. end

. 
. * Wrapper for easy timer use
. cap program drop mytimer

. program mytimer, rclass
  1.     * args number what step
.     syntax anything, [minutes ts]
  2. 
.     tokenize `anything'
  3.     local number `1'
  4.     local what   `2'
  5.     local step   `3'
  6. 
.     if ("`what'" == "end") {
  7.         qui {
  8.             timer clear `number'
  9.             timer off   `number'
 10.         }
 11.         if ("`ts'" == "ts") mytimer_ts `step'
 12.     }
 13.     else if ("`what'" == "info") {
 14.         qui {
 15.             timer off `number'
 16.             timer list `number'
 17.         }
 18.         local seconds = r(t`number')
 19.         local prints  `:di trim("`:di %21.2gc `seconds''")' seconds
 20.         if ("`minutes'" != "") {
 21.             local minutes = `seconds' / 60
 22.             local prints  `:di trim("`:di %21.3gc `minutes''")' minutes
 23.         }
 24.         mytimer_ts Step `step' took `prints'
 25.         qui {
 26.             timer clear `number'
 27.             timer on    `number'
 28.         }
 29.     }
 30.     else {
 31.         qui {
 32.             timer clear `number'
 33.             timer on    `number'
 34.             timer off   `number'
 35.             timer list  `number'
 36.             timer on    `number'
 37.         }
 38.         if ("`ts'" == "ts") mytimer_ts `step'
 39.     }
 40. end

. 
. capture program drop mytimer_ts

. program mytimer_ts
  1.     display _n(1) "{hline 79}"
  2.     if ("`0'" != "") display `"`0'"'
  3.     display `"        Base: $S_FN"'
  4.     display  "        In memory: `:di trim("`:di %21.0gc _N'")' observations"
  5.     display  "        Timestamp: $S_TIME $S_DATE"
  6.     display  "{hline 79}" _n(1)
  7. end

. 
. capture program drop unit_test

. program unit_test
  1.     syntax, test(str) [NOIsily tab(int 4)]
  2.     local tabs `""'
  3.     forvalues i = 1 / `tab' {
  4.         local tabs "`tabs' "
  5.     }
  6.     cap `noisily' `test'
  7.     if ( _rc ) {
  8.         di as error `"`tabs'test(failed): `test'"'
  9.         exit _rc
 10.     }
 11.     else di as txt `"`tabs'test(passed): `test'"'
 12. end

. 
. capture program drop gen_data

. program gen_data
  1.     syntax, [n(int 100) skipstr]
  2.     clear
  3.     set obs `n'
  4. 
.     * Random strings
.     * --------------
. 
.     if ( "`skipstr'" == "" ) {
  5.         qui ralpha str_long,  l(5)
  6.         qui ralpha str_mid,   l(3)
  7.         qui ralpha str_short, l(1)
  8.     }
  9. 
.     * Generate does-what-it-says-on-the-tin variables
.     * -----------------------------------------------
. 
.     local chars char(40 + mod(_n, 50))
 10.     forvalues i = 1 / 50 {
 11.         local chars `chars' + char(40 + mod(_n + `i', 50))
 12.     }
 13. 
.     forvalues i = 35 / 115 {
 14.         disp `i', char(`i')
 15.     }
 16. 
.     if ( "`skipstr'" == "" ) {
 17.         if ( `c(stata_version)' >= 14 ) {
 18.             gen strL strL1 = str_long  + `chars'
 19.             gen strL strL2 = str_mid   + `chars'
 20.             gen strL strL3 = str_short + `chars'
 21.             forvalues i = 1 / 42 {
 22.                 replace strL1 = strL1 + `chars'
 23.                 replace strL2 = strL2 + `chars'
 24.                 replace strL3 = strL3 + `chars'
 25.             }
 26.         }
 27. 
.         gen str32 str_32   = str_long + "this is some string padding"
 28.         gen str12 str_12   = str_mid  + "padding" + str_short + str_short
 29.         gen str4  str_4    = str_mid  + str_short
 30.     }
 31. 
.     gen long   int1  = floor(uniform() * 1000)
 32.     gen double int2  = floor(rnormal())
 33.     gen long   int3  = floor(rnormal() * 5 + 10)
 34. 
.     gen double double1 = uniform() * 1000
 35.     gen double double2 = rnormal()
 36.     gen double double3 = rnormal() * 5 + 10
 37. 
.     * Mix up string lengths
.     * ---------------------
. 
.     if ( "`skipstr'" == "" ) {
 38.         replace str_32 = str_mid + str_short if mod(_n, 4) == 0
 39.         replace str_12 = str_short + str_mid if mod(_n, 4) == 2
 40.     }
 41. 
.     * Insert some blanks
.     * ------------------
. 
.     if ( "`skipstr'" == "" ) {
 42.         replace str_32 = "            " in 1 / 10
 43.         replace str_12 = "   "          in 1 / 10
 44.         replace str_4  = " "            in 1 / 10
 45. 
.         replace str_32 = "            " if mod(_n, 21) == 0
 46.         replace str_12 = "   "          if mod(_n, 34) == 0
 47.         replace str_4  = " "            if mod(_n, 55) == 0
 48. 
.         if ( `c(stata_version)' >= 14 ) {
 49.             replace strL1 = "            " in 1 / 10
 50.             replace strL2 = "   "          in 1 / 10
 51.             replace strL3 = " "            in 1 / 10
 52. 
.             replace strL1 = "            " if mod(_n, 21) == 0
 53.             replace strL2 = "   "          if mod(_n, 34) == 0
 54.             replace strL3 = " "            if mod(_n, 55) == 0
 55.         }
 56.     }
 57. 
.     * Missing values
.     * --------------
. 
.     if ( "`skipstr'" == "" ) {
 58.         replace str_32 = "" if mod(_n, 10) ==  0
 59.         replace str_12 = "" if mod(_n, 20) ==  0
 60.         replace str_4  = "" if mod(_n, 20) == 10
 61. 
.         if ( `c(stata_version)' >= 14 ) {
 62.             replace strL1 = "" if mod(_n, 10) ==  0
 63.             replace strL2 = "" if mod(_n, 20) ==  0
 64.             replace strL3 = "" if mod(_n, 20) == 10
 65.         }
 66.     }
 67. 
.     replace int2  = .   if mod(_n, 10) ==  0
 68.     replace int3  = .a  if mod(_n, 20) ==  0
 69.     replace int3  = .f  if mod(_n, 20) == 10
 70. 
.     replace double2 = .   if mod(_n, 10) ==  0
 71.     replace double3 = .h  if mod(_n, 20) ==  0
 72.     replace double3 = .p  if mod(_n, 20) == 10
 73. 
.     * Singleton groups
.     * ----------------
. 
.     if ( "`skipstr'" == "" ) {
 74.         replace str_32 = "|singleton|" in `n'
 75.         replace str_12 = "|singleton|" in `n'
 76.         replace str_4  = "|singleton|" in `n'
 77.     }
 78. 
.     replace int1    = 99999  in `n'
 79.     replace double1 = 9999.9 in `n'
 80. 
.     replace int3 = .  in 1
 81.     replace int3 = .a in 2
 82.     replace int3 = .b in 3
 83.     replace int3 = .c in 4
 84.     replace int3 = .d in 5
 85.     replace int3 = .e in 6
 86.     replace int3 = .f in 7
 87.     replace int3 = .g in 8
 88.     replace int3 = .h in 9
 89.     replace int3 = .i in 10
 90.     replace int3 = .j in 11
 91.     replace int3 = .k in 12
 92.     replace int3 = .l in 13
 93.     replace int3 = .m in 14
 94.     replace int3 = .n in 15
 95.     replace int3 = .o in 16
 96.     replace int3 = .p in 17
 97.     replace int3 = .q in 18
 98.     replace int3 = .r in 19
 99.     replace int3 = .s in 20
100.     replace int3 = .t in 21
101.     replace int3 = .u in 22
102.     replace int3 = .v in 23
103.     replace int3 = .w in 24
104.     replace int3 = .x in 25
105.     replace int3 = .y in 26
106.     replace int3 = .z in 27
107. 
.     replace double3 = .  in 1
108.     replace double3 = .a in 2
109.     replace double3 = .b in 3
110.     replace double3 = .c in 4
111.     replace double3 = .d in 5
112.     replace double3 = .e in 6
113.     replace double3 = .f in 7
114.     replace double3 = .g in 8
115.     replace double3 = .h in 9
116.     replace double3 = .i in 10
117.     replace double3 = .j in 11
118.     replace double3 = .k in 12
119.     replace double3 = .l in 13
120.     replace double3 = .m in 14
121.     replace double3 = .n in 15
122.     replace double3 = .o in 16
123.     replace double3 = .p in 17
124.     replace double3 = .q in 18
125.     replace double3 = .r in 19
126.     replace double3 = .s in 20
127.     replace double3 = .t in 21
128.     replace double3 = .u in 22
129.     replace double3 = .v in 23
130.     replace double3 = .w in 24
131.     replace double3 = .x in 25
132.     replace double3 = .y in 26
133.     replace double3 = .z in 27
134. end

. 
. capture program drop random_draws

. program random_draws
  1.     syntax, random(int) [binary(int 0) float double]
  2.     forvalues i = 1 / `random' {
  3.         gen `float'`double' random`i' = rnormal() * `i' * 5
  4.         replace random`i' = . if mod(_n, 20) == 0
  5.         if ( `binary' > 0 ) {
  6.             replace random`i' = floor(runiform() * 1.99) if _n <= `=_N / `binary''
  7.         }
  8.     }
  9. end

. 
. capture program drop quickGini

. program quickGini, sortpreserve
  1.     syntax varname [if] [in] [aw fw pw iw], gen(name) [by(varname) keepneg dropneg]
  2.     tempvar w ysum iysum wsum N
  3.     local y: copy local varlist
  4. 
.     qui {
  5.         if ( `"`dropneg'"' != "" ) {
  6.             tempvar y
  7.             gen double `y' = `varlist' if `varlist' >= 0
  8.         }
  9.         else if ( `"`dropneg'`keepneg'"' == "" ) {
 10.             tempvar y
 11.             gen double `y' = 0
 12.             replace `y' = `varlist' if `varlist' >= 0
 13.         }
 14. 
.         tempvar touse
 15.         if ( `"`exp'"' != "" ) {
 16.             gen double `w' `exp'
 17.             mark `touse' `if' `in' [`weight'=`w']
 18.             sort `touse' `by' `y'
 19.             replace `w' = 0 if mi(`y')
 20.             if ( `"`dropneg'"' != "" ) {
 21.                 replace `y' = 0 if mi(`y')
 22.             }
 23.             by `touse' `by': gen double `ysum'  = sum(`y' * `w') if `touse'
 24.             by `touse' `by': gen double `wsum'  = sum(`w')       if `touse'
 25.             by `touse' `by': gen double `iysum' = sum(`y' * `w' * (2 * `wsum' - `w')) if `touse'
 26.             by `touse' `by': gen double `gen'  = ((`iysum'[_N]) / (`wsum'[_N] * `ysum'[_N])) - 1 if `touse'
 27.         }
 28.         else {
 29.             mark `touse' `if' `in'
 30.             sort `touse' `by' `y'
 31.             gegen long `N' = count(`y') if `touse', by(`by')
 32.             if ( `"`dropneg'"' != "" ) {
 33.                 replace `y' = 0 if mi(`y')
 34.             }
 35.             by `touse' `by': gen double `ysum'  = sum(`y')      if `touse'
 36.             by `touse' `by': gen double `iysum' = sum(`y' * _n) if `touse'
 37.             by `touse' `by': gen double `gen'  = ((2 * `iysum'[_N]) / (`N' * `ysum'[_N])) - ((`N' + 1) / `N') if `touse'
 38.         }
 39.     }
 40. end

. 
. * ---------------------------------------------------------------------
. capture program drop checks_gcollapse

. program checks_gcollapse
  1.     syntax, [tol(real 1e-6) NOIsily *]
  2.     di _n(1) "{hline 80}" _n(1) "checks_gcollapse, `options'" _n(1) "{hline 80}" _n(1)
  3.     local options `options' tol(`tol')
  4. 
.     qui `noisily' gen_data, n(5000)
  5.     qui expand 2
  6.     qui `noisily' random_draws, random(2)
  7.     gen long ix = _n
  8. 
.     checks_inner_collapse, `options'
  9. 
.     checks_inner_collapse -str_12,              `options'
 10.     checks_inner_collapse str_12 -str_32,       `options'
 11.     checks_inner_collapse str_12 -str_32 str_4, `options'
 12. 
.     checks_inner_collapse -double1,                 `options'
 13.     checks_inner_collapse double1 -double2,         `options'
 14.     checks_inner_collapse double1 -double2 double3, `options'
 15. 
.     checks_inner_collapse -int1,           `options'
 16.     checks_inner_collapse int1 -int2,      `options'
 17.     checks_inner_collapse int1 -int2 int3, `options'
 18. 
.     checks_inner_collapse -int1 -str_32 -double1,                                         `options'
 19.     checks_inner_collapse int1 -str_32 double1 -int2 str_12 -double2,                     `options'
 20.     checks_inner_collapse int1 -str_32 double1 -int2 str_12 -double2 int3 -str_4 double3, `options'
 21. 
.     **************************************
.     *  Misc tests of new options in 1.4  *
.     **************************************
. 
.     sysuse auto, clear
 22. 
.     local gcall
 23.     local gcall `gcall' (mean)         mean         = price
 24.     local gcall `gcall' (geomean)      geomean      = price
 25.     local gcall `gcall' (gini)         gini         = price
 26.     local gcall `gcall' (gini|dropneg) gini_dropneg = price
 27.     local gcall `gcall' (gini|keepneg) gini_keepneg = price
 28.     local gcall `gcall' (sd)           sd           = price
 29.     local gcall `gcall' (variance)     variance     = price
 30.     local gcall `gcall' (cv)           cv           = price
 31.     local gcall `gcall' (min)          min          = price
 32.     local gcall `gcall' (max)          max          = price
 33.     local gcall `gcall' (range)        range        = price
 34.     local gcall `gcall' (select1)      select1      = price
 35.     local gcall `gcall' (select2)      select2      = price
 36.     local gcall `gcall' (select3)      select3      = price
 37.     local gcall `gcall' (select99)     select99     = price
 38.     local gcall `gcall' (select-99)    select_99    = price
 39.     local gcall `gcall' (select-3)     select_3     = price
 40.     local gcall `gcall' (select-2)     select_2     = price
 41.     local gcall `gcall' (select-1)     select_1     = price
 42. 
.     gcollapse `gcall', by(foreign) merge
 43.     assert abs((sd / mean) - cv) < `tol'
 44.     assert abs((sd^2 - variance) / min(sd^2, variance)) < `tol'
 45.     assert abs((range) - (max - min)) < `tol'
 46. 
.     bys foreign (price): assert abs(price[1] - select1) < `tol'
 47.     bys foreign (price): assert abs(price[2] - select2) < `tol'
 48.     bys foreign (price): assert abs(price[3] - select3) < `tol'
 49.     bys foreign (price): assert abs(price[_N - 2] - select_3) < `tol'
 50.     bys foreign (price): assert abs(price[_N - 1] - select_2) < `tol'
 51.     bys foreign (price): assert abs(price[_N - 0] - select_1) < `tol'
 52. 
.     assert mi(select99)
 53.     assert mi(select_99)
 54. 
.     clear
 55.     qui {
 56.         set obs 10
 57.         gen x = _n
 58.         gen w = 1.5
 59.         replace x = .  in 1/2
 60.         replace x = .a in 3
 61.         replace x = .b in 4
 62.         replace x = .c in 5
 63.         replace x = .d in 6
 64.     }
 65.     gsort -x
 66. 
.         local gcall
 67.         local gcall `gcall' (min)   min   = x
 68.         local gcall `gcall' (max)   max   = x
 69.         local gcall `gcall' (range) range = x
 70.     preserve
 71.         gcollapse `gcall'
 72.         assert min == 7
 73.         assert max == 10
 74.         assert range == 3
 75.     restore, preserve
 76.         gcollapse `gcall' if mi(x)
 77.         assert min == .
 78.         assert max == .d
 79.         assert range == .
 80.     restore, preserve
 81.         gcollapse `gcall' if x > .
 82.         assert min == .a
 83.         assert max == .d
 84.         assert range == .
 85.     restore
 86. 
.         local gcall
 87.         local gcall `gcall' (select1)   select1   = x
 88.         local gcall `gcall' (select2)   select2   = x
 89.         local gcall `gcall' (select3)   select3   = x
 90.         local gcall `gcall' (select99)  select99  = x
 91.         local gcall `gcall' (select-99) select_99 = x
 92.         local gcall `gcall' (select-3)  select_3  = x
 93.         local gcall `gcall' (select-2)  select_2  = x
 94.         local gcall `gcall' (select-1)  select_1  = x
 95.         local rawstat select1 select2 select3 select99 select_99 select_3 select_2 select_1
 96.     preserve
 97.         gcollapse `gcall'
 98.         assert select1   == 7
 99.         assert select2   == 8
100.         assert select3   == 9
101.         assert select99  == .
102.         assert select_99 == .
103.         assert select_3  == 8
104.         assert select_2  == 9
105.         assert select_1  == 10
106.     restore, preserve
107.         gcollapse `gcall' if mi(x)
108.         assert select1   == .
109.         assert select2   == .
110.         assert select3   == .a
111.         assert select99  == .
112.         assert select_99 == .
113.         assert select_3  == .b
114.         assert select_2  == .c
115.         assert select_1  == .d
116.     restore, preserve
117.         gcollapse `gcall' if x > .
118.         assert select1   == .a
119.         assert select2   == .b
120.         assert select3   == .c
121.         assert select99  == .
122.         assert select_99 == .
123.         assert select_3  == .b
124.         assert select_2  == .c
125.         assert select_1  == .d
126.     restore
127. 
.     preserve
128.         gcollapse `gcall' [w = w], rawstat(`rawstat')
129.         assert select1   == 7
130.         assert select2   == 8
131.         assert select3   == 9
132.         assert select99  == .
133.         assert select_99 == .
134.         assert select_3  == 8
135.         assert select_2  == 9
136.         assert select_1  == 10
137.     restore, preserve
138.         gcollapse `gcall' if mi(x) [w = w], rawstat(`rawstat')
139.         assert select1   == .
140.         assert select2   == .
141.         assert select3   == .a
142.         assert select99  == .
143.         assert select_99 == .
144.         assert select_3  == .b
145.         assert select_2  == .c
146.         assert select_1  == .d
147.     restore, preserve
148.         gcollapse `gcall' if x > . [w = w], rawstat(`rawstat')
149.         assert select1   == .a
150.         assert select2   == .b
151.         assert select3   == .c
152.         assert select99  == .
153.         assert select_99 == .
154.         assert select_3  == .b
155.         assert select_2  == .c
156.         assert select_1  == .d
157.     restore
158. 
.     preserve
159.         gcollapse `gcall' [w = w]
160.         assert select1   == 7
161.         assert select2   == 8
162.         assert select3   == 8
163.         assert select99  == .
164.         assert select_99 == .
165.         assert select_3  == 9
166.         assert select_2  == 9
167.         assert select_1  == 10
168.     restore, preserve
169.         gcollapse `gcall' if mi(x) [w = w]
170.         assert select1   == .
171.         assert select2   == .
172.         assert select3   == .
173.         assert select99  == .
174.         assert select_99 == .
175.         assert select_3  == .
176.         assert select_2  == .
177.         assert select_1  == .
178.     restore, preserve
179.         gcollapse `gcall' if x > . [w = w]
180.         assert select1   == .
181.         assert select2   == .
182.         assert select3   == .
183.         assert select99  == .
184.         assert select_99 == .
185.         assert select_3  == .
186.         assert select_2  == .
187.         assert select_1  == .
188.     restore
189. 
.         local gcall
190.         local gcall `gcall' (select1)   select1   = x
191.         local gcall `gcall' (select2)   select2   = x
192.         local gcall `gcall' (select3)   select3   = x
193.         local gcall `gcall' (select99)  select99  = x
194.         local gcall `gcall' (select-99) select_99 = x
195.         local gcall `gcall' (select-3)  select_3  = x
196.         local gcall `gcall' (select-2)  select_2  = x
197.         local gcall `gcall' (select-1)  select_1  = x
198.         local gcall `gcall' (rawselect1)   rawselect1   = x
199.         local gcall `gcall' (rawselect2)   rawselect2   = x
200.         local gcall `gcall' (rawselect3)   rawselect3   = x
201.         local gcall `gcall' (rawselect99)  rawselect99  = x
202.         local gcall `gcall' (rawselect-99) rawselect_99 = x
203.         local gcall `gcall' (rawselect-3)  rawselect_3  = x
204.         local gcall `gcall' (rawselect-2)  rawselect_2  = x
205.         local gcall `gcall' (rawselect-1)  rawselect_1  = x
206.         local rawstat select1 select2 select3 select99 select_99 select_3 select_2 select_1
207.     preserve
208.         gcollapse `gcall' [w = w], rawstat(`rawstat')
209.         assert (select1   == 7)  & (select1   == rawselect1)
210.         assert (select2   == 8)  & (select2   == rawselect2)
211.         assert (select3   == 9)  & (select3   == rawselect3)
212.         assert (select99  == .)  & (select99  == rawselect99)
213.         assert (select_99 == .)  & (select_99 == rawselect_99)
214.         assert (select_3  == 8)  & (select_3  == rawselect_3)
215.         assert (select_2  == 9)  & (select_2  == rawselect_2)
216.         assert (select_1  == 10) & (select_1  == rawselect_1)
217.     restore, preserve
218.         gcollapse `gcall' if mi(x) [w = w], rawstat(`rawstat')
219.         assert (select1   == .)   & (select1   == rawselect1)
220.         assert (select2   == .)   & (select2   == rawselect2)
221.         assert (select3   == .a)  & (select3   == rawselect3)
222.         assert (select99  == .)   & (select99  == rawselect99)
223.         assert (select_99 == .)   & (select_99 == rawselect_99)
224.         assert (select_3  == .b)  & (select_3  == rawselect_3)
225.         assert (select_2  == .c)  & (select_2  == rawselect_2)
226.         assert (select_1  == .d)  & (select_1  == rawselect_1)
227.     restore, preserve
228.         gcollapse `gcall' if x > . [w = w], rawstat(`rawstat')
229.         assert (select1   == .a)  & (select1   == rawselect1)
230.         assert (select2   == .b)  & (select2   == rawselect2)
231.         assert (select3   == .c)  & (select3   == rawselect3)
232.         assert (select99  == .)   & (select99  == rawselect99)
233.         assert (select_99 == .)   & (select_99 == rawselect_99)
234.         assert (select_3  == .b)  & (select_3  == rawselect_3)
235.         assert (select_2  == .c)  & (select_2  == rawselect_2)
236.         assert (select_1  == .d)  & (select_1  == rawselect_1)
237.     restore
238. 
.     **************************
.     *  Undocumented options  *
.     **************************
. 
.     clear
239.     set obs 100
240.     gen x = _n
241.     gen y = mod(_n, 13)
242.     gen z = mod(_n, 3)
243.     gegen dmx = mean(x), _subtract
244.     gegen dmy = mean(y), _subtract
245.     gegen  mx = mean(x)
246.     gegen  my = mean(y)
247.     assert abs(dmx - (x - mx)) < `tol'
248.     assert abs(dmy - (y - my)) < `tol'
249. 
.     drop *m?
250.     gcollapse (mean) dmx = x dmy = y, merge _subtract
251.     gcollapse (mean)  mx = x  my = y, merge
252.     assert abs(dmx - (x - mx)) < `tol'
253.     assert abs(dmy - (y - my)) < `tol'
254. 
.     drop *m?
255.     gegen dmx = mean(x), by(z) _subtract
256.     gegen dmy = mean(y), by(z) _subtract
257.     gegen  mx = mean(x), by(z)
258.     gegen  my = mean(y), by(z)
259.     assert abs(dmx - (x - mx)) < `tol'
260.     assert abs(dmy - (y - my)) < `tol'
261. 
.     drop *m?
262.     gcollapse (mean) dmx = x dmy = y, by(z) merge _subtract
263.     gcollapse (mean)  mx = x  my = y, by(z) merge
264.     assert abs(dmx - (x - mx)) < `tol'
265.     assert abs(dmy - (y - my)) < `tol'
266. 
.     ****************
.     *  Misc tests  *
.     ****************
. 
.     clear
267.     cap gcollapse
268.     assert _rc == 198
269.     set obs 10
270.     cap gcollapse
271.     assert _rc == 198
272.     gen x = .
273.     gcollapse x
274. 
.     clear
275.     set obs 10
276.     gen x = .
277.     gen w = .
278.     cap gcollapse x [w = w]
279.     assert _rc == 2000
280.     cap gcollapse x if w == 0
281.     assert _rc == 2000
282. 
.     clear
283.     set obs 10
284.     gen x = _n
285.     gen y = 1
286.     gcollapse (kurt) mx = x, merge
287.     cap gcollapse (kurt) mx = x, merge
288.     assert _rc == 110
289.     gcollapse mx = x, merge replace
290.     gcollapse mx = x, merge by(y) replace
291.     cap gcollapse y = x,  merge by(y)
292.     assert _rc == 110
293.     cap gcollapse y = x,  merge by(y) replace
294.     assert _rc == 110
295.     gcollapse y = x,  merge by(y) debug_replaceby
296.     cap gcollapse x = x,  merge by(y)
297.     assert _rc == 110
298.     gcollapse x = x,  merge by(y) replace
299.     cap gcollapse mx = x,  merge by(y)
300.     assert _rc == 110
301. 
.     * Weird stuff happens when you try to use tempvar names without
.     * calling tempvar. DON'T!
. 
.     * clear
.     * set obs 10
.     * gen x = _n
.     * gen y = 1
.     * gcollapse __000000 = x __000001 = x __000002 = x,         merge by(y)
.     * gcollapse __000000 = x __000001 = x __000002 = x if 1,    merge by(y)
.     * gcollapse __000000 = x __000001 = x __000002 = x [w = y], merge by(y)
. 
.     clear
302.     set obs 10
303.     gen byte x = _n
304.     replace x = . in 1/5
305.     gen y = mi(x)
306.     preserve
307.         gcollapse (nmissing) nm = x ///
>                   (sum) s = x       ///
>                   (rawsum) rs = x   ///
>                   (nansum) ns = x   ///
>                   (rawnansum) rns = x, by(y)
308.         l
309.         assert !mi(s) & !mi(rs)
310.         assert  mi(ns[2]) &  mi(rns[2])
311.         assert !mi(ns[1]) & !mi(rns[1])
312.         assert (nm[1] == 0) & (nm[2] == 5)
313.     restore, preserve
314.         gcollapse (nmissing) nm = x ///
>                   (sum) s = x       ///
>                   (rawsum) rs = x   ///
>                   (nansum) ns = x   ///
>                   (rawnansum) rns = x [fw = 9123], by(y)
315.         assert !mi(s) & !mi(rs)
316.         assert  mi(ns[2]) &  mi(rns[2])
317.         assert !mi(ns[1]) & !mi(rns[1])
318.         assert (nm[1] == 0) & (nm[2] == 5 * 9123)
319.     restore, preserve
320.         gcollapse (nmissing) nm = x ///
>                   (sum) s = x       ///
>                   (rawsum) rs = x   ///
>                   (nansum) ns = x   ///
>                   (rawnansum) rns = x [pw = 987654321], by(y)
321.         assert !mi(s) & !mi(rs)
322.         assert  mi(ns[2]) &  mi(rns[2])
323.         assert !mi(ns[1]) & !mi(rns[1])
324.         assert (nm[1] == 0) & (nm[2] == 5 * 987654321)
325.     restore, preserve
326.         gcollapse (nmissing) nm = x ///
>                   (sum) s = x       ///
>                   (rawsum) rs = x   ///
>                   (nansum) ns = x   ///
>                   (rawnansum) rns = x [aw = 2323.412], by(y)
327.         assert !mi(s) & !mi(rs)
328.         assert  mi(ns[2]) &  mi(rns[2])
329.         assert !mi(ns[1]) & !mi(rns[1])
330.         assert (nm[1] == 0) & (nm[2] == 5)
331.     restore
332.     gcollapse (nmissing) nm = x ///
>               (sum) s = x       ///
>               (rawsum) rs = x   ///
>               (nansum) ns = x   ///
>               (rawnansum) rns = x, by(y) missing
333.     assert s == ns
334.     assert rs == rns
335.     assert  mi(ns[2]) &  mi(rns[2])
336.     assert !mi(ns[1]) & !mi(rns[1])
337.     assert (nm[1] == 0) & (nm[2] == 5)
338. end

. 
. capture program drop checks_inner_collapse

. program checks_inner_collapse
  1.     syntax [anything], [tol(real 1e-6) wgt(str) *]
  2. 
.     local 0 `anything' `wgt', `options'
  3.     syntax [anything] [aw fw iw pw], [*]
  4. 
.     local percentiles p1 p10 p30.5 p50 p70.5 p90 p99
  5.     local selections  select1 select2 select5 select999999 select-999999 select-5 select-2 select-1
  6.     local stats nunique nmissing sum mean geomean max min range count percent first last firstnm lastnm median iqr skew kurt gini gini|dropneg gini|keepneg
  7.     if ( !inlist("`weight'", "pweight") )            local stats `stats' sd variance cv
  8.     if ( !inlist("`weight'", "pweight", "iweight") ) local stats `stats' semean
  9.     if (  inlist("`weight'", "fweight", "") )        local stats `stats' sebinomial sepoisson
 10. 
.     local collapse_str ""
 11.     foreach stat of local stats {
 12.         local collapse_str `collapse_str' (`stat') r1_`:subinstr local stat "|" "_", all' = random1
 13.     }
 14.     foreach pct of local percentiles {
 15.         local collapse_str `collapse_str' (`pct') r1_`:subinstr local pct "." "_", all' = random1
 16.     }
 17.     if ( !inlist("`weight'", "iweight") ) {
 18.         foreach sel of local selections {
 19.             local collapse_str `collapse_str' (`sel') s1_`:subinstr local sel "-" "_", all' = random1
 20.         }
 21.     }
 22. 
.     foreach stat of local stats {
 23.         local collapse_str `collapse_str' (`stat') r2_`:subinstr local stat "|" "_", all' = random2
 24.     }
 25.     foreach pct of local percentiles {
 26.         local collapse_str `collapse_str' (`pct') r2_`:subinstr local pct "." "_", all' = random2
 27.     }
 28.     if ( !inlist("`weight'", "iweight") ) {
 29.         foreach sel of local selections {
 30.             local collapse_str `collapse_str' (`sel') s2_`:subinstr local sel "-" "_", all' = random2
 31.         }
 32.     }
 33. 
.     preserve
 34.         gcollapse `collapse_str' `wgt', by(`anything') verbose `options'
 35.     restore, preserve
 36.         gcollapse `collapse_str' `wgt', by(`anything') verbose benchmark `options'
 37.     restore, preserve
 38.         gcollapse `collapse_str' `wgt', by(`anything') verbose forceio `options'
 39.     restore, preserve
 40.         gcollapse `collapse_str' `wgt', by(`anything') verbose forcemem `options'
 41.     restore, preserve
 42.         gcollapse `collapse_str' `wgt', by(`anything') verbose benchmark cw `options'
 43.     restore, preserve
 44.         gcollapse `collapse_str' `wgt', by(`anything') verbose benchmark fast `options'
 45.     restore, preserve
 46.         gcollapse `collapse_str' `wgt', by(`anything') double `options'
 47.     restore, preserve
 48.         gcollapse `collapse_str' `wgt', by(`anything') merge `options'
 49.     restore, preserve
 50.         gcollapse `collapse_str' `wgt', by(`anything') verbose `options' benchmark debug_io_check(0)
 51.     restore
 52. end

. 
. ***********************************************************************
. *                            Corner cases                             *
. ***********************************************************************
. 
. capture program drop checks_corners

. program checks_corners
  1.     syntax, [*]
  2.     di _n(1) "{hline 80}" _n(1) "checks_corners `options'" _n(1) "{hline 80}" _n(1)
  3. 
.     qui {
  4.         mac drop GTOOLS_BETA
  5.         cap gregress
  6.         assert _rc == 198
  7.         cap givregress
  8.         assert _rc == 198
  9.         cap gpoisson
 10.         assert _rc == 198
 11.         global GTOOLS_BETA = 1
 12. 
.         clear
 13.         gregress
 14.         givregress
 15.         gpoisson
 16.     }
 17. 
.     * Select used to not correctly select amonghts missing values
.     qui {
 18.         clear
 19.         set obs 3
 20.         gen value = .
 21.         replace value = .a in 3
 22.         replace value = .b in 2
 23.         gen date = 1
 24. 
.         gstats range (select1 . . date)  x1 = value
 25.         gstats range (select1)           x2 = value
 26.         gstats range (select2)           x3 = value
 27.         gstats range (select3)           x4 = value
 28.         gstats range (select-1)          x5 = value
 29.         gstats range (select-2 . . date) x6 = value
 30. 
.         assert x1 == .
 31.         assert x2 == .
 32.         assert x3 == .a
 33.         assert x4 == .b
 34.         assert x5 == .b
 35.         assert x6 == .a
 36. 
.         drop x?
 37.         gstats range (rawselect1 . . date)  x1 = value [fw = 1]
 38.         gstats range (rawselect1)           x2 = value [fw = 1]
 39.         gstats range (rawselect2)           x3 = value [fw = 1]
 40.         gstats range (rawselect3)           x4 = value [fw = 1]
 41.         gstats range (rawselect-1)          x5 = value [fw = 1]
 42.         gstats range (rawselect-2 . . date) x6 = value [fw = 1]
 43. 
.         assert x1 == .
 44.         assert x2 == .
 45.         assert x3 == .a
 46.         assert x4 == .b
 47.         assert x5 == .b
 48.         assert x6 == .a
 49.     }
 50. 
.     * Negative or zero values for geomean
.     qui {
 51.         clear
 52.         set obs 10
 53.         gen g = mod(_n, 2)
 54.         gen x = _n - 6
 55.         gen w = cond(x < 0, 0, _n)
 56.         preserve
 57.             gcollapse (geomean) x, by(g)
 58.             assert mi(x)
 59.         restore, preserve
 60.             gcollapse (geomean) x if x > 0, by(g)
 61.             assert x != 0 & !mi(x)
 62.         restore, preserve
 63.             gcollapse (geomean) x if x >= 0, by(g)
 64.             assert x[1] == 0 & !mi(x[2])
 65.         restore, preserve
 66.             gcollapse (geomean) x [aw = w], by(g)
 67.             assert x[1] == 0 & !mi(x[2])
 68.         restore, preserve
 69.             gcollapse (geomean) x [fw = w], by(g)
 70.             assert x[1] == 0 & !mi(x[2])
 71.         restore
 72.     }
 73. 
.     * Parsing by: in gegen
.     qui {
 74.         clear
 75.         set obs 10
 76.         gen var = mod(_n, 3)
 77.         gen y   = _n
 78.         gen u   = runiform()
 79.         cap noi by var: gegen x = mean(max(y, y[1]))
 80.         by var (u), sort: gegen x = mean(max(y, y[1]))
 81.         sort y
 82.         bys var (u): gegen z = mean(max(y, y[1]))
 83.         bys var (u):  egen w = mean(max(y, y[1]))
 84.         assert x == z
 85.         assert x == w
 86.     }
 87. 
.     * Parsing negatives
.     qui {
 88.         sysuse auto, clear
 89.         gtop * if foreign [w = rep78]
 90.         gtop -* if foreign [w = rep78]
 91.         gen bye = 1
 92.         gtop bye *n*
 93.         gtop bye -*n*
 94. 
.         glevelsof *  if (27 * foreign)
 95.         glevelsof -* if (27 * foreign)
 96. 
.         sysuse auto, clear
 97.         gcontract * if foreign [w = rep78]
 98. 
.         sysuse auto, clear
 99.         gcontract foreign -*n* price if price > 5000 [w = rep78]
100. 
.         sysuse auto, clear
101.         gcollapse price if price > 5000 [w = rep78], by(*n*)
102. 
.         sysuse auto, clear
103.         gcollapse price if price > 5000 [w = rep78], by(foreign -*n*)
104. 
.         clear
105.         set obs 3
106.         gen  i = _n
107.         gen x1 = 1
108.         gen x2 = 2
109.         gen y3 = _n
110.         cap noi greshape long x y
111.         cap noi greshape wide x y
112.         cap noi greshape spread x y
113.         cap noi greshape spread x y
114.         greshape long x y, i(i) j(j)
115.         greshape wide x y, i(i) j(j)
116.         greshape long x y, by(i) j(j)
117.         greshape wide x y, by(i) j(j)
118.         greshape long x y, i(i) keys(j)
119.         greshape wide x y, i(i) keys(j)
120.         greshape long x y, by(i) keys(j)
121.         greshape wide x y, by(i) keys(j)
122.         greshape long x y, by(i) keys(j)
123.         gen k = _N - _n
124.         greshape wide x y, by(i) keys(j k)
125.         cap noi greshape
126.         greshape long x y, by(i) keys(j) string
127.         replace j = "" in 1 / 10
128.         cap noi greshape wide x y, by(i) keys(j) nomisscheck
129.         replace j = " " in 1 / 10
130.         cap noi greshape wide x y, by(i) keys(j) nomisscheck
131.         replace j = "" in 1 / 10
132.         gen j2 = j
133.         cap noi greshape wide x y, by(i) keys(j j2) nomisscheck
134.     }
135. 
.     * https://github.com/mcaceresb/stata-gtools/issues/45
.     qui {
136.         clear
137.         set obs 5
138.         gen long id1 = 0
139.         gen int id2  = 0
140.         replace id1 = 3 in 1
141.         replace id1 = 3 in 2
142.         replace id1 = 9 in 3
143.         replace id1 = 4 in 4
144.         replace id1 = 9 in 5
145.         replace id2 = 6 in 1
146.         replace id2 = 7 in 2
147.         replace id2 = 1 in 3
148.         replace id2 = 1 in 4
149.         replace id2 = 1 in 5
150.         gen id3 = _n
151.         tostring id1 id2, gen(sid1 sid2)
152.         cap noi gisid id1 id2, v
153.         assert _rc == 459
154.         cap noi gisid sid1 sid2, v
155.         assert _rc == 459
156. 
.         sort id1 id2
157.         cap noi gisid id1 id2, v
158.         assert _rc == 459
159.         sort sid1 sid2
160.         cap noi gisid sid1 sid2, v
161.         assert _rc == 459
162. 
.         gen sid3 = string(_n)
163.         cap noi gisid id1 id2 id3, v
164.         assert _rc == 0
165.         cap noi gisid sid1 sid2 sid3, v
166.         assert _rc == 0
167.     }
168. 
.     * https://github.com/mcaceresb/stata-gtools/issues/44
.     qui {
169.         * 1. byte, int, long upgraded to int, long, double
.         * 2. byte, int, long preserved
.         * 3. float always upgraded
.         * 4. float, double never downgraded
.         * 5. Overflow warning
.         clear
170.         set obs 10
171.         gen byte    b1 = 1
172.         gen int     i1 = 2
173.         gen long    l1 = 3
174.         gen float   f1 = 3.14
175.         gen double  d1 = 3.141592
176.         gen byte    b2 = maxbyte()
177.         gen int     i2 = maxint()
178.         gen long    l2 = maxlong()
179.         gen float   f2 = maxfloat()
180.         gen double  d2 = maxdouble()
181. 
.         preserve
182.             gcollapse (sum) *
183.             foreach var of varlist * {
184.                 assert "`:type `var''" == "double"
185.             }
186.         restore, preserve
187.             gcollapse (sum) *, sumcheck
188.             foreach var of varlist f1 d1 l2 f2 d2 {
189.                 assert "`:type `var''" == "double"
190.             }
191.             assert "`:type b1'" == "byte"
192.             assert "`:type i1'" == "int"
193.             assert "`:type l1'" == "long"
194.             assert "`:type b2'" == "int"
195.             assert "`:type i2'" == "long"
196.         restore, preserve
197.             gcollapse (mean) m_* = * (sum) * (max) mx_* = *, sumcheck wild
198.             foreach var of varlist f1 d1 l2 f2 d2 {
199.                 assert "`:type `var''" == "double"
200.             }
201.             assert "`:type b1'" == "byte"
202.             assert "`:type i1'" == "int"
203.             assert "`:type l1'" == "long"
204.             assert "`:type b2'" == "int"
205.             assert "`:type i2'" == "long"
206.         restore, preserve
207.             gcollapse (sum) s_* = * (mean) m_* = * (max) mx_* = *, sumcheck wild
208.             foreach var of varlist s_f1 s_d1 s_l2 s_f2 s_d2 {
209.                 assert "`:type `var''" == "double"
210.             }
211.             assert "`:type s_b1'" == "byte"
212.             assert "`:type s_i1'" == "int"
213.             assert "`:type s_l1'" == "long"
214.             assert "`:type s_b2'" == "int"
215.             assert "`:type s_i2'" == "long"
216.         restore, preserve
217.             gcollapse (sum) s_* = * (mean) * (max) mx_* = *, sumcheck wild
218.             foreach var of varlist s_f1 s_d1 s_l2 s_f2 s_d2 {
219.                 assert "`:type `var''" == "double"
220.             }
221.             assert "`:type s_b1'" == "byte"
222.             assert "`:type s_i1'" == "byte"
223.             assert "`:type s_l1'" == "byte"
224.             assert "`:type s_b2'" == "int"
225.             assert "`:type s_i2'" == "long"
226.         restore, preserve
227.             gcollapse (sum) b1 [fw = i2], sumcheck
228.             assert "`:type b1'" == "long"
229.         restore, preserve
230.             gcollapse (sum) b1 [fw = d2], sumcheck
231.             assert "`:type b1'" == "double"
232.         restore, preserve
233.             gen n = _n
234.             gcollapse (sum) b1 [fw = d2], by(n) sumcheck
235.             assert "`:type b1'" == "double"
236.             assert b1 == maxdouble()
237.         restore
238.     }
239. 
.     * e-mail issue #0
.     qui {
240.         clear
241.         set more off
242.         set seed 1
243.         set obs 2
244.         g y = 1.23
245.         preserve
246.             gcollapse (count) cy = y (first) fy = y, freq(z)
247.             assert abs(fy - 1.23) < 1e-6
248.         restore, preserve
249.             gcollapse (count) y (first) fy = y, freq(z)
250.             assert abs(fy - 1.23) < 1e-6
251.         restore, preserve
252.             gcollapse (first) fy = y (count) y , freq(z)
253.             assert abs(fy - 1.23) < 1e-6
254.         restore, preserve
255.             gcollapse (first) fy = y (count) cy = y, freq(z)
256.             assert abs(fy - 1.23) < 1e-6
257.         restore
258.     }
259. 
.     * https://github.com/mcaceresb/stata-gtools/issues/39
.     qui {
260.         clear
261.         set obs 5
262.         gen x = _n
263.         gen strL y = "hi"
264.         cap gcollapse (p70) x, by(y)
265.         assert _rc == 17002
266. 
.         clear
267.         set obs 5
268.         gen x = _n
269.         gen strL y = "hi"
270.         cap gcollapse (p70) x, by(y) compress
271.         assert _rc == 0
272. 
.         clear
273.         set obs 5
274.         gen x = _n
275.         gen strL y = "hi" + string(mod(_n, 2)) + char(9) + char(0)
276.         cap gcollapse (p70) x, by(y)
277.         assert _rc == 17002
278.         cap gcollapse (p70) x, by(y) compress
279.         assert _rc == 17004
280.     }
281. 
.     * https://github.com/mcaceresb/stata-gtools/issues/38
.     qui {
282.         clear
283.         set obs 5
284.         gen x = _n
285.         gcollapse (p70) x
286.         assert x == 4
287. 
.         clear
288.         set obs 5
289.         gen x = _n
290.         gcollapse (p80) x
291.         assert x == 4.5
292. 
.         clear
293.         set obs 5
294.         gen x = _n
295.         gcollapse (p80.0001) x
296.         assert x == 5
297. 
.         clear
298.         set obs 3
299.         gen x = _n
300.         gcollapse (p50) x
301.         assert x == 2
302. 
.         clear
303.         set obs 3
304.         gen x = _n
305.         gcollapse (p66.6) x
306.         assert x == 2
307. 
.         clear
308.         set obs 3
309.         gen x = _n
310.         gcollapse (p66.7) x
311.         assert x == 3
312.     }
313. 
.     * https://github.com/mcaceresb/stata-gtools/issues/32
.     qui {
314.         clear
315.         sysuse auto
316.         set varabbrev on
317.         gcollapse head = head
318.         set varabbrev off
319.     }
320. 
.     qui {
321.         clear
322.         set obs 10
323.         gen x = .
324.         gcollapse (sum) y = x, merge missing
325.         gcollapse (sum) z = x, merge
326.         assert y == .
327.         assert z == 0
328.     }
329. 
.     * https://github.com/mcaceresb/stata-gtools/issues/27
.     qui {
330.         clear
331.         set obs 10
332.         gen xxx = 1
333.         set varabbrev on
334.         cap confirm xx
335.         gcollapse xx = xxx
336.         cap confirm x
337.         set varabbrev off
338.     }
339. 
.     qui {
340.         sysuse auto, clear
341.         gen price2 = price
342.         cap noi gcollapse price = price2 if price < 0
343.         assert _rc == 2000
344.     }
345. 
.     qui {
346.         sysuse auto, clear
347.         gen price2 = price
348.         gcollapse price = price2
349.     }
350. 
.     qui {
351.         sysuse auto, clear
352.         gen price2 = price
353.         gcollapse price = price2, by(make) v bench `options'
354.         gcollapse price in 1,     by(make) v bench `options'
355.     }
356. 
.     qui {
357.         clear
358.         set matsize 100
359.         set obs 10
360.         forvalues i = 1/101 {
361.             gen x`i' = 10
362.         }
363.         gen zz = runiform()
364.         preserve
365.             gcollapse zz, by(x*) `options'
366.         restore, preserve
367.             gcollapse x*, by(zz) `options'
368.         restore
369.     }
370. 
.     qui {
371.         clear
372.         set matsize 400
373.         set obs 10
374.         forvalues i = 1/300 {
375.             gen x`i' = 10
376.         }
377.         gen zz = runiform()
378.         preserve
379.             gcollapse zz, by(x*) `options'
380.         restore, preserve
381.             gcollapse x*, by(zz) `options'
382.         restore
383.     }
384. 
.     qui {
385.         clear
386.         set obs 10
387.         forvalues i = 1/800 {
388.             gen x`i' = 10
389.         }
390.         gen zz = runiform()
391.         preserve
392.             gcollapse zz, by(x*) `options'
393.         restore, preserve
394.             gcollapse x*, by(zz) `options'
395.         restore
396. 
.         * Only fails in Stata/IC
.         * gen x801 = 10
.         * preserve
.         *     collapse zz, by(x*) `options'
.         * restore, preserve
.         *     collapse x*, by(zz) `options'
.         * restore
.     }
397. 
.     di ""
398.     di as txt "Passed! checks_corners `options'"
399. end

. 
. ***********************************************************************
. *                               Compare                               *
. ***********************************************************************
. 
. capture program drop compare_gcollapse

. program compare_gcollapse
  1.     syntax, [tol(real 1e-6) NOIsily *]
  2. 
.     * This should be ignored for compare_inner_gcollapse_gegen bc of merge
.     local debug_io debug_io_check(0) debug_io_threshold(0.0001)
  3. 
.     qui `noisily' gen_data, n(500)
  4.     qui expand 100
  5.     qui `noisily' random_draws, random(2)
  6. 
.     di _n(1) "{hline 80}" _n(1) "consistency_gcollapse_gegen, `options'" _n(1) "{hline 80}" _n(1)
  7. 
.     compare_inner_gcollapse_gegen, `options' tol(`tol')
  8. 
.     compare_inner_gcollapse_gegen -str_12,              `options' tol(`tol') `debug_io'
  9.     compare_inner_gcollapse_gegen str_12 -str_32,       `options' tol(`tol') sort
 10.     compare_inner_gcollapse_gegen str_12 -str_32 str_4, `options' tol(`tol') shuffle
 11. 
.     compare_inner_gcollapse_gegen -double1,                 `options' tol(`tol') `debug_io'
 12.     compare_inner_gcollapse_gegen double1 -double2,         `options' tol(`tol') sort
 13.     compare_inner_gcollapse_gegen double1 -double2 double3, `options' tol(`tol') shuffle
 14. 
.     compare_inner_gcollapse_gegen -int1,           `options' tol(`tol') `debug_io'
 15.     compare_inner_gcollapse_gegen int1 -int2,      `options' tol(`tol') sort
 16.     compare_inner_gcollapse_gegen int1 -int2 int3, `options' tol(`tol') shuffle
 17. 
.     compare_inner_gcollapse_gegen -int1 -str_32 -double1, `options' tol(`tol') `debug_io'
 18.     compare_inner_gcollapse_gegen int1 -str_32 double1 -int2 str_12 -double2, `options' tol(`tol') sort
 19.     compare_inner_gcollapse_gegen int1 -str_32 double1 -int2 str_12 -double2 int3 -str_4 double3, `options' tol(`tol') shuffle
 20. 
.     qui `noisily' gen_data, n(500)
 21.     qui expand 50
 22.     qui `noisily' random_draws, random(2) binary(5)
 23. 
.     di _n(1) "{hline 80}" _n(1) "consistency_gcollapse_select_etc, `options'" _n(1) "{hline 80}" _n(1)
 24. 
.     compare_inner_gcollapse_select -str_12,              `options' tol(`tol') `debug_io'
 25.     compare_inner_gcollapse_select str_12 -str_32,       `options' tol(`tol') sort
 26.     compare_inner_gcollapse_select str_12 -str_32 str_4, `options' tol(`tol') shuffle
 27. 
.     compare_inner_gcollapse_select -double1,                 `options' tol(`tol') `debug_io'
 28.     compare_inner_gcollapse_select double1 -double2,         `options' tol(`tol') sort
 29.     compare_inner_gcollapse_select double1 -double2 double3, `options' tol(`tol') shuffle
 30. 
.     compare_inner_gcollapse_select -int1,           `options' tol(`tol') `debug_io'
 31.     compare_inner_gcollapse_select int1 -int2,      `options' tol(`tol') sort
 32.     compare_inner_gcollapse_select int1 -int2 int3, `options' tol(`tol') shuffle
 33. 
.     compare_inner_gcollapse_select int1 -str_32 double1 -int2 str_12 -double2 int3 -str_4 double3, `options' tol(`tol') shuffle
 34. 
.     di _n(1) "{hline 80}" _n(1) "consistency_gcollapse_skew_kurt, `options'" _n(1) "{hline 80}" _n(1)
 35. 
.     compare_inner_gcollapse_skew, `options' tol(`tol')
 36. 
.     compare_inner_gcollapse_skew -str_12,              `options' tol(`tol') `debug_io'
 37.     compare_inner_gcollapse_skew str_12 -str_32,       `options' tol(`tol') sort
 38.     compare_inner_gcollapse_skew str_12 -str_32 str_4, `options' tol(`tol') shuffle
 39. 
.     compare_inner_gcollapse_skew -double1,                 `options' tol(`tol') `debug_io'
 40.     compare_inner_gcollapse_skew double1 -double2,         `options' tol(`tol') sort
 41.     compare_inner_gcollapse_skew double1 -double2 double3, `options' tol(`tol') shuffle
 42. 
.     compare_inner_gcollapse_skew -int1,           `options' tol(`tol') `debug_io'
 43.     compare_inner_gcollapse_skew int1 -int2,      `options' tol(`tol') sort
 44.     compare_inner_gcollapse_skew int1 -int2 int3, `options' tol(`tol') shuffle
 45. 
.     compare_inner_gcollapse_skew -int1 -str_32 -double1, `options' tol(`tol') `debug_io'
 46.     compare_inner_gcollapse_skew int1 -str_32 double1 -int2 str_12 -double2, `options' tol(`tol') sort
 47.     compare_inner_gcollapse_skew int1 -str_32 double1 -int2 str_12 -double2 int3 -str_4 double3, `options' tol(`tol') shuffle
 48. 
.     qui `noisily' gen_data, n(500)
 49.     qui expand 50
 50.     qui `noisily' random_draws, random(2) binary(5)
 51. 
.     di _n(1) "{hline 80}" _n(1) "consistency_collapse, `options'" _n(1) "{hline 80}" _n(1)
 52. 
.     compare_inner_collapse, `options' tol(`tol')
 53. 
.     compare_inner_collapse str_12,              `options' tol(`tol') forcemem sort
 54.     compare_inner_collapse str_12 str_32,       `options' tol(`tol') forceio shuffle
 55.     compare_inner_collapse str_12 str_32 str_4, `options' tol(`tol') `debug_io'
 56. 
.     compare_inner_collapse double1,                 `options' tol(`tol') forcemem
 57.     compare_inner_collapse double1 double2,         `options' tol(`tol') forceio sort
 58.     compare_inner_collapse double1 double2 double3, `options' tol(`tol') `debug_io' shuffle
 59. 
.     compare_inner_collapse int1,           `options' tol(`tol') forcemem shuffle
 60.     compare_inner_collapse int1 int2,      `options' tol(`tol') forceio
 61.     compare_inner_collapse int1 int2 int3, `options' tol(`tol') `debug_io' sort
 62. 
.     compare_inner_collapse int1 str_32 double1,                                        `options' tol(`tol') forcemem
 63.     compare_inner_collapse int1 str_32 double1 int2 str_12 double2,                    `options' tol(`tol') forceio
 64.     compare_inner_collapse int1 str_32 double1 int2 str_12 double2 int3 str_4 double3, `options' tol(`tol') `debug_io'
 65. end

. 
. ***********************************************************************
. *                            Compare gegen                            *
. ***********************************************************************
. 
. capture program drop compare_inner_gcollapse_gegen

. program compare_inner_gcollapse_gegen
  1.     syntax [anything], [tol(real 1e-6) sort shuffle wgt(str) *]
  2. 
.     gettoken wfun wfoo: wgt
  3.     local wfun `wfun'
  4.     local wfoo `wfoo'
  5.     if ( `"`wfoo'"' == "mix" ) {
  6.         local wgen_a  qui gen unif_0_100 = 100 * runiform() if mod(_n, 100)
  7.         local wcall_a "[aw = unif_0_100]"
  8.         local wgen_f  qui gen int_unif_0_100 = int(100 * runiform()) if mod(_n, 100)
  9.         local wcall_f "[fw = int_unif_0_100]"
 10.         local wgen_p  qui gen float_unif_0_1 = runiform() if mod(_n, 100)
 11.         local wcall_p "[pw = float_unif_0_1]"
 12.         local wgen_i  qui gen rnormal_0_10 = 10 * rnormal() if mod(_n, 100)
 13.         local wcall_i "[iw = rnormal_0_10]"
 14.     }
 15.     else {
 16.         local wgt wgt(`wgt')
 17.     }
 18. 
.     tempvar rsort
 19.     if ( "`shuffle'" != "" ) gen `rsort' = runiform()
 20.     if ( "`shuffle'" != "" ) sort `rsort'
 21.     if ( ("`sort'" != "") & ("`anything'" != "") ) qui hashsort `anything'
 22. 
.     local N = trim("`: di %15.0gc _N'")
 23.     local hlen = 45 + length("`anything'") + length("`N'")
 24.     di _n(2) "Checking gegen vs gcollapse. N = `N'; varlist = `anything'" _n(1) "{hline `hlen'}"
 25. 
.     preserve
 26.         if ( `"`wfoo'"' == "mix" ) {
 27.             `wgen_a'
 28.             local wgt wgt(both `wcall_a')
 29.         }
 30.         _compare_inner_gcollapse_gegen `anything', `options' tol(`tol') `wgt'
 31.     restore, preserve
 32.         if ( `"`wfoo'"' == "mix" ) {
 33.             `wgen_f'
 34.             local wgt wgt(both `wcall_f')
 35.         }
 36.         if ( "`shuffle'" != "" ) sort `rsort'
 37.         local in1 = ceil((0.00 + 0.25 * runiform()) * `=_N')
 38.         local in2 = ceil((0.75 + 0.25 * runiform()) * `=_N')
 39.         local from = cond(`in1' < `in2', `in1', `in2')
 40.         local to   = cond(`in1' > `in2', `in1', `in2')
 41.         _compare_inner_gcollapse_gegen  `anything' in `from' / `to', `options' `wgt' tol(`tol')
 42.     restore, preserve
 43.         if ( `"`wfoo'"' == "mix" ) {
 44.             `wgen_i'
 45.             local wgt wgt(both `wcall_i')
 46.         }
 47.         _compare_inner_gcollapse_gegen `anything' if random2 > 0, `options' `wgt' tol(`tol')
 48.     restore, preserve
 49.         if ( `"`wfoo'"' == "mix" ) {
 50.             `wgen_p'
 51.             local wgt wgt(both `wcall_p')
 52.         }
 53.         local in1 = ceil((0.00 + 0.25 * runiform()) * `=_N')
 54.         local in2 = ceil((0.75 + 0.25 * runiform()) * `=_N')
 55.         local from = cond(`in1' < `in2', `in1', `in2')
 56.         local to   = cond(`in1' > `in2', `in1', `in2')
 57.         _compare_inner_gcollapse_gegen `anything' if random2 < 0 in `from' / `to', `options' `wgt' tol(`tol')
 58.     restore
 59. end

. 
. capture program drop _compare_inner_gcollapse_gegen

. program _compare_inner_gcollapse_gegen
  1.     syntax [anything] [if] [in], [tol(real 1e-6) wgt(str) *]
  2. 
.     gettoken wfun wgt: wgt
  3.     local wgt `wgt'
  4. 
.     if ( "`wgt'" != "" ) {
  5.         if inlist("`wfun'", "both", "g") {
  6.             local wgt_gc `wgt'
  7.         }
  8.         if inlist("`wfun'", "both", "c") {
  9.             local wgt_ge `wgt'
 10.         }
 11.         if ( "`wfun'" == "both" ) {
 12.             local wtxt " `wgt'"
 13.         }
 14.         else if ( "`wfun'" == "g" ) {
 15.             local wtxt " `wgt' (gcollapse only)"
 16.         }
 17.         else if ( "`wfun'" == "c" ) {
 18.             local wtxt " `wgt' (gegen only)"
 19.         }
 20.     }
 21. 
.     local ifin `if' `in'
 22.     local anything_ `anything'
 23.     local options_  `options'
 24.     local 0 `wgt'
 25.     syntax [aw fw iw pw]
 26.     local anything `anything_'
 27.     local options  `options_'
 28. 
.     local sestats
 29.     local stats nunique nmissing sum mean geomean max min range percent first last firstnm lastnm median iqr skew kurt gini gini|dropneg gini|keepneg
 30.     if ( !inlist("`weight'", "pweight") ) {
 31.         local stats   `stats'   sd variance cv
 32.         local sestats `sestats' sd variance cv
 33.     }
 34.     if ( !inlist("`weight'", "pweight", "iweight") ) {
 35.         local stats   `stats'   semean
 36.         local sestats `sestats' semean
 37.     }
 38.     if (  inlist("`weight'", "fweight", "") ) {
 39.         local stats   `stats'   sebinomial sepoisson
 40.         local sestats `sestats' sebinomial sepoisson
 41.     }
 42. 
.     if ( `"`anything'"' == "" ) {
 43.         gen id = 1
 44.     }
 45.     else {
 46.         gegen id = group(`anything'), missing nods
 47.     }
 48. 
.     gegen double nmissing     = nmissing    (random1) `ifin' `wgt_ge',  by(`anything') nods
 49.     gegen double nunique      = nunique     (random1) `ifin' `wgt_ge',  by(`anything') nods
 50.     gegen double percent      = percent     (random1) `ifin' `wgt_ge',  by(`anything') nods
 51.     gegen double mean         = mean        (random1) `ifin' `wgt_ge',  by(`anything') nods
 52.     gegen double sum          = sum         (random1) `ifin' `wgt_ge',  by(`anything') nods
 53.     gegen double median       = median      (random1) `ifin' `wgt_ge',  by(`anything') nods
 54.     gegen double min          = min         (random1) `ifin' `wgt_ge',  by(`anything') nods
 55.     gegen double max          = max         (random1) `ifin' `wgt_ge',  by(`anything') nods
 56.     gegen double range        = range       (random1) `ifin' `wgt_ge',  by(`anything') nods
 57.     gegen double iqr          = iqr         (random1) `ifin' `wgt_ge',  by(`anything') nods
 58.     gegen double first        = first       (random1) `ifin' `wgt_ge',  by(`anything') nods
 59.     gegen double last         = last        (random1) `ifin' `wgt_ge',  by(`anything') nods
 60.     gegen double firstnm      = firstnm     (random1) `ifin' `wgt_ge',  by(`anything') nods
 61.     gegen double lastnm       = lastnm      (random1) `ifin' `wgt_ge',  by(`anything') nods
 62.     gegen double skew         = skew        (random1) `ifin' `wgt_ge',  by(`anything') nods
 63.     gegen double kurt         = kurt        (random1) `ifin' `wgt_ge',  by(`anything') nods
 64.     gegen double geomean      = geomean     (random1) `ifin' `wgt_ge',  by(`anything') nods
 65.     gegen double gini         = gini        (random1) `ifin' `wgt_ge',  by(`anything') nods
 66.     gegen double gini_keepneg = gini|keepneg(random1) `ifin' `wgt_ge',  by(`anything') nods
 67.     gegen double gini_dropneg = gini|dropneg(random1) `ifin' `wgt_ge',  by(`anything') nods
 68.     gegen double q10          = pctile      (random1) `ifin' `wgt_ge',  by(`anything') nods p(10.5)
 69.     gegen double q30          = pctile      (random1) `ifin' `wgt_ge',  by(`anything') nods p(30)
 70.     gegen double q70          = pctile      (random1) `ifin' `wgt_ge',  by(`anything') nods p(70)
 71.     gegen double q90          = pctile      (random1) `ifin' `wgt_ge',  by(`anything') nods p(90.5)
 72.     if ( !inlist("`weight'", "iweight") ) {
 73.     gegen double s1           = select      (random1) `ifin' `wgt_ge',  by(`anything') nods n(1)
 74.     gegen double s3           = select      (random1) `ifin' `wgt_ge',  by(`anything') nods n(3)
 75.     gegen double s999999      = select      (random1) `ifin' `wgt_ge',  by(`anything') nods n(999999)
 76.     gegen double s_999999     = select      (random1) `ifin' `wgt_ge',  by(`anything') nods n(-999999)
 77.     gegen double s_3          = select      (random1) `ifin' `wgt_ge',  by(`anything') nods n(-3)
 78.     gegen double s_1          = select      (random1) `ifin' `wgt_ge',  by(`anything') nods n(-1)
 79.     }
 80. 
.     local gextra
 81.     foreach extra of local sestats {
 82.         gegen double `extra' = `extra'(random1) `ifin' `wgt_ge',  by(`anything') nods
 83.         local gextra `gextra' (`extra') g_`extra' = random1
 84.     }
 85. 
.     if ( inlist("`weight'", "iweight") ) {
 86.         qui `noisily' {
 87.             gcollapse (nmissing)      g_nmissing     = random1 ///
>                       (nunique)       g_nunique      = random1 ///
>                       (percent)       g_percent      = random1 ///
>                       (mean)          g_mean         = random1 ///
>                       (sum)           g_sum          = random1 ///
>                       (median)        g_median       = random1 ///
>                       (min)           g_min          = random1 ///
>                       (max)           g_max          = random1 ///
>                       (range)         g_range        = random1 ///
>                       (iqr)           g_iqr          = random1 ///
>                       (first)         g_first        = random1 ///
>                       (last)          g_last         = random1 ///
>                       (firstnm)       g_firstnm      = random1 ///
>                       (lastnm)        g_lastnm       = random1 ///
>                       (skew)          g_skew         = random1 ///
>                       (kurt)          g_kurt         = random1 ///
>                       (geomean)       g_geomean      = random1 ///
>                       (gini)          g_gini         = random1 ///
>                       (gini|dropneg)  g_gini_dropneg = random1 ///
>                       (gini|keepneg)  g_gini_keepneg = random1 ///
>                       (p10.5)         g_q10          = random1 ///
>                       (p30)           g_q30          = random1 ///
>                       (p70)           g_q70          = random1 ///
>                       (p90.5)         g_q90          = random1 ///
>                       `gextra'                               ///
>                   `ifin' `wgt_gc', by(id) benchmark verbose `options' merge double
 88.          }
 89.     else {
 90.         qui `noisily' {
 91.             gcollapse (nmissing)      g_nmissing     = random1 ///
>                       (nunique)       g_nunique      = random1 ///
>                       (percent)       g_percent      = random1 ///
>                       (mean)          g_mean         = random1 ///
>                       (sum)           g_sum          = random1 ///
>                       (median)        g_median       = random1 ///
>                       (min)           g_min          = random1 ///
>                       (max)           g_max          = random1 ///
>                       (range)         g_range        = random1 ///
>                       (iqr)           g_iqr          = random1 ///
>                       (first)         g_first        = random1 ///
>                       (last)          g_last         = random1 ///
>                       (firstnm)       g_firstnm      = random1 ///
>                       (lastnm)        g_lastnm       = random1 ///
>                       (skew)          g_skew         = random1 ///
>                       (kurt)          g_kurt         = random1 ///
>                       (geomean)       g_geomean      = random1 ///
>                       (gini)          g_gini         = random1 ///
>                       (gini|dropneg)  g_gini_dropneg = random1 ///
>                       (gini|keepneg)  g_gini_keepneg = random1 ///
>                       (p10.5)         g_q10          = random1 ///
>                       (p30)           g_q30          = random1 ///
>                       (p70)           g_q70          = random1 ///
>                       (p90.5)         g_q90          = random1 ///
>                       (select1)       g_s1           = random1 ///
>                       (select3)       g_s3           = random1 ///
>                       (select999999)  g_s999999      = random1 ///
>                       (select-999999) g_s_999999     = random1 ///
>                       (select-3)      g_s_3          = random1 ///
>                       (select-1)      g_s_1          = random1 ///
>                       `gextra'                               ///
>                   `ifin' `wgt_gc', by(id) benchmark verbose `options' merge double
 92.         }
 93.     }
 94. 
.     if ( "`ifin'" == "" ) {
 95.         di _n(1) "Checking full range`wtxt': `anything'"
 96.     }
 97.     else if ( "`ifin'" != "" ) {
 98.         di _n(1) "Checking [`ifin']`wtxt' range: `anything'"
 99.     }
100. 
.     foreach _fun in `stats' q10 q30 q70 q90 {
101.         local fun: subinstr local _fun "|" "_", all
102.         cap noi assert (g_`fun' == `fun') | ((abs(g_`fun' - `fun') / min(abs(g_`fun'), abs(`fun'))) < `tol')
103.         if ( _rc ) {
104.             if inlist("`fun'", "skew", "kurt") {
105.                 local a1 ((g_`fun' == `fun') | abs(g_`fun' - `fun') < `tol')
106.                 local a2 (inlist(g_`fun', 1, -1) & mi(`fun'))
107.                 local a3 (inlist(`fun', 1, -1)   & mi(g_`fun'))
108.                 local a4 (nunique == 1)
109.                 cap noi assert `a1' | ((`a2' | `a3') & `a4')
110.                 if ( _rc ) {
111.                     di as err "    compare_gegen_gcollapse (failed): `fun'`wtxt' yielded different results (tol = `tol')"
112.                     keep `ifin'
113.                     keep if !(`a1' | ((`a2' | `a3') & `a4'))
114.                     * save /tmp/xx, replace
.                     exit _rc
115.                 }
116.                 else di as txt "    compare_gegen_gcollapse (imprecision): `fun'`wtxt' yielded similar results (tol = `tol')"
117.             }
118.             else {
119.                 recast double g_`fun' `fun'
120.                 cap noi assert (g_`fun' == `fun') | ((abs(g_`fun' - `fun') / min(abs(g_`fun'), abs(`fun'))) < `tol')
121.                 if ( _rc ) {
122.                     di as err "    compare_gegen_gcollapse (failed): `fun'`wtxt' yielded different results (tol = `tol')"
123.                     * save /tmp/xx, replace
.                     exit _rc
124.                 }
125.                 else di as txt "    compare_gegen_gcollapse (passed): `fun'`wtxt' yielded same results (tol = `tol')"
126.             }
127.         }
128.         else di as txt "    compare_gegen_gcollapse (passed): `fun'`wtxt' yielded same results (tol = `tol')"
129.     }
130. end

. 
. ***********************************************************************
. *                          Compare collapse                           *
. ***********************************************************************
. 
. capture program drop compare_inner_collapse

. program compare_inner_collapse
  1.     syntax [anything], [tol(real 1e-6) sort shuffle wgt(str) *]
  2. 
.     gettoken wfun wfoo: wgt
  3.     local wfun `wfun'
  4.     local wfoo `wfoo'
  5.     if ( `"`wfoo'"' == "mix" ) {
  6.         local wgen_a  qui gen unif_0_100 = 100 * runiform() if mod(_n, 100)
  7.         local wcall_a "[aw = unif_0_100]"
  8.         local wgen_f  qui gen int_unif_0_100 = int(100 * runiform())
  9.         local wcall_f "[fw = int_unif_0_100]"
 10.         local wgen_i  qui gen rnormal_0_10 = 10 * rnormal()
 11.         local wcall_i "[iw = rnormal_0_10]"
 12.         local wgen_p  qui gen float_unif_0_1 = runiform()
 13.         local wcall_p "[pw = float_unif_0_1]"
 14.     }
 15.     else {
 16.         local wgt wgt(`wgt')
 17.     }
 18. 
.     tempvar rsort
 19.     if ( "`shuffle'" != "" ) gen `rsort' = runiform()
 20.     if ( "`shuffle'" != "" ) sort `rsort'
 21.     if ( ("`sort'" != "") & ("`anything'" != "") ) qui hashsort `anything'
 22. 
.     local N = trim("`: di %15.0gc _N'")
 23.     local hlen = 35 + length("`anything'") + length("`N'")
 24.     di _n(2) "Checking collapse. N = `N'; varlist = `anything'" _n(1) "{hline `hlen'}"
 25. 
.     preserve
 26.         if ( `"`wfoo'"' == "mix" ) {
 27.             `wgen_a'
 28.             local wgt wgt(both `wcall_a')
 29.         }
 30.         _compare_inner_collapse `anything', `options' `wgt' tol(`tol')
 31.     restore, preserve
 32.         if ( `"`wfoo'"' == "mix" ) {
 33.             `wgen_f'
 34.             local wgt wgt(both `wcall_f')
 35.         }
 36.         local in1 = ceil((0.00 + 0.25 * runiform()) * `=_N')
 37.         local in2 = ceil((0.75 + 0.25 * runiform()) * `=_N')
 38.         local from = cond(`in1' < `in2', `in1', `in2')
 39.         local to   = cond(`in1' > `in2', `in1', `in2')
 40.         _compare_inner_collapse  `anything' in `from' / `to', `options' `wgt' tol(`tol')
 41.     restore, preserve
 42.         if ( `"`wfoo'"' == "mix" ) {
 43.             `wgen_i'
 44.             local wgt wgt(both `wcall_i')
 45.         }
 46.         _compare_inner_collapse `anything' if random2 > 0, `options' `wgt' tol(`tol')
 47.     restore, preserve
 48.         if ( `"`wfoo'"' == "mix" ) {
 49.             `wgen_p'
 50.             local wgt wgt(both `wcall_p')
 51.         }
 52.         local in1 = ceil((0.00 + 0.25 * runiform()) * `=_N')
 53.         local in2 = ceil((0.75 + 0.25 * runiform()) * `=_N')
 54.         local from = cond(`in1' < `in2', `in1', `in2')
 55.         local to   = cond(`in1' > `in2', `in1', `in2')
 56.         _compare_inner_collapse `anything' if random2 < 0 in `from' / `to', `options' `wgt' tol(`tol')
 57.     restore
 58. end

. 
. capture program drop _compare_inner_collapse

. program _compare_inner_collapse
  1.     syntax [anything] [if] [in], [tol(real 1e-6) wgt(str) *]
  2. 
.     gettoken wfun wgt: wgt
  3.     local wgt `wgt'
  4. 
.     if ( "`wgt'" != "" ) {
  5.         if inlist("`wfun'", "both", "g") {
  6.             local wgt_gc `wgt'
  7.         }
  8.         if inlist("`wfun'", "both", "c") {
  9.             local wgt_ge `wgt'
 10.         }
 11.         if ( "`wfun'" == "both" ) {
 12.             local wtxt " `wgt'"
 13.         }
 14.         else if ( "`wfun'" == "g" ) {
 15.             local wtxt " `wgt' (gcollapse only)"
 16.         }
 17.         else if ( "`wfun'" == "c" ) {
 18.             local wtxt " `wgt' (collapse only)"
 19.         }
 20.     }
 21. 
.     local ifin `if' `in'
 22.     local anything_ `anything'
 23.     local options_  `options'
 24.     local 0 `wgt'
 25.     syntax [aw fw iw pw]
 26.     local anything `anything_'
 27.     local options  `options_'
 28. 
.     local stats sum mean max min count first last firstnm lastnm median iqr
 29.     if ( !inlist("`weight'", "pweight") )            local stats `stats' sd
 30.     if ( !inlist("`weight'", "pweight", "iweight") ) local stats `stats' semean
 31.     if (  inlist("`weight'", "fweight", "") )        local stats `stats' sebinomial sepoisson
 32. 
.     local percentiles p1 p13 p30 p50 p70 p87 p99
 33.     local collapse_str ""
 34.     local k1 ""
 35.     local k2 ""
 36.     local k3 ""
 37. 
.     foreach pct of local percentiles {
 38.         local k1 `k1' r1_`pct'
 39.         local collapse_str `collapse_str' (`pct') r1_`pct' = random1
 40.     }
 41.     foreach stat of local stats {
 42.         local k1 `k1' r1_`stat'
 43.         local collapse_str `collapse_str' (`stat') r1_`stat' = random1
 44.     }
 45.     foreach pct of local percentiles {
 46.         local k2 `k2' r2_`pct'
 47.         local collapse_str `collapse_str' (`pct') r2_`pct' = random2
 48.     }
 49.     foreach stat of local stats {
 50.         local k2 `k2' r2_`stat'
 51.         local collapse_str `collapse_str' (`stat') r2_`stat' = random2
 52.     }
 53.     local k3 r1_percent r2_percent
 54.     local collapse_str `collapse_str' (percent) r1_percent = random1 r2_percent = random2
 55. 
.     if ( "`wgt'" == "" ) {
 56.         local freq freq(freq)
 57.         local wgt_gc [fw = 42]
 58.     }
 59. 
.     local sopts by(`anything') verbose benchmark `options' `freq'
 60.     preserve
 61.         qui `noisily' gcollapse `collapse_str' `ifin' `wgt_gc', `sopts' rawstat(`k1')
 62.         if ( "`wgt'" == "" ) {
 63.             drop `k2'
 64.         }
 65.         else {
 66.             drop `k1'
 67.         }
 68.         tempfile fg1
 69.         qui save `fg1'
 70.     restore, preserve
 71.         qui `noisily' gcollapse `collapse_str' `ifin' `wgt_gc', `sopts' rawstat(`k2')
 72.         if ( "`wgt'" == "" ) {
 73.             drop `k1'
 74.         }
 75.         else {
 76.             drop `k2'
 77.         }
 78.         tempfile fg2
 79.         qui save `fg2'
 80.     restore, preserve
 81.         use `fg1', clear
 82.             qui ds *
 83.             local mergevars `r(varlist)'
 84.             local mergevars: list mergevars - k1
 85.             local mergevars: list mergevars - k2
 86.             local mergevars: list mergevars - k3
 87.             if ( "`mergevars'" == "" ) {
 88.                 local mergevars _n
 89.             }
 90.             qui merge 1:1 `mergevars' using `fg2', assert(3) nogen
 91.         tempfile fg
 92.         qui save `fg'
 93.     restore
 94. 
.     preserve
 95.         if ( "`wgt'" == "" ) {
 96.             qui gen long freq = 1
 97.             qui `noisily' collapse `collapse_str' (sum) freq `ifin' `wgt_ge', by(`anything')
 98.         }
 99.         else {
100.             qui `noisily' collapse `collapse_str' `ifin' `wgt_ge', by(`anything')
101.         }
102.         tempfile fc
103.         qui save `fc'
104.     restore
105. 
.     preserve
106.     use `fc', clear
107.         local bad_any = 0
108.         local bad `anything'
109.         local by  `anything'
110.         foreach var in `stats' `percentiles' {
111.             rename r1_`var' c_r1_`var'
112.             rename r2_`var' c_r2_`var'
113.         }
114.         cap rename freq c_freq
115.         if ( "`by'" == "" ) {
116.             qui merge 1:1 _n using `fg', assert(3)
117.         }
118.         else {
119.             qui merge 1:1 `by' using `fg', assert(3)
120.         }
121.         foreach var in `stats' `percentiles' {
122. 
.             * I am not entirely sure why this check is here. I figured
.             * it had to be a corner case where I might return . and
.             * stata 0 or the converse... Not 100% why that changes if
.             * there is a weight, where it failed.
. 
.             if inlist("`var'", "sd", "semean") {
123.                 local nonz1 & (r1_`var' != 0 & c_r1_`var' != .) & (r1_`var' != . & c_r1_`var' != 0)
124.                 local nonz2 & (r2_`var' != 0 & c_r2_`var' != .) & (r2_`var' != . & c_r2_`var' != 0)
125.             }
126.             else {
127.                 local nonz1
128.                 local nonz2
129.             }
130. 
.             qui count if ( (abs(r1_`var' - c_r1_`var') > `tol') & (r1_`var' != c_r1_`var')) `nonz1'
131.             if ( `r(N)' > 0 ) {
132.                 gen bad_r1_`var' = abs(r1_`var' - c_r1_`var') * (r1_`var' != c_r1_`var')
133.                 local bad `bad' *r1_`var'
134.                 di "    r1_`var' has `:di r(N)' mismatches".
135.                 local bad_any = 1
136.                 order *r1_`var'
137.             }
138. 
.             qui count if ( (abs(r2_`var' - c_r2_`var') > `tol') & (r2_`var' != c_r2_`var')) `nonz2'
139.             if ( `r(N)' > 0 ) {
140.                 gen bad_r2_`var' = abs(r2_`var' - c_r2_`var') * (r2_`var' != c_r2_`var')
141.                 local bad `bad' *r2_`var'
142.                 di "    r2_`var' has `:di r(N)' mismatches".
143.                 local bad_any = 1
144.                 order *r2_`var'
145.             }
146.         }
147.         if ( "`wgt'" == "" ) {
148.             qui count if ( (abs(freq - c_freq) > `tol') & (freq != c_freq))
149.             if ( `r(N)' > 0 ) {
150.                 gen bad_freq = abs(freq - c_freq) * (freq != c_freq)
151.                 local bad `bad' *freq
152.                 di "    freq has `:di r(n)' mismatches".
153.                 local bad_any = 1
154.                 order *freq
155.             }
156.         }
157.         if ( `bad_any' ) {
158.             if ( "`ifin'" == "" ) {
159.                 di "    compare_collapse (failed): full range`wtxt', `anything'"
160.             }
161.             else if ( "`ifin'" != "" ) {
162.                 di "    compare_collapse (failed): [`ifin']`wtxt', `anything'"
163.             }
164.             order `bad'
165.             egen bad_any = rowmax(bad_*)
166.             * l *count* *mean* `bad' if bad_any
.             sum bad_*
167.             desc
168.             exit 9
169.         }
170.         else {
171.             if ( "`ifin'" == "" ) {
172.                 di "    compare_collapse (passed): full range`wtxt', gcollapse results equal to collapse (tol = `tol')"
173.             }
174.             else if ( "`ifin'" != "" ) {
175.                 di "    compare_collapse (passed): [`ifin']`wtxt', gcollapse results equal to collapse (tol = `tol')"
176.             }
177.         }
178.     restore
179. end

. 
. ***********************************************************************
. *                           Check skewness                            *
. ***********************************************************************
. 
. capture program drop compare_inner_gcollapse_skew

. program compare_inner_gcollapse_skew
  1.     syntax [anything], [tol(real 1e-6) sort shuffle wgt(str) *]
  2. 
.     * iw and pw not allowed in -sum, detail-
. 
.     gettoken wfun wfoo: wgt
  3.     local wfun `wfun'
  4.     local wfoo `wfoo'
  5.     if ( `"`wfoo'"' == "mix" ) {
  6.         local wgen_a  qui gen unif_0_100 = 100 * runiform() if mod(_n, 100)
  7.         local wcall_a "[aw = unif_0_100]"
  8.         local wgen_f  qui gen int_unif_0_100 = int(100 * runiform()) if mod(_n, 100)
  9.         local wcall_f "[fw = int_unif_0_100]"
 10.         local wgen_p  `wgen_a'
 11.         local wcall_p `wcall_a'
 12.         local wgen_i  `wgen_f'
 13.         local wcall_i `wcall_f'
 14.     }
 15.     else {
 16.         local wgt wgt(`wgt')
 17.     }
 18. 
.     tempvar rsort
 19.     if ( "`shuffle'" != "" ) gen `rsort' = runiform()
 20.     if ( "`shuffle'" != "" ) sort `rsort'
 21.     if ( ("`sort'" != "") & ("`anything'" != "") ) qui hashsort `anything'
 22. 
.     local N = trim("`: di %15.0gc _N'")
 23.     local hlen = 45 + length("`anything'") + length("`N'")
 24.     di _n(2) "Checking skewness and kurtosis. N = `N'; varlist = `anything'" _n(1) "{hline `hlen'}"
 25. 
.     preserve
 26.         if ( `"`wfoo'"' == "mix" ) {
 27.             `wgen_a'
 28.             local wgt wgt(both `wcall_a')
 29.         }
 30.         _compare_inner_gcollapse_skew `anything', `options' tol(`tol') `wgt'
 31.     restore, preserve
 32.         if ( `"`wfoo'"' == "mix" ) {
 33.             `wgen_f'
 34.             local wgt wgt(both `wcall_f')
 35.         }
 36.         if ( "`shuffle'" != "" ) sort `rsort'
 37.         local in1 = ceil((0.00 + 0.25 * runiform()) * `=_N')
 38.         local in2 = ceil((0.75 + 0.25 * runiform()) * `=_N')
 39.         local from = cond(`in1' < `in2', `in1', `in2')
 40.         local to   = cond(`in1' > `in2', `in1', `in2')
 41.         _compare_inner_gcollapse_skew  `anything' in `from' / `to', `options' `wgt' tol(`tol')
 42.     restore, preserve
 43.         if ( `"`wfoo'"' == "mix" ) {
 44.             `wgen_i'
 45.             local wgt wgt(both `wcall_i')
 46.         }
 47.         _compare_inner_gcollapse_skew `anything' if random2 > 0, `options' `wgt' tol(`tol')
 48.     restore, preserve
 49.         if ( `"`wfoo'"' == "mix" ) {
 50.             `wgen_p'
 51.             local wgt wgt(both `wcall_p')
 52.         }
 53.         local in1 = ceil((0.00 + 0.25 * runiform()) * `=_N')
 54.         local in2 = ceil((0.75 + 0.25 * runiform()) * `=_N')
 55.         local from = cond(`in1' < `in2', `in1', `in2')
 56.         local to   = cond(`in1' > `in2', `in1', `in2')
 57.         _compare_inner_gcollapse_skew `anything' if random2 < 0 in `from' / `to', `options' `wgt' tol(`tol')
 58.     restore
 59. end

. 
. capture program drop _compare_inner_gcollapse_skew

. program _compare_inner_gcollapse_skew
  1.     syntax [anything] [if] [in], [tol(real 1e-6) wgt(str) *]
  2. 
.     gettoken wfun wgt: wgt
  3.     local wgt `wgt'
  4. 
.     if ( "`wgt'" != "" ) {
  5.         if inlist("`wfun'", "both", "g") {
  6.             local wgt_gc `wgt'
  7.         }
  8.         if inlist("`wfun'", "both", "c") {
  9.             local wgt_ge `wgt'
 10.         }
 11.         if ( "`wfun'" == "both" ) {
 12.             local wtxt " `wgt'"
 13.         }
 14.         else if ( "`wfun'" == "g" ) {
 15.             local wtxt " `wgt' (gcollapse only)"
 16.         }
 17.         else if ( "`wfun'" == "c" ) {
 18.             local wtxt " `wgt' (gegen only)"
 19.         }
 20.     }
 21. 
.     local ifin `in' `if'
 22.     if ( `"`if'"' == "" ) {
 23.         local sifin `in' if id ==
 24.     }
 25.     else {
 26.         local sifin `in' `if' & id ==
 27.     }
 28. 
.     local anything_ `anything'
 29.     local options_   `options'
 30.     local 0 `wgt'
 31.     syntax [aw fw iw pw]
 32.     local anything `anything_'
 33.     local options  `options_'
 34. 
.     if ( `"`anything'"' == "" ) {
 35.         qui gen id = 1 `ifin'
 36.     }
 37.     else {
 38.         qui gegen id = group(`anything') `ifin', missing nods
 39.     }
 40. 
.     qui gunique id `ifin', missing
 41.     local J = `r(J)'
 42.     qui sum id
 43.     local maxid = `r(max)'
 44.     * gquantiles id, pctile(idlevel) cutpoints(id) dedup
. 
.     local checks
 45.     forvalues i = 1 / 10 {
 46.         local j = ceil(runiform() * `J')
 47.         qui sum random1 `sifin' `j' `wgt_gc', d
 48.         local sd_`j'   = r(sd)
 49.         local skew_`j' = r(skewness)
 50.         local kurt_`j' = r(kurtosis)
 51.         local checks `checks' `j'
 52.     }
 53. 
.     qui sum random1 `sifin' `maxid' `wgt_gc', d
 54.     local sd_`maxid'   = r(sd)
 55.     local skew_`maxid' = r(skewness)
 56.     local kurt_`maxid' = r(kurtosis)
 57.     local checks `checks' `maxid'
 58. 
.     qui gcollapse (skew) skew  = random1 ///
>                   (kurt) kurt  = random1 ///
>                   (nunique) nq = random1 ///
>         `ifin' `wgt_gc', by(id) benchmark verbose `options' double freq(f)
 59. 
.     if ( "`ifin'" == "" ) {
 60.         di _n(1) "Checking full range`wtxt': `anything'"
 61.     }
 62.     else if ( "`ifin'" != "" ) {
 63.         di _n(1) "Checking [`ifin']`wtxt' range: `anything'"
 64.     }
 65. 
.     * For skewness and kurtosis, numerical imprecision can cause the
.     * result to be -1 or 1 when it should really be missing. Internally
.     * 0 / 0 is computed as ε / ε for some ε small.
. 
.     tempvar ix
 66.     gen `ix' = _n
 67.     foreach fun in kurt skew {
 68.         local imprecise 0
 69.         foreach j in `checks' {
 70.             local ok 1
 71.             if ( `j' != `=id[`j']' ) {
 72.                 qui sum `ix' if id == `j'
 73.                 if ( `r(N)' == 0 ) {
 74.                     cap assert ``fun'_`j'' == . | "``fun'_`j''" == ""
 75.                     if ( _rc ) {
 76.                         di as txt "    compare_`fun'_gcollapse (failed): sum`wtxt' yielded a result and gcollapse did not"
 77.                         exit _rc
 78.                     }
 79.                     local ok 0
 80.                 }
 81.                 local jj = `ix'[r(min)]
 82.             }
 83.             else local jj `j'
 84. 
.             if ( `ok' ) {
 85.                 cap assert ``fun'_`j'' == `fun'[`jj'] | abs(``fun'_`j'' - `fun'[`jj']) < `tol'
 86.                 if ( _rc & (nq[`j'] > 1) ) {
 87.                     cap noi assert 0
 88.                     di as err "    compare_`fun'_gcollapse (failed): sum`wtxt' yielded different results (tol = `tol')"
 89.                     disp "``fun'_`j'' vs `=`fun'[`j']'; diff `=abs(``fun'_`j'' - `fun'[`j'])', N = `=f[`j']'"
 90.                     exit _rc
 91.                 }
 92.                 else if ( _rc & (nq[`j'] == 1) ) {
 93.                     local ++imprecise
 94.                 }
 95.             }
 96.         }
 97. 
.         if ( `imprecise' ) {
 98.             di as txt "    compare_`fun'_gcollapse (imprecision): sum`wtxt' yielded similar results (tol = `tol'; `imprecise' imprecisions)"
 99.         }
100.         else {
101.             di as txt "    compare_`fun'_gcollapse (passed): sum`wtxt' yielded same results (tol = `tol')"
102.         }
103.     }
104. end

. 
. ***********************************************************************
. *                      Check new stats from 1.4                       *
. ***********************************************************************
. 
. capture program drop compare_inner_gcollapse_select

. program compare_inner_gcollapse_select
  1.     syntax [anything], [tol(real 1e-6) sort shuffle wgt(str) *]
  2. 
.     gettoken wfun wfoo: wgt
  3.     local wfun `wfun'
  4.     local wfoo `wfoo'
  5.     if ( `"`wfoo'"' == "mix" ) {
  6.         local wgen_a  qui gen unif_0_100 = 100 * runiform() if mod(_n, 100)
  7.         local wcall_a "[aw = unif_0_100]"
  8.         local wgen_f  qui gen int_unif_0_100 = int(100 * runiform()) if mod(_n, 100)
  9.         local wcall_f "[fw = int_unif_0_100]"
 10.         local wgen_p  qui gen float_unif_0_1 = runiform() if mod(_n, 100)
 11.         local wcall_p "[pw = float_unif_0_1]"
 12.         local wgen_i  `wgen_f'
 13.         local wcall_i `wcall_f'
 14.     }
 15.     else {
 16.         local wgt wgt(`wgt')
 17.     }
 18. 
.     tempvar rsort
 19.     if ( "`shuffle'" != "" ) gen `rsort' = runiform()
 20.     if ( "`shuffle'" != "" ) sort `rsort'
 21.     if ( ("`sort'"   != "") & ("`anything'" != "") ) qui hashsort `anything'
 22. 
.     local N = trim("`: di %15.0gc _N'")
 23.     local hlen = 47 + length("`anything'") + length("`N'")
 24.     di _n(2) "Checking select and 1.4+ funcs. N = `N'; varlist = `anything'" _n(1) "{hline `hlen'}"
 25. 
.     preserve
 26.         if ( `"`wfoo'"' == "mix" ) {
 27.             `wgen_a'
 28.             local wgt wgt(both `wcall_a')
 29.         }
 30.         _compare_inner_gcollapse_select `anything', `options' tol(`tol') `wgt'
 31.     restore, preserve
 32.         if ( `"`wfoo'"' == "mix" ) {
 33.             `wgen_f'
 34.             local wgt wgt(both `wcall_f')
 35.         }
 36.         if ( "`shuffle'" != "" ) sort `rsort'
 37.         local in1 = ceil((0.00 + 0.25 * runiform()) * `=_N')
 38.         local in2 = ceil((0.75 + 0.25 * runiform()) * `=_N')
 39.         local from = cond(`in1' < `in2', `in1', `in2')
 40.         local to   = cond(`in1' > `in2', `in1', `in2')
 41.         _compare_inner_gcollapse_select  `anything' in `from' / `to', `options' `wgt' tol(`tol')
 42.     restore, preserve
 43.         if ( `"`wfoo'"' == "mix" ) {
 44.             `wgen_i'
 45.             local wgt wgt(both `wcall_i')
 46.         }
 47.         _compare_inner_gcollapse_select `anything' if random2 > 0, `options' `wgt' tol(`tol')
 48.     restore, preserve
 49.         if ( `"`wfoo'"' == "mix" ) {
 50.             `wgen_p'
 51.             local wgt wgt(both `wcall_p')
 52.         }
 53.         local in1 = ceil((0.00 + 0.25 * runiform()) * `=_N')
 54.         local in2 = ceil((0.75 + 0.25 * runiform()) * `=_N')
 55.         local from = cond(`in1' < `in2', `in1', `in2')
 56.         local to   = cond(`in1' > `in2', `in1', `in2')
 57.         _compare_inner_gcollapse_select `anything' if random2 < 0 in `from' / `to', `options' `wgt' tol(`tol')
 58.     restore
 59. end

. 
. capture program drop _compare_inner_gcollapse_select

. program _compare_inner_gcollapse_select
  1.     syntax [anything] [if] [in], [tol(real 1e-6) wgt(str) *]
  2. 
.     gettoken wfun wgt: wgt
  3.     local wgt `wgt'
  4. 
.     if ( "`wgt'" != "" ) {
  5.         if inlist("`wfun'", "both", "g") {
  6.             local wgt_gc `wgt'
  7.         }
  8.         if inlist("`wfun'", "both", "c") {
  9.             local wgt_ge `wgt'
 10.         }
 11.         if ( "`wfun'" == "both" ) {
 12.             local wtxt " `wgt'"
 13.         }
 14.         else if ( "`wfun'" == "g" ) {
 15.             local wtxt " `wgt' (gcollapse only)"
 16.         }
 17.         else if ( "`wfun'" == "c" ) {
 18.             local wtxt " `wgt' (gegen only)"
 19.         }
 20.     }
 21. 
.     local ifin `in' `if'
 22. 
.     local gcall
 23.     local gcall `gcall' (count)        nj           = random1
 24.     local gcall `gcall' (mean)         mean         = random1
 25.     local gcall `gcall' (geomean)      geomean      = random1
 26.     local gcall `gcall' (gini)         gini         = random1
 27.     local gcall `gcall' (gini|dropneg) gini_dropneg = random1
 28.     local gcall `gcall' (gini|keepneg) gini_keepneg = random1
 29.     if !regexm("pw", `"`wgt'"') {
 30.     local gcall `gcall' (sd)           sd           = random1
 31.     local gcall `gcall' (variance)     variance     = random1
 32.     local gcall `gcall' (cv)           cv           = random1
 33.     }
 34.     local gcall `gcall' (min)          min          = random1
 35.     local gcall `gcall' (max)          max          = random1
 36.     local gcall `gcall' (range)        range        = random1
 37.     local gcall `gcall' (select1)      select1      = random1
 38.     local gcall `gcall' (select2)      select2      = random1
 39.     local gcall `gcall' (select3)      select3      = random1
 40.     local gcall `gcall' (select9999)   select9999   = random1
 41.     local gcall `gcall' (select-9999)  select_9999  = random1
 42.     local gcall `gcall' (select-3)     select_3     = random1
 43.     local gcall `gcall' (select-2)     select_2     = random1
 44.     local gcall `gcall' (select-1)     select_1     = random1
 45. 
.     qui gcollapse `gcall' `ifin' `wgt_gc', by(`anything') `options' double merge replace
 46.     if ( `"`anything'"' == "" ) {
 47.         qui gen id = 1 `ifin'
 48.     }
 49.     else {
 50.         qui gegen id = group(`anything') `ifin', missing nods
 51.     }
 52.     * save /tmp/aa, replace
. 
.     qui quickGini random1 `ifin' `wgt_gc', by(id) gen(_gini)
 53.     qui quickGini random1 `ifin' `wgt_gc', by(id) gen(_gini_dropneg) dropneg
 54.     qui quickGini random1 `ifin' `wgt_gc', by(id) gen(_gini_keepneg) keepneg
 55.     foreach gini in " " _keepneg _dropneg {
 56.         local gini `gini'
 57.         cap assert reldif(_gini`gini', gini`gini') < `tol'
 58.         local rc = _rc
 59.         local gini: subinstr local gini "_" "|", all
 60.         if ( `rc' ) {
 61.             di as txt "    compare_gini`gini'_gcollapse (fail): gini`gini' yielded different results (tol = `tol')"
 62.             exit 198
 63.         }
 64.         else {
 65.             di as txt "    compare_gini`gini'_gcollapse (passed): gini`gini' yielded consistent results (tol = `tol')"
 66.         }
 67.     }
 68. 
.     if ( "`ifin'" == "" ) {
 69.         di _n(1) "Checking full range`wtxt': `anything'"
 70.     }
 71.     else if ( "`ifin'" != "" ) {
 72.         di _n(1) "Checking [`ifin']`wtxt' range: `anything'"
 73.     }
 74. 
.     if !regexm("pw", `"`wgt'"') {
 75.     cap assert (mi(cv) & (mi(sd) | (mean == 0))) | (abs((sd / mean) - cv) < `tol') `ifin'
 76.         if ( _rc ) {
 77.             di as txt "    compare_cv_gcollapse (fail): cv`wtxt' yielded different results (tol = `tol')"
 78.             exit 198
 79.         }
 80.         else {
 81.             di as txt "    compare_cv_gcollapse (passed): cv`wtxt' yielded consistent results (tol = `tol')"
 82.         }
 83.     }
 84.     else {
 85.             di as txt "    compare_cv_gcollapse (skip): cv`wtxt' skipped (not allowed with pweights)"
 86.     }
 87.     if !regexm("pw", `"`wgt'"') {
 88.     cap assert (mi(variance) & mi(sd)) | (abs((sd^2 - variance) / min(sd^2, variance)) < `tol') `ifin'
 89.         if ( _rc ) {
 90.             di as txt "    compare_var_gcollapse (fail): var`wtxt' yielded different results (tol = `tol')"
 91.             exit 198
 92.         }
 93.         else {
 94.             di as txt "    compare_var_gcollapse (passed): var`wtxt' yielded consistent results (tol = `tol')"
 95.         }
 96.     }
 97.     else {
 98.             di as txt "    compare_var_gcollapse (skip): var`wtxt' skipped (not allowed with pweights)"
 99.     }
100.     cap assert (mi(range) & (mi(min) | mi(max))) | (abs((range) - (max - min)) < `tol') `ifin'
101.         if ( _rc ) {
102.             di as txt "    compare_range_gcollapse (fail): range`wtxt' yielded different results (tol = `tol')"
103.             exit 198
104.         }
105.         else {
106.             di as txt "    compare_range_gcollapse (passed): range`wtxt' yielded consistent results (tol = `tol')"
107.         }
108. 
.     if ( "`wgt'" != "" ) {
109.         qui {
110.             local 0 `wgt'
111.             syntax [aw fw iw pw]
112.             tempvar w wsum touse wsel
113.             mark `touse' `wgt' `ifin'
114.             markout `touse' random1
115.             keep if `touse'
116.             gen double `w' `exp'
117.             sort id random1 `w'
118.             by id (random1 `w'): gen double `wsum'  = sum(`w')
119.             gen long `wsel' = 0
120.         }
121.         foreach sel in 1 2 3 9999 {
122.             qui by id (random1 `w'): replace `wsel' = sum(`sel' > `wsum')
123.             cap by id (random1 `w'): assert (((abs(random1[`wsel'[_N] + 1] - select`sel') < `tol') | (mi(select`sel') & mi(random1[`wsel'[_N] + 1]))))
124.                 if ( _rc ) {
125.                     di as txt "    compare_select`sel'_gcollapse (fail): select`wtxt' yielded different results (tol = `tol')"
126.                     exit 198
127.                 }
128.                 else {
129.                     di as txt "    compare_select`sel'_gcollapse (passed): select`wtxt' yielded consistent results (tol = `tol')"
130.                 }
131.             qui by id (random1 `w'): replace `wsel' = cond(`wsum'[_N] - `sel' >= 0, sum((`wsum'[_N] - `sel') >= `wsum'), _N)
132.             cap by id (random1 `w'): assert (((abs(random1[`wsel'[_N] + 1] - select_`sel') < `tol') | (mi(select_`sel') & mi(random1[`wsel'[_N] + 1]))))
133.                 if ( _rc ) {
134.                     di as txt "    compare_select-`sel'_gcollapse (fail): select`wtxt' yielded different results (tol = `tol')"
135.                     exit 198
136.                 }
137.                 else {
138.                     di as txt "    compare_select-`sel'_gcollapse (passed): select`wtxt' yielded consistent results (tol = `tol')"
139.                 }
140.         }
141.     }
142.     else {
143.         if ( `"`ifin'"' != "" ) qui keep `ifin'
144.         sort id random1
145.         foreach sel in 1 2 3 9999 {
146.             cap by id (random1): assert (((abs(random1[`sel'] - select`sel') < `tol') | (mi(select`sel') & mi(random1[`sel']))))
147.                 if ( _rc ) {
148.                     di as txt "    compare_select`sel'_gcollapse (fail): select`wtxt' yielded different results (tol = `tol')"
149.                     exit 198
150.                 }
151.                 else {
152.                     di as txt "    compare_select`sel'_gcollapse (passed): select`wtxt' yielded consistent results (tol = `tol')"
153.                 }
154.             cap by id (random1): assert (((abs(random1[nj - `sel' + 1] - select_`sel') < `tol') | (mi(select_`sel') & mi(random1[nj - `sel' + 1]))))
155.                 if ( _rc ) {
156.                     di as txt "    compare_select-`sel'_gcollapse (fail): select`wtxt' yielded different results (tol = `tol')"
157.                     exit 198
158.                 }
159.                 else {
160.                     di as txt "    compare_select-`sel'_gcollapse (passed): select`wtxt' yielded consistent results (tol = `tol')"
161.                 }
162.         }
163.     }
164. end

. 
. ***********************************************************************
. *                             Benchmarks                              *
. ***********************************************************************
. 
. capture program drop bench_collapse

. program bench_collapse
  1.     syntax, [tol(real 1e-6) bench(real 1) n(int 500) NOIsily style(str) vars(int 1) collapse fcollapse *]
  2. 
.     qui gen_data, n(`n')
  3.     qui expand `=100 * `bench''
  4.     qui `noisily' random_draws, random(`vars') double
  5.     qui hashsort random1
  6. 
.     local N = trim("`: di %15.0gc _N'")
  7.     local J = trim("`: di %15.0gc `n''")
  8. 
.     if ( "`style'" == "full" ) {
  9.         local ststr "all available plus percentiles 10, 30, 70, 90"
 10.     }
 11.     else if ( "`style'" == "ftools" ) {
 12.         local ststr "mean median min max"
 13.     }
 14.     else {
 15.         local ststr "sum"
 16.     }
 17. 
.     if ( `vars' > 1 ) {
 18.         local vstr "x1-x`vars'"
 19.     }
 20.     else {
 21.         local vstr x1
 22.     }
 23. 
.     di as txt _n(1)
 24.     di as txt "Benchmark vs collapse (in seconds)"
 25.     di as txt "    - obs:     `N'"
 26.     di as txt "    - groups:  `J'"
 27.     di as txt "    - vars:    `vstr' ~ N(0, 10)"
 28.     di as txt "    - stats:   `ststr'"
 29.     di as txt "    - options: fast"
 30.     di as txt _n(1)
 31.     di as txt "    collapse | fcollapse | gcollapse | ratio (c/g) | ratio (f/g) | varlist"
 32.     di as txt "    -------- | --------- | --------- | ----------- | ----------- | -------"
 33. 
.     local options `options' style(`style') vars(`vars')
 34.     versus_collapse,                         `options' `collapse' `fcollapse'
 35.     versus_collapse str_12 str_32 str_4,     `options' `collapse' `fcollapse'
 36.     versus_collapse double1 double2 double3, `options' `collapse' `fcollapse'
 37.     versus_collapse int1 int2,               `options' `collapse' `fcollapse'
 38.     versus_collapse int3 str_32 double1,     `options' `collapse'
 39. 
.     di _n(1) "{hline 80}" _n(1) "bench_collapse, `options'" _n(1) "{hline 80}" _n(1)
 40. end

. 
. capture program drop versus_collapse

. program versus_collapse, rclass
  1.     syntax [anything], [fcollapse collapse style(str) vars(int 1) *]
  2. 
.     local stats       ""
  3.     local percentiles ""
  4. 
.     if ( "`style'" == "full" ) {
  5.         local stats sum mean sd max min count median iqr percent first last firstnm lastnm
  6.         local percentiles p10 p30 p70 p90
  7.     }
  8.     else if ( "`style'" == "ftools" ) {
  9.         local stats mean median min max
 10.     }
 11.     else {
 12.         local stats sum
 13.     }
 14. 
.     local collapse_str ""
 15.     foreach stat of local stats {
 16.         forvalues k = 1 / `vars' {
 17.             local collapse_str `collapse_str' (`stat') r`k'_`stat' = random`k'
 18.         }
 19.     }
 20.     foreach pct of local percentiles {
 21.         forvalues k = 1 / `vars' {
 22.             local collapse_str `collapse_str' (`pct') r`k'_`pct' = random`k'
 23.         }
 24.     }
 25. 
.     if ( "`collapse'" == "collapse" ) {
 26.     preserve
 27.         timer clear
 28.         timer on 42
 29.         qui collapse `collapse_str', by(`anything') fast
 30.         timer off 42
 31.         qui timer list
 32.         local time_collapse = r(t42)
 33.     restore
 34.     }
 35.     else {
 36.         local time_collapse = .
 37.     }
 38. 
.     preserve
 39.         timer clear
 40.         timer on 43
 41.         qui gcollapse `collapse_str', by(`anything') `options' fast
 42.         timer off 43
 43.         qui timer list
 44.         local time_gcollapse = r(t43)
 45.     restore
 46. 
.     if ( "`fcollapse'" == "fcollapse" ) {
 47.     preserve
 48.         timer clear
 49.         timer on 44
 50.         qui fcollapse `collapse_str', by(`anything') fast
 51.         timer off 44
 52.         qui timer list
 53.         local time_fcollapse = r(t44)
 54.     restore
 55.     }
 56.     else {
 57.         local time_fcollapse = .
 58.     }
 59. 
.     local rs = `time_collapse'  / `time_gcollapse'
 60.     local rf = `time_fcollapse' / `time_gcollapse'
 61.     di as txt "    `:di %8.3g `time_collapse'' | `:di %9.3g `time_fcollapse'' | `:di %9.3g `time_gcollapse'' | `:di %11.3g `rs'' | `:di %11.3g `rf'' | `anything'"
 62. end

. capture program drop checks_gcontract

. program checks_gcontract
  1.     syntax, [tol(real 1e-6) NOIsily *]
  2.     di _n(1) "{hline 80}" _n(1) "checks_gcontract, `options'" _n(1) "{hline 80}" _n(1)
  3. 
.     * https://github.com/mcaceresb/stata-gtools/issues/32
.     qui {
  4.         clear
  5.         sysuse auto
  6.         set varabbrev on
  7.         gcontract head
  8.         set varabbrev off
  9.     }
 10. 
.     * https://github.com/mcaceresb/stata-gtools/issues/39
.     qui {
 11.         clear
 12.         set obs 5
 13.         gen x = _n
 14.         gen strL y = "hi"
 15.         cap gcontract y
 16.         assert _rc == 17002
 17. 
.         clear
 18.         set obs 5
 19.         gen x = _n
 20.         gen strL y = "hi"
 21.         cap gcontract y, compress
 22.         assert _rc == 0
 23. 
.         clear
 24.         set obs 5
 25.         gen x = _n
 26.         gen strL y = "hi" + string(mod(_n, 2)) + char(9) + char(0)
 27.         cap gcontract y
 28.         assert _rc == 17002
 29.         cap gcontract y, compress
 30.         assert _rc == 17004
 31.     }
 32. 
.     qui `noisily' gen_data, n(5000)
 33.     qui expand 2
 34.     qui `noisily' random_draws, random(2)
 35.     gen long ix = _n
 36. 
.     cap gcontract
 37.     assert _rc == 100
 38. 
.     checks_inner_contract -str_12,              `options' nomiss
 39.     checks_inner_contract str_12 -str_32,       `options'
 40.     checks_inner_contract str_12 -str_32 str_4, `options'
 41. 
.     checks_inner_contract -double1,                 `options' fast
 42.     checks_inner_contract double1 -double2,         `options' unsorted
 43.     checks_inner_contract double1 -double2 double3, `options' v bench
 44. 
.     checks_inner_contract -int1,           `options'
 45.     checks_inner_contract int1 -int2,      `options'
 46.     checks_inner_contract int1 int2  int3, `options' z
 47. 
.     checks_inner_contract -int1 -str_32 -double1,                                         `options'
 48.     checks_inner_contract int1 -str_32 double1 -int2 str_12 -double2,                     `options'
 49.     checks_inner_contract int1 -str_32 double1 -int2 str_12 -double2 int3 -str_4 double3, `options'
 50. 
.     ****************
.     *  Misc tests  *
.     ****************
. 
.     clear
 51.     set obs 10
 52.     gen x = _n
 53.     gen y = string(mod(_n, 2))
 54.     gcontract x y , zero
 55. 
.     clear
 56.     cap gcontract
 57.     assert _rc == 2000
 58.     set obs 10
 59.     cap gcontract
 60.     assert _rc == 100
 61.     gen x = .
 62.     gcontract x
 63. 
.     clear
 64.     set obs 10
 65.     gen x = .
 66.     gen w = .
 67.     cap gcontract x [w = w]
 68.     assert _rc == 2000
 69.     cap gcontract x if w == 0
 70.     assert _rc == 2000
 71. end

. 
. capture program drop checks_inner_contract

. program checks_inner_contract
  1.     syntax [anything], [tol(real 1e-6) *]
  2. 
.     preserve
  3.         gcontract `anything', `options' freq(freq)
  4.     restore, preserve
  5.         gcontract `anything', `options' freq(freq) cf(cf)
  6.     restore, preserve
  7.         gcontract `anything', `options' freq(freq)        p(p)        format(%5.1g)
  8.     restore, preserve
  9.         gcontract `anything', `options' freq(freq)             cp(cp) float
 10.     restore, preserve
 11.         gcontract `anything', `options' freq(freq) cf(cf) p(p)        float
 12.     restore, preserve
 13.         gcontract `anything', `options' freq(freq) cf(cf)      cp(cp) format(%5.1g)
 14.     restore, preserve
 15.         gcontract `anything', `options' freq(freq)        p(p) cp(cp) format(%5.1g)
 16.     restore, preserve
 17.         gcontract `anything', `options' freq(freq) cf(cf) p(p) cp(cp) float
 18.     restore
 19. end

. 
. ***********************************************************************
. *                               Compare                               *
. ***********************************************************************
. 
. capture program drop compare_gcontract

. program compare_gcontract
  1.     syntax, [tol(real 1e-6) NOIsily *]
  2. 
.     qui `noisily' gen_data, n(500)
  3.     qui expand 50
  4.     qui `noisily' random_draws, random(2) binary(2)
  5. 
.     di as txt _n(1) "{hline 80}" _n(1) "consistency_gcontract, `options'" _n(1) "{hline 80}" _n(1)
  6. 
.     compare_inner_contract str_12,              `options' tol(`tol') nomiss
  7.     compare_inner_contract str_12 str_32,       `options' tol(`tol') sort
  8.     compare_inner_contract str_12 str_32 str_4, `options' tol(`tol') shuffle
  9. 
.     compare_inner_contract double1,                 `options' tol(`tol') shuffle
 10.     compare_inner_contract double1 double2,         `options' tol(`tol') nomiss
 11.     compare_inner_contract double1 double2 double3, `options' tol(`tol') sort
 12. 
.     compare_inner_contract int1,           `options' tol(`tol') sort
 13.     compare_inner_contract int1 int2,      `options' tol(`tol') shuffle
 14.     compare_inner_contract int1 int2 int3, `options' tol(`tol') nomiss
 15. 
.     compare_inner_contract int1 str_32 double1,                                        `options' tol(`tol')
 16.     compare_inner_contract int1 str_32 double1 int2 str_12 double2,                    `options' tol(`tol')
 17.     compare_inner_contract int1 str_32 double1 int2 str_12 double2 int3 str_4 double3, `options' tol(`tol')
 18. end

. 
. capture program drop compare_inner_contract

. program compare_inner_contract
  1.     syntax [anything], [tol(real 1e-6) sort shuffle *]
  2. 
.     tempvar rsort
  3.     if ( "`shuffle'" != "" ) gen `rsort' = runiform()
  4.     if ( "`shuffle'" != "" ) sort `rsort'
  5.     if ( ("`sort'" != "") & ("`anything'" != "") ) hashsort `anything'
  6. 
.     local N = trim("`: di %15.0gc _N'")
  7.     local hlen = 35 + length("`anything'") + length("`N'")
  8.     di as txt _n(2) "Checking contract. N = `N'; varlist = `anything'" _n(1) "{hline `hlen'}"
  9. 
.     preserve
 10.         _compare_inner_contract `anything', `options' tol(`tol')
 11.     restore, preserve
 12.         local in1 = ceil((0.00 + 0.25 * runiform()) * `=_N')
 13.         local in2 = ceil((0.75 + 0.25 * runiform()) * `=_N')
 14.         local from = cond(`in1' < `in2', `in1', `in2')
 15.         local to   = cond(`in1' > `in2', `in1', `in2')
 16.         _compare_inner_contract  `anything' in `from' / `to', `options' tol(`tol')
 17.     restore, preserve
 18.         _compare_inner_contract `anything' if random2 > 0, `options' tol(`tol')
 19.     restore, preserve
 20.         local in1 = ceil((0.00 + 0.25 * runiform()) * `=_N')
 21.         local in2 = ceil((0.75 + 0.25 * runiform()) * `=_N')
 22.         local from = cond(`in1' < `in2', `in1', `in2')
 23.         local to   = cond(`in1' > `in2', `in1', `in2')
 24.         _compare_inner_contract `anything' if random2 < 0 in `from' / `to', `options' tol(`tol')
 25.     restore
 26. end

. 
. capture program drop _compare_inner_contract

. program _compare_inner_contract
  1.     syntax [anything] [if] [in], [tol(real 1e-6) *]
  2. 
.     local opts freq(freq) cf(cf) p(p) cp(cp)
  3. 
.     preserve
  4.         timer clear
  5.         timer on 43
  6.         qui `noisily' gcontract `anything' `if' `in', `opts'
  7.         timer off 43
  8.         qui timer list
  9.         local time_gcontract = r(t43)
 10.         tempfile fg
 11.         qui save `fg'
 12.     restore
 13. 
.     preserve
 14.         timer clear
 15.         timer on 42
 16.         qui `noisily' contract `anything' `if' `in', `opts'
 17.         timer off 42
 18.         qui timer list
 19.         local time_gcontract = r(t42)
 20.         tempfile fc
 21.         qui save `fc'
 22.     restore
 23. 
.     preserve
 24.     use `fc', clear
 25.         local bad_any = 0
 26.         local bad `anything'
 27.         foreach var in freq cf p cp {
 28.             rename `var' c_`var'
 29.         }
 30.         qui merge 1:1 `anything' using `fg', assert(3)
 31.         foreach var in freq cf p cp {
 32.             qui count if ( (abs(`var' - c_`var') > `tol') & (`var' != c_`var'))
 33.             if ( `r(N)' > 0 ) {
 34.                 gen bad_`var' = abs(`var' - c_`var') * (`var' != c_`var')
 35.                 local bad `bad' *`var'
 36.                 di "    `var' has `:di r(N)' mismatches".
 37.                 local bad_any = 1
 38.                 order *`var'
 39.             }
 40.         }
 41.         if ( `bad_any' ) {
 42.             if ( "`if'`in'" == "" ) {
 43.                 di "    compare_contract (failed): full range, `anything'"
 44.             }
 45.             else if ( "`if'`in'" != "" ) {
 46.                 di "    compare_contract (failed): [`if' `in'], `anything'"
 47.             }
 48.             order `bad'
 49.             egen bad_any = rowmax(bad_*)
 50.             l `bad' if bad_any
 51.             sum bad_*
 52.             desc
 53.             exit 9
 54.         }
 55.         else {
 56.             if ( "`if'`in'" == "" ) {
 57.                 di "    compare_contract (passed): full range, gcontract results equal to contract (tol = `tol')"
 58.             }
 59.             else if ( "`if'`in'" != "" ) {
 60.                 di "    compare_contract (passed): [`if' `in'], gcontract results equal to contract (tol = `tol')"
 61.             }
 62.         }
 63.     restore
 64. end

. 
. ***********************************************************************
. *                             Benchmarks                              *
. ***********************************************************************
. 
. capture program drop bench_contract

. program bench_contract
  1.     syntax, [tol(real 1e-6) bench(real 1) n(int 500) NOIsily *]
  2. 
.     qui gen_data, n(`n')
  3.     qui expand `=100 * `bench''
  4.     qui `noisily' random_draws, random(1) double
  5.     qui hashsort random1
  6. 
.     local N = trim("`: di %15.0gc _N'")
  7.     local J = trim("`: di %15.0gc `n''")
  8. 
.     di as txt _n(1)
  9.     di as txt "Benchmark vs contract, obs = `N', J = `J' (in seconds)"
 10.     di as txt "    contract | gcontract | ratio (c/g) | varlist"
 11.     di as txt "    -------- | --------- | ----------- | -------"
 12. 
.     versus_contract str_12,              `options'
 13.     versus_contract str_12 str_32,       `options'
 14.     versus_contract str_12 str_32 str_4, `options'
 15. 
.     versus_contract double1,                 `options'
 16.     versus_contract double1 double2,         `options'
 17.     versus_contract double1 double2 double3, `options'
 18. 
.     versus_contract int1,           `options'
 19.     versus_contract int1 int2,      `options'
 20.     versus_contract int1 int2 int3, `options'
 21. 
.     versus_contract int1 str_32 double1,                                        `options'
 22.     versus_contract int1 str_32 double1 int2 str_12 double2,                    `options'
 23.     versus_contract int1 str_32 double1 int2 str_12 double2 int3 str_4 double3, `options'
 24. 
.     di _n(1) "{hline 80}" _n(1) "bench_contract, `options'" _n(1) "{hline 80}" _n(1)
 25. end

. 
. capture program drop versus_contract

. program versus_contract, rclass
  1.     syntax [anything], [*]
  2. 
.     local stats       ""
  3.     local percentiles ""
  4. 
.     local opts freq(freq) cf(cf) p(p) cp(cp)
  5. 
.     preserve
  6.         timer clear
  7.         timer on 42
  8.         qui contract `anything' `if' `in', `opts'
  9.         timer off 42
 10.         qui timer list
 11.         local time_contract = r(t42)
 12.     restore
 13. 
.     preserve
 14.         timer clear
 15.         timer on 43
 16.         qui gcontract `anything' `if' `in', `opts'
 17.         timer off 43
 18.         qui timer list
 19.         local time_gcontract = r(t43)
 20.     restore
 21. 
.     local rs = `time_contract'  / `time_gcontract'
 22.     di as txt "    `:di %8.3g `time_contract'' | `:di %9.3g `time_gcontract'' | `:di %11.3g `rs'' | `anything'"
 23. end

. * pctile, xtile tests
. *     - [X] nquantiles
. *     - [X] cutpoints
. *     - [X] quantiles
. *     - [X] cutoffs
. *     - [X] cutquantiles
. * _pctile tests
. *     - [X] nquantiles
. *     - [X] cutpoints (fail w/o gen)
. *     - [X] quantiles
. *     - [X] cutoffs (fail w/o bincount)
. *     - [X] cutquantiles (fail w/o gen)
. * options (all):
. *     - [X] altdef
. *     - [X] genp()
. *     - [X] binfreq
. *     - [X] pctile() with xtile
. *     - [X] xtile() with pctile
. * consistency, xtile:
. *     - [X] xtile,  nquantiles()   == xtile, cutpoints(pctile, nquantiles())
. *     - [X] xtile,  cutpoints()    == xtile, cutoffs()
. *     - [X] xtile,  cutquantiles() == xtile, quantiles()
. * consistency, pctile == _pctile:
. *     - [X] nquantiles
. *     - [X] cutpoints
. *     - [X] quantiles
. *     - [X] cutoffs
. *     - [X] cutquantiles
. * sanity:
. *     - [X] replace
. *     - [X] minmax
. *     - [X] strict
. * todo:
. *     by(str)
. *     method
. 
. capture program drop checks_gquantiles

. program checks_gquantiles
  1.     syntax, [tol(real 1e-6) NOIsily *]
  2.     di _n(1) "{hline 80}" _n(1) "checks_gquantiles, `options'" _n(1) "{hline 80}" _n(1)
  3. 
.     qui `noisily' gen_data, n(5000) skipstr
  4.     qui expand 2
  5.     qui `noisily' random_draws, random(2)
  6.     gen long   ix = _n
  7.     gen double ru = runiform() * 100
  8.     gen double rn = rnormal() * 100
  9. 
.     cap gquantiles
 10.     assert _rc == 198
 11.     cap gquantiles, xtile
 12.     assert _rc == 198
 13.     cap gquantiles, _pctile
 14.     assert _rc == 198
 15.     cap gquantiles, pctile
 16.     assert _rc == 198
 17. 
.     local options `options'  `noisily'
 18. 
.     checks_inner_gquantiles double1, `options' method(1)
 19.     checks_inner_gquantiles double3, `options' method(2)
 20.     checks_inner_gquantiles ru,      `options'
 21. 
.     checks_inner_gquantiles int1, `options'
 22.     checks_inner_gquantiles int3, `options' method(1)
 23.     checks_inner_gquantiles ix,   `options' method(2)
 24. 
.     checks_inner_gquantiles int1^2 + 3 * double1,          `options' method(2)
 25.     checks_inner_gquantiles log(double1) + 2 * int1,       `options'
 26.     checks_inner_gquantiles exp(double3) + int1 * double3, `options' method(1)
 27. 
.     *****************
.     *  Misc checks  *
.     *****************
. 
.     clear
 28.     cap fasterxtile
 29.     assert _rc == 2000
 30. 
.     clear
 31.     gen z = 1
 32.     cap fasterxtile x = z
 33.     assert _rc == 2000
 34. 
.     clear
 35.     set obs 10
 36.     gen z = _n
 37.     cap fasterxtile x = z if 0
 38.     assert _rc == 2000
 39.     cap fasterxtile x = z if 1 [w = .]
 40.     assert _rc == 2000
 41.     cap fasterxtile x = z if 1 [w = 0]
 42.     assert _rc == 2000
 43. 
.     clear
 44.     set obs 100
 45.     gen x = runiform()
 46.     gen w = 10 * runiform()
 47.     gen z = 10 * rnormal()
 48.     gen a = mod(_n, 7)
 49.     gen b = "str" + string(mod(_n, 3))
 50.     gen c = x in 1/5
 51. 
.     matrix qq = 1, 10, 70, 1
 52.     matrix cc = 0.1, 0.05, 0.1000, 0.9
 53.     gquantiles x, p(1 10 70) _pctile
 54.     gquantiles x, q(1 10 70) _pctile
 55.     gquantiles x, _pctile quantmatrix(qq)
 56.     cap gquantiles x, cutq(x) _pctile
 57.     assert _rc == 198
 58.     cap gquantiles x, cut(x) _pctile
 59.     assert _rc == 198
 60.     cap gquantiles x, cut(x) _pctile
 61.     assert _rc == 198
 62. 
.     clear
 63.     set obs 100
 64.     gen x = runiform()
 65.     gen w = 10 * runiform()
 66.     gen z = 10 * rnormal()
 67.     gen a = mod(_n, 7)
 68.     gen b = "str" + string(mod(_n, 3))
 69. 
.     fasterxtile gx0 = x
 70.     fasterxtile gx1 = log(x) + 1 if mod(_n, 10) in 20 / 80
 71.     fasterxtile gx2 = x [w = w],  nq(7) method(1)
 72.     fasterxtile gx3 = x [aw = w], nq(7) method(2)
 73.     fasterxtile gx4 = x [pw = w], nq(7) method(0)
 74.     cap fasterxtile gx5 = x [fw = w], nq(7)
 75.     assert _rc == 401
 76.     fasterxtile gx5 = x [fw = int(w)], nq(108)
 77.     cap fasterxtile gx6 = x [fw = int(w)], altdef
 78.     assert _rc == 198
 79. 
.     assert gx2 == gx3
 80.     assert gx3 == gx4
 81. 
.     gegen ggx0 = xtile(x)
 82.     gegen ggx1 = xtile(log(x) + 1) if mod(_n, 10) in 20 / 80
 83.     gegen ggx2 = xtile(x) [w = w],  nq(7) method(1)
 84.     gegen ggx3 = xtile(x) [aw = w], nq(7) method(2)
 85.     gegen ggx4 = xtile(x) [pw = w], nq(7) method(0)
 86. 
.     assert ggx0 == gx0
 87.     assert ggx1 == gx1
 88.     assert ggx2 == gx2
 89.     assert ggx2 == gx2
 90.     assert ggx4 == gx4
 91. 
.     drop gx*
 92. 
.     fasterxtile gx0 = x, by(a)
 93.     fasterxtile gx1 = log(x) + 1 if mod(_n, 10) in 20 / 80, by(b)
 94.     fasterxtile gx2 = x [w = w],  nq(7) by(a b)
 95.     fasterxtile gx3 = x [aw = w], nq(7) by(a b)
 96.     fasterxtile gx4 = x [pw = w], nq(7) by(a b)
 97.     cap fasterxtile gx5 = x [fw = w], nq(7) by(b a)
 98.     assert _rc == 401
 99.     fasterxtile gx5 = x [fw = int(w)], nq(108) by(-a b)
100. 
.     fasterxtile gx6 = x [fw = int(w)], by(-a b) method(1)
101.     fasterxtile gx7 = x [fw = int(w)], by(-a b) method(2)
102.     fasterxtile gx8 = x [fw = int(w)], by(-a b) method(0)
103. 
.     fasterxtile gx9 = x, by(-a b) method(1) altdef
104.     fasterxtile gx10 = x, by(-a b) method(0) altdef
105.     fasterxtile gx11 = x, by(-a b) method(2) altdef
106. 
.     assert gx2 == gx3
107.     assert gx3 == gx4
108. 
.     drop gx*
109.     gquantiles cp = x, nq(10) xtile
110. 
.     fasterxtile gx0 = x , c(cp)
111.     fasterxtile gx1 = log(x) + 1 if mod(_n , 10) in 20 / 80, c(cp)
112. 
.     fasterxtile gx2 = x [w = w]      if mod(_n , 10) in 20 / 80 , by(a b) c(cp) method(1)
113.     fasterxtile gx3 = x [aw = w]     if mod(_n , 10) in 20 / 80 , by(a b) c(cp) method(2)
114.     fasterxtile gx4 = x [pw = w]     if mod(_n , 10) in 20 / 80 , by(a b) c(cp) method(0)
115.     cap fasterxtile gx5 = x [fw = w] if mod(_n , 10) in 20 / 80 , by(b a) c(cp)
116.     assert _rc == 401
117.     fasterxtile gx5 = x [fw = int(w)], nq(108) by(-a b)
118. 
.     drop gx*
119. 
.     fasterxtile gx0 = x in 1
120.     cap fasterxtile gx1 = log(x) + 1 if mod(_n, 10) in 20 / 80, strict nq(100)
121.     assert _rc == 198
122.     fasterxtile gx2 = log(x) + 1 if mod(_n, 10) in 20 / 80, by(a) strict nq(100)
123.     assert gx2 == .
124. end

. 
. capture program drop checks_inner_gquantiles

. program checks_inner_gquantiles
  1.     syntax anything, [tol(real 1e-6) NOIsily wgt(str)  *]
  2.     cap drop __*
  3.     local qui = cond("`noisily'" == "", "qui", "noisily")
  4. 
.     local 0 `anything' `wgt', `options'
  5.     syntax anything [aw fw pw], [*]
  6. 
.     `qui' {
  7.         gquantiles __p1 = `anything' `wgt', pctile `options' nq(10)
  8.         l in 1/10
  9. 
.         gquantiles __p2 = `anything' `wgt', pctile `options' cutpoints(__p1)
 10.         gquantiles __p3 = `anything' `wgt', pctile `options' quantiles(10 30 50 70 90)
 11.         gquantiles __p4 = `anything' `wgt', pctile `options' cutoffs(10 30 50 70 90)
 12.         cap gquantiles __p5 = `anything' `wgt', pctile `options' cutquantiles(rn)
 13.         assert _rc == 198
 14.         gquantiles __p5 = `anything' `wgt', pctile `options' cutquantiles(ru)
 15. 
. 
.         fasterxtile __fx1 = `anything' `wgt', `options' nq(10)
 16.         fasterxtile __fx2 = `anything' `wgt', `options' cutpoints(__p1)
 17.         fasterxtile __fx3 = `anything',       `options' cutpoints(__p1) altdef
 18.         fasterxtile __fx4 = `anything',       `options' nq(10) altdef
 19. 
. 
.         gquantiles __x1 = `anything' `wgt', xtile `options' nq(10)
 20.         gquantiles __x2 = `anything' `wgt', xtile `options' cutpoints(__p1)
 21.         gquantiles __x3 = `anything' `wgt', xtile `options' quantiles(10 30 50 70 90)
 22.         gquantiles __x4 = `anything' `wgt', xtile `options' cutoffs(10 30 50 70 90)
 23.         cap gquantiles __x5 = `anything' `wgt', xtile `options' cutquantiles(rn)
 24.         assert _rc == 198
 25.         gquantiles __x5 = `anything' `wgt', xtile `options' cutquantiles(ru)
 26. 
.         gquantiles `anything' `wgt', _pctile `options' nq(10)
 27. 
. 
.         cap gquantiles `anything' `wgt', _pctile `options' cutpoints(__p1)
 28.         assert _rc == 198
 29.         gquantiles `anything' `wgt', _pctile `options' cutpoints(__p1) pctile(__p2) replace
 30. 
.         gquantiles `anything' `wgt', _pctile `options' quantiles(10 30 50 70 90)
 31. 
.         cap gquantiles `anything' `wgt', _pctile `options' cutoffs(10 30 50 70 90)
 32.         assert _rc == 198
 33.         gquantiles `anything' `wgt', _pctile `options' cutoffs(10 30 50 70 90) binfreq
 34. 
.         cap gquantiles `anything' `wgt', _pctile `options' cutquantiles(ru)
 35.         assert _rc == 198
 36.         gquantiles `anything' `wgt', _pctile `options' cutpoints(__p1)  xtile(__x5) replace
 37.     }
 38. 
.     if ( "`wgt'" != "" ) exit 0
 39. 
.     `qui' {
 40.         gquantiles __p1 = `anything', pctile altdef binfreq `options' nq(10) replace
 41.         matrix list r(quantiles_binfreq)
 42. 
.         drop __*
 43.         cap gquantiles __p1 = `anything' in 1/5, pctile altdef binfreq `options' nq(10) replace strict
 44.         assert inlist(_rc, 198, 2000)
 45.         cap gquantiles __p1 = `anything' in 1/5, pctile altdef binfreq `options' nq(10) replace
 46.         assert inlist(_rc, 0, 2000)
 47.         gquantiles __p1 = `anything', pctile altdef binfreq `options' nq(10) replace
 48. 
.         cap gquantiles __p2 = `anything', pctile altdef binfreq `options' cutpoints(__p1)
 49.         assert inlist(_rc, 198, 110)
 50.         gquantiles __p2 = `anything', pctile altdef binfreq(__f2) `options' cutpoints(__p1)
 51. 
.         cap gquantiles __p2 = `anything' in 10 / 20, pctile altdef binfreq(__f2) `options' cutpoints(__p1) replace
 52.         assert inlist(_rc, 0, 2000)
 53.         cap gquantiles __p2 = `anything' in 10 / 20, pctile altdef binfreq(__f2) `options' cutpoints(__p1) replace cutifin
 54.         assert inlist(_rc, 198, 2000)
 55.         cap gquantiles __p2_ii = `anything' if inlist(_n, 1, 3, 7), pctile altdef `options' cutifin cutpoints(__p1)
 56.         * assert __p2_ii[1] == __p1[1]
.         * assert __p2_ii[2] == __p1[3]
.         * assert __p2_ii[3] == __p1[7]
.         gquantiles __p2 = `anything', pctile altdef binfreq(__f2) `options' cutpoints(__p1) replace
 57. 
. 
.         gquantiles __p3 = `anything', pctile altdef binfreq `options' quantiles(10 30 50 70 90)
 58.         matrix list r(quantiles_binfreq)
 59. 
. 
.         gquantiles __p4 = `anything', pctile altdef binfreq `options' cutoffs(10 30 50 70 90)
 60.         matrix list r(cutoffs_binfreq)
 61. 
. 
.         cap gquantiles __p5 = `anything', pctile altdef binfreq `options' cutquantiles(ru)
 62.         assert inlist(_rc, 198, 110)
 63.         gquantiles __p5 = `anything', pctile altdef binfreq(__f5) `options' cutquantiles(ru)
 64.         gquantiles __p5 = `anything', pctile altdef binfreq(__f5) `options' cutquantiles(ru) replace
 65. 
.         gquantiles __x1 = `anything', pctile altdef binfreq `options' nq(10) replace
 66.         matrix list r(quantiles_binfreq)
 67. 
. 
. 
.         gquantiles __x1 = `anything', pctile altdef binfreq `options' nq(10) replace
 68.         cap gquantiles __x1 = `anything' in 1/5, pctile altdef binfreq `options' nq(10) replace
 69.         assert inlist(_rc, 0, 2000)
 70.         cap gquantiles __x1 = `anything' in 1/5, pctile altdef binfreq `options' nq(10) replace strict
 71.         assert inlist(_rc, 198, 2000)
 72. 
.         cap gquantiles __x2 = `anything', pctile altdef binfreq `options' cutpoints(__p1)
 73.         assert _rc == 198
 74.         gquantiles __x2 = `anything', pctile altdef binfreq(__xf2) `options' cutpoints(__p1)
 75.         gquantiles __x2 = `anything', pctile altdef binfreq(__xf2) `options' cutpoints(__p1) replace
 76. 
.         gquantiles __x3 = `anything', pctile altdef binfreq `options' quantiles(10 30 50 70 90)
 77.         matrix list r(quantiles_binfreq)
 78. 
.         gquantiles __x4 = `anything', pctile altdef binfreq `options' cutoffs(10 30 50 70 90)
 79.         matrix list r(cutoffs_binfreq)
 80. 
.         cap gquantiles __x5 = `anything', pctile altdef binfreq `options' cutquantiles(ru)
 81.         assert _rc == 198
 82.         gquantiles __x5 = `anything', pctile altdef binfreq(__xf5) `options' cutquantiles(ru)
 83.         gquantiles __x5 = `anything', pctile altdef binfreq(__xf5) `options' cutquantiles(ru) replace
 84. 
. 
. 
.         cap sum `anything', meanonly
 85.         if ( _rc ) {
 86.             tempvar zz
 87.             qui gen `zz' = `anything'
 88.             qui sum `zz', meanonly
 89.         }
 90.         local rmin = r(min)
 91.         local rmax = r(max)
 92.         gquantiles `anything', altdef _pctile `options' nq(10) minmax
 93.         disp abs(`rmin' - r(min)), abs(`rmax' - r(max))
 94.         cap gquantiles `anything' in 1/5, altdef _pctile `options' nq(10) minmax
 95.         assert inlist(_rc, 0, 2000)
 96.         cap gquantiles `anything' in 1/5, altdef _pctile `options' nq(10) minmax strict
 97.         assert inlist(_rc, 198, 2000)
 98. 
.         cap gquantiles `anything', altdef _pctile `options' cutpoints(__p1) minmax
 99.         assert _rc == 198
100.         gquantiles `anything', _pctile altdef `options' cutpoints(__p1) pctile(__p2) replace minmax
101.         disp abs(`rmin' - r(min)), abs(`rmax' - r(max))
102. 
.         gquantiles `anything', _pctile altdef `options' quantiles(10 30 50 70 90) minmax
103.         disp abs(`rmin' - r(min)), abs(`rmax' - r(max))
104. 
.         cap gquantiles `anything', _pctile altdef `options' cutoffs(10 30 50 70 90) minmax
105.         assert _rc == 198
106.         gquantiles `anything', _pctile altdef `options' cutoffs(10 30 50 70 90) binfreq minmax
107.         disp abs(`rmin' - r(min)), abs(`rmax' - r(max))
108. 
.         cap gquantiles `anything', _pctile altdef `options' cutquantiles(ru) minmax
109.         assert _rc == 198
110.         gquantiles `anything', _pctile altdef `options' cutpoints(__p1)  xtile(__x5) replace minmax
111.         disp abs(`rmin' - r(min)), abs(`rmax' - r(max))
112.     }
113. end

. 
. ***********************************************************************
. *                        Internal Consistency                         *
. ***********************************************************************
. 
. capture program drop compare_gquantiles

. program compare_gquantiles
  1.     syntax, [NOIsily noaltdef wgt(str) *]
  2.     local options `options' `noisily'
  3. 
.     gettoken wfun wfoo: wgt
  4.     local wfun `wfun'
  5.     local wfoo `wfoo'
  6.     if ( `"`wfoo'"' == "mix" ) {
  7.         local wcall_a "[aw = unif_0_100]"
  8.         local wcall_f "[fw = int_unif_0_100]"
  9.         local wcall_p "[pw = float_unif_0_1]"
 10.         local wgen_a qui gen unif_0_100 = 100 * runiform() if mod(_n, 100)
 11.         local wgen_f qui gen int_unif_0_100 = int(100 * runiform()) if mod(_n, 100)
 12.         local wgen_p qui gen float_unif_0_1 = runiform() if mod(_n, 100)
 13.     }
 14. 
.     compare_gquantiles_stata, n(5000) bench(10) `altdef' `options' wgt(`wcall_a') wgen(`wgen_a')
 15. 
.     local N = trim("`: di %15.0gc _N'")
 16.     di _n(1) "{hline 80}" _n(1) "consistency_gquantiles_pctile_xtile, N = `N', `options'" _n(1) "{hline 80}" _n(1)
 17. 
.     qui `noisily' gen_data, n(5000) skipstr
 18.     qui expand 10
 19.     qui `noisily' random_draws, random(2) double
 20.     gen long   ix = _n
 21.     gen double ru = runiform() * 100
 22.     qui replace ix = . if mod(_n, 5000) == 0
 23.     qui replace ru = . if mod(_n, 5000) == 0
 24.     qui sort random1
 25.     `wgen_a'
 26.     `wgen_f'
 27.     `wgen_p'
 28. 
.     _consistency_inner_gquantiles, `options' wgt(`wcall_f')
 29.     _consistency_inner_gquantiles in 1 / 5, `options' corners wgt(`wcall_p')
 30. 
.     local in1 = ceil((0.00 + 0.25 * runiform()) * `=_N')
 31.     local in2 = ceil((0.75 + 0.25 * runiform()) * `=_N')
 32.     local from = cond(`in1' < `in2', `in1', `in2')
 33.     local to   = cond(`in1' > `in2', `in1', `in2')
 34.     _consistency_inner_gquantiles in `from' / `to', `options' wgt(`wcall_a')
 35. 
.     _consistency_inner_gquantiles if random2 > 0, `options' wgt(`wcall_p')
 36. 
.     local in1 = ceil((0.00 + 0.25 * runiform()) * `=_N')
 37.     local in2 = ceil((0.75 + 0.25 * runiform()) * `=_N')
 38.     local from = cond(`in1' < `in2', `in1', `in2')
 39.     local to   = cond(`in1' > `in2', `in1', `in2')
 40.     _consistency_inner_gquantiles `anything' if random2 < 0 in `from' / `to', `options' wgt(`wcall_f')
 41. 
.     local N = trim("`: di %15.0gc _N'")
 42.     di _n(1) "{hline 80}" _n(1) "consistency_gquantiles_internals, N = `N', `options'" _n(1) "{hline 80}" _n(1)
 43. end

. 
. capture program drop _consistency_inner_gquantiles

. program _consistency_inner_gquantiles
  1.     syntax [if] [in], [tol(real 1e-15) tolmat(real 1e-6) NOIsily corners *]
  2. 
.     if ( "`corners'" == "" ) {
  3.     _consistency_inner_full double1 `if' `in', `options'
  4.     _consistency_inner_full double3 `if' `in', `options'
  5.     _consistency_inner_full ru      `if' `in', `options'
  6. 
.     _consistency_inner_full int1 `if' `in', `options'
  7.     _consistency_inner_full int3 `if' `in', `options'
  8.     _consistency_inner_full ix   `if' `in', `options'
  9. 
.     _consistency_inner_full int1^2 + 3 * double1          `if' `in', `options'
 10.     _consistency_inner_full log(double1) + 2 * int1       `if' `in', `options'
 11.     _consistency_inner_full exp(double3) + int1 * double3 `if' `in', `options'
 12.     }
 13.     else {
 14.     _consistency_inner_full double1 `if' `in', `options'
 15.     _consistency_inner_full ru      `if' `in', `options'
 16.     _consistency_inner_full int1    `if' `in', `options'
 17.     _consistency_inner_full ix      `if' `in', `options'
 18.     }
 19. end

. 
. capture program drop _consistency_inner_full

. program  _consistency_inner_full
  1.     syntax anything [if] [in], [wgt(str) *]
  2. 
.     if ( "`wgt'" != "" ) {
  3.         local wtxt " `wgt'"
  4.     }
  5. 
.     if ( "`if'`in'" != "" ) {
  6.         local ifinstr ""
  7.         if ( "`if'" != "" ) local ifinstr `ifinstr' [`if']
  8.         if ( "`in'" != "" ) local ifinstr `ifinstr' [`in']
  9.     }
 10. 
.     local hlen = length("Internal consistency for gquantiles `anything', `ifinstr'`wtxt'")
 11.     di as txt _n(1) "Internal consistency for gquantiles `anything', `ifinstr'`wtxt'" _n(1) "{hline `hlen'}" _n(1)
 12. 
.     _consistency_inner_nq `anything' `if' `in', `options' wgt(`wgt') nq(2)
 13.     _consistency_inner_nq `anything' `if' `in', `options' wgt(`wgt') nq(10)
 14.     _consistency_inner_nq `anything' `if' `in', `options' wgt(`wgt') nq(100)
 15.     _consistency_inner_nq `anything' `if' `in', `options' wgt(`wgt') nq(801)
 16.     _consistency_inner_nq `anything' `if' `in', `options' wgt(`wgt') nq(`=_N + 1')
 17. 
.     if ( `"`wgt'"' != "" ) exit 0
 18. 
.     _consistency_inner_nq `anything' `if' `in', altdef `options' nq(2)
 19.     _consistency_inner_nq `anything' `if' `in', altdef `options' nq(10)
 20.     _consistency_inner_nq `anything' `if' `in', altdef `options' nq(100)
 21.     _consistency_inner_nq `anything' `if' `in', altdef `options' nq(801)
 22.     _consistency_inner_nq `anything' `if' `in', altdef `options' nq(`=_N + 1')
 23. end

. 
. capture program drop _consistency_inner_nq

. program _consistency_inner_nq
  1.     syntax anything [if] [in], [tol(real 1e-15) tolmat(real 1e-6) nq(real 2) wgt(str) *]
  2.     cap drop __*
  3.     local rc = 0
  4. 
.     qui {
  5.     gquantiles __p1 = `anything' `if' `in' `wgt', pctile `options' nq(`nq') genp(__g1) binfreq(__f1) xtile(__x1)
  6.     gquantiles __p2 = `anything' `if' `in' `wgt', pctile `options' cutpoints(__p1) binfreq(__f2) xtile(__x2)
  7.     if ( `nq' <= 801 ) {
  8.         if ( `nq' > 10 ) set matsize `=`nq' - 1'
  9.         mkmat __g1 in 1 / `=`nq' - 1', mat(__mg1)
 10.         mkmat __p1 in 1 / `=`nq' - 1', mat(__mp1)
 11. 
.         gquantiles __p3 = `anything' `if' `in' `wgt', pctile `options' quantmatrix(__mg1) binfreq binfreq(__f3) xtile(__x3)
 12.         scalar ___s3   = r(nqused)
 13.         matrix ___mp3  = r(quantiles_used)
 14.         matrix ___mf3  = r(quantiles_binfreq)
 15. 
.         gquantiles __p4 = `anything' `if' `in' `wgt', pctile `options' cutmatrix(__mp1) binfreq binfreq(__f4) xtile(__x4)
 16.         scalar ___s4   = r(nqused)
 17.         matrix ___mp4  = r(cutoffs_used)
 18.         matrix ___mf4  = r(cutoffs_binfreq)
 19.     }
 20.     gquantiles __p5 = `anything' `if' `in' `wgt', pctile `options' cutquantiles(__g1) binfreq(__f5) xtile(__x5)
 21.     }
 22. 
.     * NOTE(mauricio): At one point I do exp(X) which blows this up.
.     * xtile and binfreq are still good, but the pctile discrepancy
.     * is relatively large because of it. Hence I also do relative
.     * comparisons here. // 2017-11-19 13:04 EST
. 
.     _compare_inner_nqvars `tol' `tolmat' `nq'
 23.     if ( `rc' ) {
 24.         tempvar relcmp
 25.         qui gen double `relcmp' = __p1 * `tolmat' in 1/`=`nq'-1'
 26.         qui replace `relcmp'    = cond(`relcmp' < `tolmat', `tolmat', `relcmp') in 1/`=`nq'-1'
 27.         local rc = 0
 28.         foreach perc of varlist __p? {
 29.             cap assert (abs(__p1 - `perc') < `relcmp') | mi(__p1)
 30.             local rc = max(`rc', _rc)
 31.         }
 32.         if ( `rc' ) {
 33.             di as err "    consistency_internal_gquantiles (failed): pctile via nq(`nq') `options' not all equal"
 34.             exit `rc'
 35.         }
 36.         else {
 37.             qui su `relcmp'
 38.             _compare_inner_nqvars `tol' `=r(max)' `nq'
 39.             if ( `rc' ) {
 40.                 di as err "    consistency_internal_gquantiles (failed): pctile via nq(`nq') `options' not all equal"
 41.                 exit `rc'
 42.             }
 43.         }
 44.     }
 45. 
.     qui {
 46.     cap drop __*
 47.     gquantiles __x1 = `anything' `if' `in' `wgt', xtile `options' nq(`nq') genp(__g1) binfreq(__f1) pctile(__p1)
 48.     gquantiles __x2 = `anything' `if' `in' `wgt', xtile `options' cutpoints(__p1) binfreq(__f2) pctile(__p2)
 49.     if ( `nq' <= 801 ) {
 50.         if ( `nq' > 10 ) set matsize `=`nq' - 1'
 51.         mkmat __g1 in 1 / `=`nq' - 1', mat(__mg1)
 52.         mkmat __p1 in 1 / `=`nq' - 1', mat(__mp1)
 53. 
.         gquantiles __x3 = `anything' `if' `in' `wgt', xtile `options' quantmatrix(__mg1) binfreq binfreq(__f3) pctile(__p3)
 54.         scalar ___s3   = r(nqused)
 55.         matrix ___mp3  = r(quantiles_used)
 56.         matrix ___mf3  = r(quantiles_binfreq)
 57. 
.         gquantiles __x4 = `anything' `if' `in' `wgt', xtile `options' cutmatrix(__mp1) binfreq binfreq(__f4) pctile(__p4)
 58.         scalar ___s4   = r(nqused)
 59.         matrix ___mp4  = r(cutoffs_used)
 60.         matrix ___mf4  = r(cutoffs_binfreq)
 61.     }
 62.     gquantiles __x5 = `anything' `if' `in' `wgt', xtile `options' cutquantiles(__g1) binfreq(__f5) pctile(__p5)
 63.     }
 64. 
.     _compare_inner_nqvars `tol' `tolmat' `nq'
 65.     if ( `rc' ) {
 66.         tempvar relcmp
 67.         qui gen double `relcmp' = __p1 * `tolmat' in 1/`=`nq'-1'
 68.         qui replace `relcmp'    = cond(`relcmp' < `tolmat', `tolmat', `relcmp') in 1/`=`nq'-1'
 69.         local rc = 0
 70.         foreach perc of varlist __p? {
 71.             cap assert (abs(__p1 - `perc') < `relcmp') | mi(__p1)
 72.             local rc = max(`rc', _rc)
 73.         }
 74.         if ( `rc' ) {
 75.             di as err "    consistency_internal_gquantiles (failed): xtile via nq(`nq') `options' not all equal"
 76.             exit `rc'
 77.         }
 78.         else {
 79.             qui su `relcmp'
 80.             _compare_inner_nqvars `tol' `=r(max)' `nq'
 81.             if ( `rc' ) {
 82.                 di as err "    consistency_internal_gquantiles (failed): xtile via nq(`nq') `options' not all equal"
 83.                 exit `rc'
 84.             }
 85.         }
 86.     }
 87. 
.     qui if ( `nq' <= 801 ) {
 88.         if ( `nq' > 10 ) set matsize `=`nq' - 1'
 89.         mkmat __g1 in 1 / `=`nq' - 1', mat(__mg1)
 90.         mkmat __p1 in 1 / `=`nq' - 1', mat(__mp1)
 91. 
.         gquantiles `anything' `if' `in' `wgt', _pctile `options' nq(`nq') genp(__g1) binfreq(__f1) pctile(__p1) xtile(__x1) replace
 92.         gquantiles `anything' `if' `in' `wgt', _pctile `options' cutpoints(__p1) binfreq(__f2) pctile(__p2) xtile(__x2) replace
 93. 
.         gquantiles `anything' `if' `in' `wgt', _pctile `options' quantmatrix(__mg1) binfreq binfreq(__f3) pctile(__p3) xtile(__x3) replace
 94.         scalar ___s3   = r(nqused)
 95.         matrix ___mp3  = r(quantiles_used)
 96.         matrix ___mf3  = r(quantiles_binfreq)
 97. 
.         gquantiles `anything' `if' `in' `wgt', _pctile `options' cutmatrix(__mp1) binfreq binfreq(__f4) pctile(__p4) xtile(__x4) replace
 98.         scalar ___s4   = r(nqused)
 99.         matrix ___mp4  = r(cutoffs_used)
100.         matrix ___mf4  = r(cutoffs_binfreq)
101. 
.         gquantiles `anything' `if' `in' `wgt', _pctile `options' cutquantiles(__g1) binfreq(__f5) pctile(__p5) xtile(__x5) replace
102. 
.         _compare_inner_nqvars `tol' `tolmat' `nq'
103.         if ( `rc' ) {
104.             tempvar relcmp
105.             qui gen double `relcmp' = __p1 * `tolmat' in 1/`=`nq'-1'
106.             qui replace `relcmp'    = cond(`relcmp' < `tolmat', `tolmat', `relcmp') in 1/`=`nq'-1'
107.             local rc = 0
108.             foreach perc of varlist __p? {
109.                 cap assert (abs(__p1 - `perc') < `relcmp') | mi(__p1)
110.                 local rc = max(`rc', _rc)
111.             }
112.             if ( `rc' ) {
113.                 di as err "    consistency_internal_gquantiles (failed): _pctile via nq(`nq') `options' not all equal"
114.                 exit `rc'
115.             }
116.             else {
117.                 qui su `relcmp'
118.                 _compare_inner_nqvars `tol' `=r(max)' `nq'
119.                 if ( `rc' ) {
120.                     di as err "    consistency_internal_gquantiles (failed): _pctile via nq(`nq') `options' not all equal"
121.                     exit `rc'
122.                 }
123.             }
124.         }
125.     }
126. 
.     di as txt "    consistency_internal_gquantiles (passed): xtile, pctile, and _pctile via nq(`nq') `options'" ///
>               "(tol = `:di %6.2g `tol'', tolmat = `:di %6.2g `tolmat'')"
127. end

. 
. capture program drop _compare_inner_nqvars

. program _compare_inner_nqvars, rclass
  1.     args tol tolmat nq
  2.     local rc = 0
  3. 
.     * NOTE(mauricio): Percentiles need not be super precise. The
.     * important property is that they preserve xtile and binfreq, which
.     * is why that tolerance is super small whereas the tolerance for
.     * percentiles is larger. // 2017-11-19 12:33 EST
. 
.     _compare_inner_nqvars_rc __p1 __p2 `tolmat'
  4.     local rc = max(`rc', `r(rc)')
  5.     _compare_inner_nqvars_rc __f1 __f2 `tol'
  6.     local rc = max(`rc', `r(rc)')
  7.     _compare_inner_nqvars_rc __x1 __x2 `tol'
  8.     local rc = max(`rc', `r(rc)')
  9. 
.     if ( `nq' <= 801 ) {
 10.         _compare_inner_nqvars_rc __p1 __p3 `tolmat'
 11.         local rc = max(`rc', `r(rc)')
 12.         _compare_inner_nqvars_rc __f1 __f3 `tol'
 13.         local rc = max(`rc', `r(rc)')
 14.         _compare_inner_nqvars_rc __x1 __x3 `tol'
 15.         local rc = max(`rc', `r(rc)')
 16. 
.         _compare_inner_nqvars_rc __p1 __p4 `tolmat'
 17.         local rc = max(`rc', `r(rc)')
 18.         _compare_inner_nqvars_rc __f1 __f4 `tol'
 19.         local rc = max(`rc', `r(rc)')
 20.         _compare_inner_nqvars_rc __x1 __x4 `tol'
 21.         local rc = max(`rc', `r(rc)')
 22. 
.         assert scalar(___s3) == scalar(___s4)
 23.         cap mata: assert(all(abs(st_matrix("___mp3")  :- st_matrix("___mp4"))  :< `tolmat'))
 24.         local rc = max(`rc', _rc)
 25.         cap mata: assert(all(abs(st_matrix("___mf3")  :- st_matrix("___mf4"))  :< `tolmat'))
 26.         local rc = max(`rc', _rc)
 27. 
.         cap mata: assert(all(abs(st_matrix("___mp3")  :- st_data(1::st_numscalar("___s3"), "__p1"))  :< `tolmat'))
 28.         local rc = max(`rc', _rc)
 29.         cap mata: assert(all(abs(st_matrix("___mf3")  :- st_data(1::st_numscalar("___s3"), "__f3"))  :< `tolmat'))
 30.         local rc = max(`rc', _rc)
 31. 
.         cap mata: assert(all(abs(st_matrix("___mp4")  :- st_data(1::st_numscalar("___s4"), "__p1"))  :< `tolmat'))
 32.         local rc = max(`rc', _rc)
 33.         cap mata: assert(all(abs(st_matrix("___mf4")  :- st_data(1::st_numscalar("___s4"), "__f4"))  :< `tolmat'))
 34.         local rc = max(`rc', _rc)
 35.     }
 36. 
.     _compare_inner_nqvars_rc __p1 __p5 `tolmat'
 37.     local rc = max(`rc', `r(rc)')
 38.     _compare_inner_nqvars_rc __f1 __f5 `tol'
 39.     local rc = max(`rc', `r(rc)')
 40.     _compare_inner_nqvars_rc __x1 __x5 `tol'
 41.     local rc = max(`rc', `r(rc)')
 42. 
.     c_local rc `rc'
 43. end

. 
. capture program drop _compare_inner_nqvars_rc

. program _compare_inner_nqvars_rc, rclass
  1.     args v1 v2 tol
  2.     cap assert `v1' == `v2'
  3.     if ( _rc ) {
  4.         cap assert abs(`v1' - `v2') < `tol' | mi(`v1')
  5.     }
  6.     return scalar rc = _rc
  7. end

. 
. 
. ***********************************************************************
. *                               Compare                               *
. ***********************************************************************
. 
. capture program drop bench_gquantiles

. program bench_gquantiles
  1.     syntax, [bench(int 10) n(int 5000) *]
  2.     compare_inner_quantiles, n(`n') bench(`bench') benchmode qopts(p(0.1 5 10 30 50 70 90 95 99.9))  qwhich(_pctile)
  3.     compare_inner_quantiles, n(`n') bench(`bench') benchmode qopts(nq(10))  qwhich(_pctile)
  4.     compare_inner_quantiles, n(`n') bench(`bench') benchmode qopts(nq(10))  qwhich(xtile)
  5.     compare_inner_quantiles, n(`n') bench(`bench') benchmode qopts(nq(10))  qwhich(pctile)
  6. end

. 
. capture program drop compare_gquantiles_stata

. program compare_gquantiles_stata
  1.     syntax, [bench(int 10) n(int 5000) noaltdef *]
  2. 
.     if ( "`altdef'" != "noaltdef" ) {
  3.     compare_inner_quantiles, n(`n') bench(`bench') qopts(altdef nq(500))  qwhich(xtile) `options'
  4.     compare_inner_quantiles, n(`n') bench(`bench') qopts(altdef nq(100))  qwhich(xtile) `options'
  5.     compare_inner_quantiles, n(`n') bench(`bench') qopts(altdef nq(10))   qwhich(xtile) `options'
  6.     compare_inner_quantiles, n(`n') bench(`bench') qopts(altdef nq(2))    qwhich(xtile) `options'
  7. 
.     compare_inner_quantiles, n(`n') bench(`bench') qopts(altdef p(0.1 5 10 30 50 70 90 95 99.9)) qwhich(_pctile) `options'
  8.     compare_inner_quantiles, n(`n') bench(`bench') qopts(altdef nq(801)) qwhich(_pctile) `options'
  9.     compare_inner_quantiles, n(`n') bench(`bench') qopts(altdef nq(100)) qwhich(_pctile) `options'
 10.     compare_inner_quantiles, n(`n') bench(`bench') qopts(altdef nq(10))  qwhich(_pctile) `options'
 11.     compare_inner_quantiles, n(`n') bench(`bench') qopts(altdef nq(2))   qwhich(_pctile) `options'
 12. 
.     compare_inner_quantiles, n(`n') bench(`bench') qopts(altdef nq(500))  qwhich(pctile) `options'
 13.     compare_inner_quantiles, n(`n') bench(`bench') qopts(altdef nq(100))  qwhich(pctile) `options'
 14.     compare_inner_quantiles, n(`n') bench(`bench') qopts(altdef nq(10))   qwhich(pctile) `options'
 15.     compare_inner_quantiles, n(`n') bench(`bench') qopts(altdef nq(2))    qwhich(pctile) `options'
 16.     }
 17. 
.     compare_inner_quantiles, n(`n') bench(`bench') qopts(nq(500))  qwhich(pctile) `options'
 18.     compare_inner_quantiles, n(`n') bench(`bench') qopts(nq(100))  qwhich(pctile) `options'
 19.     compare_inner_quantiles, n(`n') bench(`bench') qopts(nq(10))   qwhich(pctile) `options'
 20.     compare_inner_quantiles, n(`n') bench(`bench') qopts(nq(2))    qwhich(pctile) `options'
 21. 
.     compare_inner_quantiles, n(`n') bench(`bench') qopts(p(0.1 5 10 30 50 70 90 95 99.9)) qwhich(_pctile) `options'
 22.     compare_inner_quantiles, n(`n') bench(`bench') qopts(nq(801)) qwhich(_pctile) `options'
 23.     compare_inner_quantiles, n(`n') bench(`bench') qopts(nq(100)) qwhich(_pctile) `options'
 24.     compare_inner_quantiles, n(`n') bench(`bench') qopts(nq(10))  qwhich(_pctile) `options'
 25.     compare_inner_quantiles, n(`n') bench(`bench') qopts(nq(2))   qwhich(_pctile) `options'
 26. 
.     compare_inner_quantiles, n(`n') bench(`bench') qopts(nq(500))  qwhich(xtile) `options'
 27.     compare_inner_quantiles, n(`n') bench(`bench') qopts(nq(100))  qwhich(xtile) `options'
 28.     compare_inner_quantiles, n(`n') bench(`bench') qopts(nq(10))   qwhich(xtile) `options'
 29.     compare_inner_quantiles, n(`n') bench(`bench') qopts(nq(2))    qwhich(xtile) `options'
 30. end

. 
. capture program drop compare_inner_quantiles

. program compare_inner_quantiles
  1.     syntax, [bench(int 5) n(real 50000) benchmode wgen(str) *]
  2.     local options `options' `benchmode'
  3. 
.     qui `noisily' gen_data, n(`n') skipstr
  4.     qui expand `bench'
  5.     qui `noisily' random_draws, random(2) double
  6.     gen long   ix = _n
  7.     gen double ru = runiform() * 100
  8.     qui replace ix = . if mod(_n, `n') == 0
  9.     qui replace ru = . if mod(_n, `n') == 0
 10.     qui sort random1
 11.     `wgen'
 12. 
.     _compare_inner_gquantiles, `options'
 13. 
.     if ( "`benchmode'" == "" ) {
 14.         _compare_inner_gquantiles in 1 / 5, `options' corners
 15. 
.         local in1 = ceil((0.00 + 0.25 * runiform()) * `=_N')
 16.         local in2 = ceil((0.75 + 0.25 * runiform()) * `=_N')
 17.         local from = cond(`in1' < `in2', `in1', `in2')
 18.         local to   = cond(`in1' > `in2', `in1', `in2')
 19.         _compare_inner_gquantiles in `from' / `to', `options'
 20. 
.         _compare_inner_gquantiles if random2 > 0, `options'
 21. 
.         local in1 = ceil((0.00 + 0.25 * runiform()) * `=_N')
 22.         local in2 = ceil((0.75 + 0.25 * runiform()) * `=_N')
 23.         local from = cond(`in1' < `in2', `in1', `in2')
 24.         local to   = cond(`in1' > `in2', `in1', `in2')
 25.         _compare_inner_gquantiles `anything' if random2 < 0 in `from' / `to', `options'
 26.     }
 27. end

. 
. ***********************************************************************
. *                             Comparisons                             *
. ***********************************************************************
. 
. capture program drop _compare_inner_gquantiles

. program _compare_inner_gquantiles
  1.     syntax [if] [in], [tol(real 1e-6) NOIsily qopts(str) qwhich(str) benchmode table corners wgt(str) *]
  2. 
.     if ( "`if'`in'" != "" ) {
  3.         local ifinstr ""
  4.         if ( "`if'" != "" ) local ifinstr `ifinstr' [`if']
  5.         if ( "`in'" != "" ) local ifinstr `ifinstr' [`in']
  6. 
.         if ( ("`corners'" != "")  & ("`qwhich'" == "xtile")) {
  7.             disp as txt "(note: skipped `ifinstr' tests for xtile; this test is for pctile and _pctile only)"
  8.             exit 0
  9.         }
 10.     }
 11. 
.     local options `options' `benchmode' `table' qopts(`qopts') wgt(`wgt')
 12. 
.     local N = trim("`: di %15.0gc _N'")
 13.     di as txt _n(1)
 14.     di as txt "Compare `qwhich'"
 15.     di as txt "     - opts:   `qopts'"
 16.     di as txt "     - if in:  `ifinstr'"
 17.     di as txt "     - weight: `wgt'"
 18.     di as txt "     - obs:    `N'"
 19.     if ( ("`benchmode'" != "") | ("`table'" != "") ) {
 20.     if ( "`qwhich'" == "xtile" ) {
 21.     di as txt "    xtile | fastxtile | gquantiles | ratio (x/g) | ratio (f/g) | varlist"
 22.     di as txt "    ----- | --------- | ---------- | ----------- | ----------- | -------"
 23.     }
 24.     if ( "`qwhich'" == "pctile" ) {
 25.     di as txt "    pctile | gquantiles | ratio (p/g) | varlist"
 26.     di as txt "    ------ | ---------- | ----------- | -------"
 27.     }
 28.     if ( "`qwhich'" == "_pctile" ) {
 29.     di as txt "    _pctile | gquantiles | ratio (_/g) | varlist"
 30.     di as txt "    ------- | ---------- | ----------- | -------"
 31.     }
 32.     }
 33. 
.     if ( "`corners'" == "" ) {
 34.     _compare_inner_`qwhich' double1 `if' `in', `options' note("~ U(0,  500), no missings, groups of size 10")
 35.     _compare_inner_`qwhich' double3 `if' `in', `options' note("~ N(10, 5), many missings, groups of size 10")
 36.     _compare_inner_`qwhich' ru      `if' `in', `options' note("~ N(0, 100), few missings, unique")
 37. 
.     _compare_inner_`qwhich' int1 `if' `in', `options' note("discrete (no missings, many groups)")
 38.     _compare_inner_`qwhich' int3 `if' `in', `options' note("discrete (many missings, few groups)")
 39.     _compare_inner_`qwhich' ix   `if' `in', `options' note("discrete (few missings, unique)")
 40. 
.     _compare_inner_`qwhich' int1^2 + 3 * double1          `if' `in', `options'
 41.     _compare_inner_`qwhich' log(double1) + 2 * int1       `if' `in', `options'
 42.     _compare_inner_`qwhich' exp(double3) + int1 * double3 `if' `in', `options'
 43.     }
 44.     else {
 45.     _compare_inner_`qwhich' double1 `if' `in', `options' note("~ U(0,  500), no missings, groups of size 10")
 46.     _compare_inner_`qwhich' ru      `if' `in', `options' note("~ N(0, 100), few missings, unique")
 47.     _compare_inner_`qwhich' int1    `if' `in', `options' note("discrete (no missings, many groups)")
 48.     _compare_inner_`qwhich' ix      `if' `in', `options' note("discrete (few missings, unique)")
 49.     }
 50. end

. 
. ***********************************************************************
. *                              Internals                              *
. ***********************************************************************
. 
. capture program drop _compare_inner_xtile

. program _compare_inner_xtile
  1.     syntax anything [if] [in], [note(str) benchmode table qopts(str) sorted wgt(str) *]
  2.     tempvar xtile fxtile gxtile
  3. 
.     if ( "`sorted'" != "" ) {
  4.         cap sort `anything'
  5.         if ( _rc ) {
  6.             tempvar sort
  7.             qui gen double `sort' = `anything'
  8.             sort `sort'
  9.         }
 10.     }
 11. 
.     timer clear
 12.     timer on 43
 13.     qui gquantiles `gxtile' = `anything' `if' `in' `wgt', xtile `qopts' `options'
 14.     timer off 43
 15.     qui timer list
 16.     local time_gxtile = r(t43)
 17. 
.     timer clear
 18.     timer on 42
 19.     qui xtile `xtile' = `anything' `if' `in' `wgt', `qopts'
 20.     timer off 42
 21.     qui timer list
 22.     local time_xtile = r(t42)
 23. 
.     timer clear
 24.     timer on 44
 25.     cap fastxtile `fxtile' = `anything' `if' `in' `wgt', `qopts'
 26.     local rc_f = _rc
 27.     timer off 44
 28.     qui timer list
 29.     local time_fxtile = r(t44)
 30.     if ( `rc_f' ) {
 31.         local time_fxtile = .
 32.         di "(note: fastxtile failed where xtile succeeded)"
 33.     }
 34. 
.     local warnings 0
 35.     cap assert `xtile' == `gxtile'
 36.     if ( _rc ) {
 37.         tempvar diff
 38.         qui gen `diff' = `xtile' - `gxtile'
 39.         gtoplevelsof `diff', nowarn
 40.         if ( strpos("`qopts'", "altdef") ) {
 41.             local qopts: subinstr local qopts "altdef" " ", all
 42.             qui gquantiles `anything' `if' `in', xtile(`gxtile') `qopts' replace
 43.             cap assert `xtile' == `gxtile'
 44.             if ( _rc ) {
 45.                 di as err "    compare_xtile (failed): gquantiles xtile = `anything' gave different levels to xtile"
 46.                 di as err ""
 47.                 di as err `"Stata's built-in xtile, altdef can sometimes be imprecise. See"'
 48.                 di as err ""
 49.                 di as err `"    {browse "https://www.statalist.org/forums/forum/general-stata-discussion/general/1418732"}"'
 50.                 di as err ""
 51.                 di as err `"Add option {cmd:noaltdef} to compare_gquantiles to skip this check."'
 52.                 count if `xtile' != `gxtile'
 53.                 sum `xtile' `gxtile' `diff'
 54.                 l `xtile' `gxtile' `diff' in 1/20
 55.             }
 56.             else {
 57.                 qui findfile xtile.ado
 58.                 di as err  "    compare_xtile (???)"                                                               ///
>                      _n(2) "Note: gquantiles xtile = `anything', altdef gave different levels to xtile, altdef."   ///
>                      _n(1) "However, gquantiles xtile = `anything' without altdef was the same.  On some systems," ///
>                      _n(1) "xtile.ado has a typo in line 135 that explains this. Please go to:"                    ///
>                      _n(2) `"    {stata doedit `"`r(fn)'"'}"'                                                      ///
>                      _n(2) "and change 'altdev' to 'altdef' (or add option {cmd:noaltdef} to compare_gquantiles)."
 59.             }
 60.             exit 198
 61.         }
 62.         else {
 63.             qui count if `xtile' != `gxtile'
 64.             local fail = `r(N)'
 65.             local warnings 1
 66.             if ( `=max(`=`fail' / _N' < 0.05, `fail' == 1)' & ("`wgt'" != "") ) {
 67.                 di as err "    compare_xtile (warning): gquantiles xtile = `anything' gave different levels to xtile"
 68.                 di as err ""
 69.                 di as err "using weights in xtile seems to give incorrect results under some" ///
>                     _n(1) "circumstances. Only `fail' / `=_N' xtiles were off."
 70.                 di as err ""
 71.             }
 72.             else {
 73.                 di as err "    compare_xtile (failed): gquantiles xtile = `anything' gave different levels to xtile"
 74.                 cap assert `xtile' == `fxtile'
 75.                 if ( _rc & (`rc_f' == 0) ) {
 76.                     di as txt "    (note: fastxtile also gave different levels)"
 77.                 }
 78.                 count if `xtile' != `gxtile'
 79.                 sum `xtile' `gxtile' `diff'
 80.                 l `xtile' `gxtile' `diff' in 1/20
 81.                 exit 198
 82.             }
 83.         }
 84.     }
 85. 
.     cap assert `xtile' == `fxtile'
 86.     if ( _rc & (`rc_f' == 0) ) {
 87.         di as txt "    (note: fastxtile gave different levels to xtile)"
 88.     }
 89. 
.     if ( ("`benchmode'" == "") & (`warnings' == 0) ) {
 90.         di as txt "    compare_xtile (passed): gquantiles xtile = `anything' was the same as xtile"
 91.         exit 0
 92.     }
 93. 
.     if ( ("`table'" != "") | ("`benchmode'" != "") ) {
 94.         local rs = `time_xtile'  / `time_gxtile'
 95.         local rf = `time_fxtile' / `time_gxtile'
 96.         di as txt "    `:di %5.3g `time_xtile'' | `:di %9.3g `time_fxtile'' | `:di %10.3g `time_gxtile'' | `:di %11.3g `rs'' | `:di %11.3g `rf'' | `anything' (`note')"
 97.     }
 98. end

. 
. capture program drop _compare_inner_pctile

. program _compare_inner_pctile
  1.     syntax anything [if] [in], [benchmode table qopts(str) reltol(real 1e-8) tol(real 1e-6) note(str) sorted wgt(str) *]
  2.     tempvar pctile pctpct gpctile gpctpct
  3. 
.     if ( "`sorted'" != "" ) {
  4.         cap sort `anything'
  5.         if ( _rc ) {
  6.             tempvar sort
  7.             qui gen double `sort' = `anything'
  8.             sort `sort'
  9.         }
 10.     }
 11. 
.     if ( "`benchmode'" == "" ) {
 12.         local gqopts `qopts' genp(`gpctpct')
 13.         local  qopts `qopts' genp(`pctpct')
 14.     }
 15.     else {
 16.         local gqopts `qopts'
 17.         local  qopts `qopts'
 18.     }
 19. 
.     timer clear
 20.     timer on 43
 21.     qui gquantiles `gpctile' = `anything' `if' `in' `wgt', pctile `gqopts' `options'
 22.     timer off 43
 23.     qui timer list
 24.     local time_gpctile = r(t43)
 25. 
.     timer clear
 26.     timer on 42
 27.     qui pctile `pctile' = `anything' `if' `in' `wgt', `qopts'
 28.     timer off 42
 29.     qui timer list
 30.     local time_pctile = r(t42)
 31. 
.     local warnings 0
 32.     tempvar comp
 33.     qui gen double `comp' = .
 34.     * qui gen double `comp' = `pctile' * `reltol' if !mi(`pctile')
.     * qui replace `comp'    = cond(`comp' < `tol', `tol', `comp') if !mi(`pctile')
.     cap assert abs(`pctile' - `gpctile') < `tol' | (mi(`pctile') & mi(`gpctile'))
 35.     if ( _rc ) {
 36.         di as err "    compare_pctile (warning): gquantiles pctile = `anything' gave different percentiles to pctile (tol = `:di %6.2g `tol'')"
 37.         if ( strpos("`qopts'", "altdef") ) {
 38.                 di as err ""
 39.                 di as err `"Stata's built-in pctile, altdef can sometimes be imprecise. See"'
 40.                 di as err ""
 41.                 di as err `"    {browse "https://www.statalist.org/forums/forum/general-stata-discussion/general/1418732"}"'
 42.                 di as err ""
 43.                 di as err `"Add option {cmd:noaltdef} to compare_gquantiles to skip this check."'
 44.         }
 45. 
.         tempvar gpctile2
 46.         qui gen `:type `pctile'' `gpctile2' = `gpctile'
 47.         qui replace `comp' = abs(1 - `gpctile2' / `pctile') if !mi(`pctile') & !mi(`gpctile')
 48.         cap assert abs(`comp') < `reltol' | (mi(`pctile') & mi(`gpctile'))
 49.         * cap assert abs(`pctile' - `gpctile2') < `comp' | ( mi(`pctile') & mi(`gpctile'))
.         if ( _rc ) {
 50.             local warnings 1
 51.             qui sum `comp' if !(abs(`comp') < `reltol' | (mi(`pctile') & mi(`gpctile')))
 52.             local error: disp %9.3g `r(mean)'
 53.             local error `error'
 54.             qui count if !mi(`pctile') | !mi(`gpctile')
 55.             local total = `r(N)'
 56.             qui count if !(abs(`comp') < `reltol' | (mi(`pctile') & mi(`gpctile')))
 57.             local fail = `r(N)'
 58.             if ( `=max(`=`fail' / `total'' < 0.1, `fail' == 1)' & ("`wgt'" != "") ) {
 59.                 di as err "    compare_pctile (warning): gquantiles pctile = `anything' gave different percentiles to pctile (reltol = `:di %6.2g `reltol'')"
 60.                 di as err ""
 61.                 di as err "using weights in pctile seems to give incorrect results under some"     ///
>                     _n(1) "circumstances. Only `fail' / `total' pctiles were off by an average of" ///
>                     _n(1) "`error'. This is likely due to this quirk in pctile rather than an"     ///
>                     _n(1) "error in your code (pay special attention to the weighted gcollapse"    ///
>                     _n(1) "comparison to check)"
 62.                 di as err ""
 63.             }
 64.             else {
 65.                 di as err "    compare_pctile (failed): gquantiles pctile = `anything' gave different percentiles to pctile (reltol = `:di %6.2g `reltol'')"
 66.                 di as err "`fail' / `total' failed"
 67.                 drop if mi(`pctile') & mi(`gpctile')
 68.                 hashsort -`comp' -`pctile' -`gpctile'
 69.                 sum `pctile' `gpctile' `comp'
 70.                 l `pctile' `gpctile' `comp' in 1/20
 71.                 exit 198
 72.             }
 73.         }
 74.     }
 75. 
.     if ( "`benchmode'" == "" ) {
 76.         cap assert abs(`pctpct' - `gpctpct') < `tol' | ( mi(`pctpct') & mi(`gpctpct'))
 77.         if ( _rc ) {
 78.             tempvar gpctpct2
 79.             qui gen `:type `pctpct'' `gpctpct2' = `gpctpct'
 80.             * qui replace `comp' = `pctpct' * `reltol' if !mi(`pctpct')
.             * qui replace `comp' = cond(`comp' < `tol', `tol', `comp') if !mi(`pctpct')
.             * cap assert abs(`pctpct' - `gpctpct2') < `comp' | ( mi(`pctile') & mi(`gpctile'))
.             qui replace `comp' = abs(1 - `gpctpct2' / `pctpct') if !mi(`pctpct') & !mi(`gpctpct')
 81.             cap assert abs(`comp') < `reltol' | (mi(`pctpct') & mi(`gpctpct'))
 82.             if ( _rc ) {
 83.                 di as err "    compare_pctile (failed): gquantiles pctile = `anything', genp() gave different percentages to pctile, genp()"
 84.                 drop if mi(`pctpct') & mi(`gpctpct')
 85.                 hashsort -`comp'
 86.                 sum `pctpct' `gpctpct' `comp'
 87.                 l `pctpct' `gpctpct' in 1/20
 88.                 exit 198
 89.             }
 90.             else if ( `warnings' == 0 ) {
 91.                 di as txt "    compare_pctile (passed): gquantiles pctile = `anything', genp() gave similar results to pctile (reltol = `:di %6.2g `reltol'', tol = `:di %6.2g `tol'')"
 92.             }
 93.         }
 94.         else if ( `warnings' == 0 ) {
 95.             di as txt "    compare_pctile (passed): gquantiles pctile = `anything', genp() gave similar results to pctile (reltol = `:di %6.2g `reltol'', tol = `:di %6.2g `tol'')"
 96.         }
 97.     }
 98. 
.     if ( ("`table'" != "") | ("`benchmode'" != "") ) {
 99.         local rs = `time_pctile'  / `time_gpctile'
100.         di as txt "    `:di %6.3g `time_pctile'' | `:di %10.3g `time_gpctile'' | `:di %11.3g `rs'' | `anything' (`note')"
101.     }
102. end

. 
. capture program drop _compare_inner__pctile

. program _compare_inner__pctile
  1.     syntax anything [if] [in], [benchmode table qopts(str) reltol(real 1e-8) tol(real 1e-6) note(str) sorted wgt(str) *]
  2.     tempvar exp
  3.     qui gen double `exp' = `anything'
  4. 
.     if ( "`sorted'" != "" ) {
  5.         sort `exp'
  6.     }
  7. 
.     timer clear
  8.     timer on 43
  9.     qui gquantiles `exp' `if' `in' `wgt', _pctile `qopts' `options'
 10.     timer off 43
 11.     qui timer list
 12.     local time_gpctile = r(t43)
 13.     local nq = `r(nqused)'
 14.     forvalues q = 1 / `nq' {
 15.         scalar qr_`q' = `r(r`q')'
 16.     }
 17. 
.     timer clear
 18.     timer on 42
 19.     qui _pctile `exp' `if' `in' `wgt', `qopts'
 20.     timer off 42
 21.     qui timer list
 22.     local time_pctile = r(t42)
 23.     forvalues q = 1 / `nq' {
 24.         scalar r_`q' = `r(r`q')'
 25.     }
 26. 
.     local warnings 0
 27.     forvalues q = 1 / `nq' {
 28.         if ( abs(scalar(qr_`q') - scalar(r_`q')) > `tol' ) {
 29. 
.             if ( "`wgt'" == "" ) {
 30.                 di as err "    compare__pctile (warning): gquantiles `anything', _pctile gave different percentiles to _pctile (tol = `:di %6.2g `tol'')"
 31.                 if ( strpos("`qopts'", "altdef") ) {
 32.                     di as err ""
 33.                     di as err `"Stata's built-in _pctile, altdef can sometimes be imprecise. See"'
 34.                     di as err ""
 35.                     di as err `"    {browse "https://www.statalist.org/forums/forum/general-stata-discussion/general/1418732"}"'
 36.                     di as err ""
 37.                     di as err `"Add option {cmd:noaltdef} to compare_gquantiles to skip this check."'
 38.                 }
 39.             }
 40. 
.             * scalar comp = `=scalar(r_`q')' * `reltol'
.             * scalar comp = cond(scalar(comp) < `tol', `tol', scalar(comp))
.             * if ( abs(scalar(qr_`q') - scalar(r_`q')) > `comp' ) {
.             if ( abs(1 - scalar(qr_`q') / scalar(r_`q')) > `reltol' ) {
 41.                 if ( "`wgt'" != "" ) {
 42.                     local ++warnings
 43.                     di as err "        compare__pctile (warning): `=scalar(r_`q')' (_pctile) vs `=scalar(qr_`q')'"
 44.                 }
 45.                 else {
 46.                     di as err "    compare__pctile (failed): gquantiles `anything', _pctile gave different percentiles to _pctile (reltol = `:di %6.2g `reltol'')"
 47.                     qui gquantiles `exp' `if' `in', _pctile `qopts' `options' method(1)
 48.                     local q1r_`q' = `r(r`q')'
 49.                     qui gquantiles `exp' `if' `in', _pctile `qopts' `options' method(2)
 50.                     local q2r_`q' = `r(r`q')'
 51.                     disp "_pctile r(`q') = `=scalar(r_`q')'"
 52.                     disp "gquantiles r(`q') = `=scalar(qr_`q')'"
 53.                     disp "gquantiles, method(1) r(`q') = `q1r_`q''"
 54.                     disp "gquantiles, method(2) r(`q') = `q2r_`q''"
 55.                     exit 198
 56.                 }
 57.             }
 58.         }
 59.         cap scalar drop qr_`q'
 60.         cap scalar drop r_`q'
 61.         cap scalar drop comp
 62.     }
 63. 
.     if ( "`benchmode'" == "" ) {
 64.         if ( `warnings' ) {
 65.             di as txt "    compare__pctile (warning): gquantiles `anything', _pctile gave different results to _pctile (reltol = `:di %6.2g `reltol'', tol = `:di %6.2g `tol'')"
 66.             di as err ""
 67.             di as err "using weights in _pctile seems to give incorrect results under some"    ///
>                 _n(1) "circumstances. The `warnings' _pctiles that were off are likely due to" ///
>                 _n(1) "this quirk in pctile rather than an error in your code (pay special"    ///
>                 _n(1) "attention to the weighted gcollapse comparison to check)"
 68.             di as err ""
 69.         }
 70.         else {
 71.             di as txt "    compare__pctile (passed): gquantiles `anything', _pctile gave similar results to _pctile (reltol = `:di %6.2g `reltol'', tol = `:di %6.2g `tol'')"
 72.         }
 73.     }
 74. 
.     if ( ("`table'" != "") | ("`benchmode'" != "") ) {
 75.         local rs = `time_pctile'  / `time_gpctile'
 76.         di as txt "    `:di %7.3g `time_pctile'' | `:di %10.3g `time_gpctile'' | `:di %11.3g `rs'' | `anything' (`note')"
 77.     }
 78. end

. 
. ***********************************************************************
. *                                Misc                                 *
. ***********************************************************************
. 
. capture program drop gquantiles_switch_sanity

. program gquantiles_switch_sanity
  1.     args ver
  2. 
.     di _n(1) "{hline 80}"
  3.     if ( "`ver'" == "v1" ) {
  4.         di "gquantiles_switch_sanity (many duplicates)"
  5.     }
  6.     else if ( "`ver'" == "v2" ) {
  7.         di "gquantiles_switch_sanity (some duplicates)"
  8.     }
  9.     else {
 10.         di "gquantiles_switch_sanity (no duplicates)"
 11.     }
 12.     di "{hline 80}" _n(1)
 13. 
. 
.     di as txt ""
 14.     di as txt "Testing whether gquantiles method switch code is sane for quantiles."
 15.     di as txt "The table shows the actual ratio between method 1 and method 2 vs the"
 16.     di as txt "ratio used to decide between the two. Method 2 is chosen if the ratio"
 17.     di as txt "in parenthesis is > 1, and method 1 is chosen otherwise."
 18.     di as txt ""
 19.     di as txt "    - Good choice: Both are larger than 1 or less than 1."
 20.     di as txt "    - OK choice: Actual ratio is close to 1 and decision ratio was off."
 21.     di as txt "    - Poor choice: Actual ratio is far from 1 and decision ratio was off."
 22.     di as txt ""
 23.     di as txt "I think 'far from one' is a deviation of 0.2 or more."
 24.     di as txt ""
 25.     di as txt "|            N |   nq |        pctile | pctile, binfreq | pctile, binfreq, xtile |"
 26.     di as txt "| ------------ | ---- | ------------- | --------------- | ---------------------- |"
 27.     _gquantiles_switch_nq   50000  2 `ver'
 28.     _gquantiles_switch_nq   50000  5 `ver'
 29.     _gquantiles_switch_nq   50000 10 `ver'
 30.     _gquantiles_switch_nq   50000 20 `ver'
 31.     _gquantiles_switch_nq   50000 30 `ver'
 32.     _gquantiles_switch_nq   50000 40 `ver'
 33.     di as txt "| ------------ | ---- | ------------- | --------------- | ---------------------- |"
 34.     _gquantiles_switch_nq  500000  2 `ver'
 35.     _gquantiles_switch_nq  500000  5 `ver'
 36.     _gquantiles_switch_nq  500000 10 `ver'
 37.     _gquantiles_switch_nq  500000 20 `ver'
 38.     _gquantiles_switch_nq  500000 30 `ver'
 39.     _gquantiles_switch_nq  500000 40 `ver'
 40.     di as txt "| ------------ | ---- | ------------- | --------------- | ---------------------- |"
 41.     _gquantiles_switch_nq 5000000  2 `ver'
 42.     _gquantiles_switch_nq 5000000  5 `ver'
 43.     _gquantiles_switch_nq 5000000 10 `ver'
 44.     _gquantiles_switch_nq 5000000 20 `ver'
 45.     _gquantiles_switch_nq 5000000 30 `ver'
 46.     _gquantiles_switch_nq 5000000 40 `ver'
 47. 
.     di as txt ""
 48.     di as txt "Testing whether gquantiles method switch code is sane for cutoffs."
 49.     di as txt "The table shows the actual ratio between method 1 and method 2 vs the"
 50.     di as txt "ratio used to decide between the two. Method 2 is chosen if the ratio"
 51.     di as txt "in parenthesis is > 1, and method 1 is chosen otherwise. Note that"
 52.     di as txt "there is no quantile selection here, so the rule must be different."
 53.     di as txt ""
 54.     di as txt "    - Good choice: Both are larger than 1 or less than 1."
 55.     di as txt "    - OK choice: Actual ratio is close to 1 and decision ratio was off."
 56.     di as txt "    - Poor choice: Actual ratio is far from 1 and decision ratio was off."
 57.     di as txt ""
 58.     di as txt "I think 'far from one' is a deviation of 0.2 or more."
 59.     di as txt ""
 60.     di as txt "|            N | cutoffs |        pctile | pctile, binfreq | pctile, binfreq, xtile |"
 61.     di as txt "| ------------ | ------- | ------------- | --------------- | ---------------------- |"
 62.     _gquantiles_switch_cutoffs   50000    2 `ver'
 63.     _gquantiles_switch_cutoffs   50000   50 `ver'
 64.     _gquantiles_switch_cutoffs   50000  100 `ver'
 65.     _gquantiles_switch_cutoffs   50000  200 `ver'
 66.     _gquantiles_switch_cutoffs   50000  500 `ver'
 67.     _gquantiles_switch_cutoffs   50000 1000 `ver'
 68.     di as txt "| ------------ | ------- | ------------- | --------------- | ---------------------- |"
 69.     _gquantiles_switch_cutoffs  500000    2 `ver'
 70.     _gquantiles_switch_cutoffs  500000   50 `ver'
 71.     _gquantiles_switch_cutoffs  500000  100 `ver'
 72.     _gquantiles_switch_cutoffs  500000  200 `ver'
 73.     _gquantiles_switch_cutoffs  500000  500 `ver'
 74.     _gquantiles_switch_cutoffs  500000 1000 `ver'
 75.     di as txt "| ------------ | ------- | ------------- | --------------- | ---------------------- |"
 76.     _gquantiles_switch_cutoffs 5000000    2 `ver'
 77.     _gquantiles_switch_cutoffs 5000000   50 `ver'
 78.     _gquantiles_switch_cutoffs 5000000  100 `ver'
 79.     _gquantiles_switch_cutoffs 5000000  200 `ver'
 80.     _gquantiles_switch_cutoffs 5000000  500 `ver'
 81.     _gquantiles_switch_cutoffs 5000000 1000 `ver'
 82. end

. 
. capture program drop _gquantiles_switch_cutoffs

. program _gquantiles_switch_cutoffs
  1.     args n nq ver
  2. 
.     qui {
  3.         clear
  4.         if ( "`ver'" == "v1" ) {
  5.             set obs `=`n' / 5000'
  6.             gen x = rnormal() * 100
  7.             expand 5000
  8.         }
  9.         else if ( "`ver'" == "v2" ) {
 10.             set obs `n'
 11.             gen x = int(rnormal() * 100)
 12.         }
 13.         else {
 14.             set obs `n'
 15.             gen x = rnormal() * 100
 16.         }
 17.         gen c = rnormal() in 1 / `nq'
 18. 
.         timer clear
 19.         timer on 42
 20.         gquantiles __p1 = x, pctile c(c) v bench(2) method(1)
 21.         local est_ratio_1 = r(method_ratio)
 22.         timer off 42
 23.         qui timer list
 24.         local time_m1_1 = r(t42)
 25. 
.         timer clear
 26.         timer on 42
 27.         gquantiles __p2 = x, pctile c(c) v bench(2) method(2)
 28.         timer off 42
 29.         qui timer list
 30.         local time_m2_1 = r(t42)
 31. 
.         drop __*
 32.         timer clear
 33.         timer on 42
 34.         gquantiles __p1 = x, pctile binfreq(__bf1) c(c) v bench(2) method(1)
 35.         local est_ratio_2 = r(method_ratio)
 36.         timer off 42
 37.         qui timer list
 38.         local time_m1_2 = r(t42)
 39. 
.         timer clear
 40.         timer on 42
 41.         gquantiles __p2 = x, pctile binfreq(__bf2) c(c) v bench(2) method(2)
 42.         timer off 42
 43.         qui timer list
 44.         local time_m2_2 = r(t42)
 45. 
.         drop __*
 46.         timer clear
 47.         timer on 42
 48.         gquantiles __p1 = x, pctile xtile(__x1) binfreq(__bf1) c(c) v bench(2) method(1)
 49.         local est_ratio_3 = r(method_ratio)
 50.         timer off 42
 51.         qui timer list
 52.         local time_m1_3 = r(t42)
 53. 
.         timer clear
 54.         timer on 42
 55.         gquantiles __p2 = x, pctile xtile(__x2) binfreq(__bf2) c(c) v bench(2) method(2)
 56.         timer off 42
 57.         qui timer list
 58.         local time_m2_3 = r(t42)
 59.     }
 60. 
.     local ratio_1 = `time_m1_1' / `time_m2_1'
 61.     local ratio_2 = `time_m1_2' / `time_m2_2'
 62.     local ratio_3 = `time_m1_3' / `time_m2_3'
 63. 
.         local est_ratio_3 = r(method_ratio)
 64.     di as txt "| `:di %12.0gc `=_N'' | `:di %7.0g `nq'' | `:di %5.3g `ratio_1'' (`:di %5.3g `est_ratio_1'') | `:di %7.3g `ratio_2'' (`:di %5.3g `est_ratio_2'') | `:di %13.3g `ratio_3'' (`:di %6.3g `est_ratio_3'') |
 65. end

. 
. capture program drop _gquantiles_switch_nq

. program _gquantiles_switch_nq
  1.     args n nq ver
  2. 
.     qui {
  3.         clear
  4.         if ( "`ver'" == "v1" ) {
  5.             set obs `=`n' / 5000'
  6.             gen x = rnormal() * 100
  7.             expand 5000
  8.         }
  9.         else if ( "`ver'" == "v2" ) {
 10.             set obs `n'
 11.             gen x = int(rnormal() * 100)
 12.         }
 13.         else {
 14.             set obs `n'
 15.             gen x = rnormal() * 100
 16.         }
 17. 
.         timer clear
 18.         timer on 42
 19.         gquantiles __p1 = x, pctile nq(`nq') v bench(2) method(1)
 20.         local est_ratio_1 = r(method_ratio)
 21.         timer off 42
 22.         qui timer list
 23.         local time_m1_1 = r(t42)
 24. 
.         timer clear
 25.         timer on 42
 26.         gquantiles __p2 = x, pctile nq(`nq') v bench(2) method(2)
 27.         timer off 42
 28.         qui timer list
 29.         local time_m2_1 = r(t42)
 30. 
.         drop __*
 31.         timer clear
 32.         timer on 42
 33.         gquantiles __p1 = x, pctile binfreq(__bf1) nq(`nq') v bench(2) method(1)
 34.         local est_ratio_2 = r(method_ratio)
 35.         timer off 42
 36.         qui timer list
 37.         local time_m1_2 = r(t42)
 38. 
.         timer clear
 39.         timer on 42
 40.         gquantiles __p2 = x, pctile binfreq(__bf2) nq(`nq') v bench(2) method(2)
 41.         timer off 42
 42.         qui timer list
 43.         local time_m2_2 = r(t42)
 44. 
.         drop __*
 45.         timer clear
 46.         timer on 42
 47.         gquantiles __p1 = x, pctile xtile(__x1) binfreq(__bf1) nq(`nq') v bench(2) method(1)
 48.         local est_ratio_3 = r(method_ratio)
 49.         timer off 42
 50.         qui timer list
 51.         local time_m1_3 = r(t42)
 52. 
.         timer clear
 53.         timer on 42
 54.         gquantiles __p2 = x, pctile xtile(__x2) binfreq(__bf2) nq(`nq') v bench(2) method(2)
 55.         timer off 42
 56.         qui timer list
 57.         local time_m2_3 = r(t42)
 58.     }
 59. 
.     local ratio_1 = `time_m1_1' / `time_m2_1'
 60.     local ratio_2 = `time_m1_2' / `time_m2_2'
 61.     local ratio_3 = `time_m1_3' / `time_m2_3'
 62. 
.     local est_ratio_3 = r(method_ratio)
 63.     di as txt "| `:di %12.0gc `=_N'' | `:di %4.0g `nq'' | `:di %5.3g `ratio_1'' (`:di %5.3g `est_ratio_1'') | `:di %7.3g `ratio_2'' (`:di %5.3g `est_ratio_2'') | `:di %13.3g `ratio_3'' (`:di %6.3g `est_ratio_3'') |
 64. end

. capture program drop checks_gquantiles_by

. program checks_gquantiles_by
  1.     syntax, [tol(real 1e-6) NOIsily *]
  2.     di _n(1) "{hline 80}" _n(1) "checks_gqantiles_by, `options'" _n(1) "{hline 80}" _n(1)
  3. 
.     qui `noisily' gen_data, n(500)
  4.     qui expand 10
  5.     qui `noisily' random_draws, random(2)
  6.     gen long   ix  = _n
  7.     gen double ru  = runiform() * 100
  8.     gen double rn  = rnormal() * 100
  9.     gen byte   one = 1
 10. 
.     local options `options'  `noisily'
 11. 
.     _checks_gquantiles_by one, `options'
 12. 
.     _checks_gquantiles_by -str_12,              `options'
 13.     _checks_gquantiles_by str_12 -str_32,       `options'
 14.     _checks_gquantiles_by str_12 -str_32 str_4, `options'
 15. 
.     _checks_gquantiles_by -double1,                 `options'
 16.     _checks_gquantiles_by double1 -double2,         `options'
 17.     _checks_gquantiles_by double1 -double2 double3, `options'
 18. 
.     _checks_gquantiles_by -int1,           `options'
 19.     _checks_gquantiles_by int1 -int2,      `options'
 20.     _checks_gquantiles_by int1 int2  int3, `options'
 21. 
.     _checks_gquantiles_by -int1 -str_32 -double1,                                         `options'
 22.     _checks_gquantiles_by int1 -str_32 double1 -int2 str_12 -double2,                     `options'
 23.     _checks_gquantiles_by int1 -str_32 double1 -int2 str_12 -double2 int3 -str_4 double3, `options'
 24. 
.     if ( `c(stata_version)' >= 14.1 ) {
 25.         local forcestrl: disp cond(strpos(lower("`c(os)'"), "windows"), "forcestrl", "")
 26.         _checks_gquantiles_by -strL1,             `options' `forcestrl'
 27.         _checks_gquantiles_by strL1 -strL2,       `options' `forcestrl'
 28.         _checks_gquantiles_by strL1 strL2  strL3, `options' `forcestrl'
 29.     }
 30. end

. 
. capture program drop _checks_gquantiles_by

. program _checks_gquantiles_by
  1.     syntax [anything], [tol(real 1e-6) NOIsily *]
  2.     local by by(`anything')
  3. 
.     cap gquantiles, `by'
  4.     assert _rc == 198
  5.     cap gquantiles, `by' xtile
  6.     assert _rc == 198
  7.     cap gquantiles, `by' _pctile
  8.     assert _rc == 198
  9.     cap gquantiles, `by' pctile
 10.     assert _rc == 198
 11. 
.     checks_inner_gquantiles_by ru,      `by' `options'
 12.     checks_inner_gquantiles_by ix,      `by' `options'
 13.     checks_inner_gquantiles_by random1, `by' `options'
 14. 
.     checks_inner_gquantiles_by int1^2 + 3 * double1,          `by' `options'
 15.     checks_inner_gquantiles_by log(double1) + 2 * int1,       `by' `options'
 16.     checks_inner_gquantiles_by exp(double3) + int1 * double3, `by' `options'
 17. end

. 
. capture program drop checks_inner_gquantiles_by

. program checks_inner_gquantiles_by
  1.     syntax anything, [tol(real 1e-6) NOIsily wgt(str) *]
  2.     cap drop __*
  3.     local qui = cond("`noisily'" == "", "qui", "noisily")
  4. 
.     local 0 `anything' `wgt', `options'
  5.     syntax anything [aw fw pw], [*]
  6. 
.     `qui' {
  7.         gquantiles __p1 = `anything' `wgt', pctile `options' nq(10) strict
  8.         l in 1/10
  9. 
.         gquantiles __p2 = `anything' `wgt', pctile `options' cutpoints(__p1) strict
 10.         gquantiles __p3 = `anything' `wgt', pctile `options' quantiles(10 30 50 70 90) strict
 11.         gquantiles __p4 = `anything' `wgt', pctile `options' cutoffs(10 30 50 70 90) strict
 12.         cap gquantiles __p5 = `anything' `wgt', pctile `options' cutquantiles(rn) strict
 13.         assert _rc == 198
 14.         gquantiles __p5 = `anything' `wgt', pctile `options' cutquantiles(ru) strict
 15. 
. 
.         fasterxtile __fx1 = `anything' `wgt', `options' nq(10)
 16.         fasterxtile __fx2 = `anything' `wgt', `options' cutpoints(__p1)
 17.         fasterxtile __fx3 = `anything', `options' cutpoints(__p1) altdef
 18.         fasterxtile __fx4 = `anything', `options' nq(10) altdef
 19. 
. 
.         gquantiles __x1 = `anything' `wgt', xtile `options' nq(10)
 20.         gquantiles __x2 = `anything' `wgt', xtile `options' cutpoints(__p1)
 21.         gquantiles __x3 = `anything' `wgt', xtile `options' quantiles(10 30 50 70 90)
 22.         gquantiles __x4 = `anything' `wgt', xtile `options' cutoffs(10 30 50 70 90)
 23.         cap gquantiles __x5 = `anything' `wgt', xtile `options' cutquantiles(rn)
 24.         assert _rc == 198
 25.         gquantiles __x5 = `anything' `wgt', xtile `options' cutquantiles(ru)
 26. 
.         cap gquantiles `anything' `wgt', _pctile `options' nq(10)
 27.         assert _rc == 198
 28.     }
 29. 
.     if ( "`wgt'" != "" ) exit 0
 30. 
.     `qui' {
 31.         cap gquantiles __p1 = `anything', pctile altdef binfreq `options' nq(10) replace strict
 32.         assert _rc == 198
 33.         gquantiles __p1 = `anything', pctile altdef `options' nq(10) replace strict
 34. 
.         drop __*
 35.         cap gquantiles __p1 = `anything' in 1/5, pctile altdef binfreq `options' nq(10) replace strict
 36.         assert inlist(_rc, 198, 2000)
 37.         cap gquantiles __p1 = `anything' in 1/5, pctile altdef binfreq(__bf1) `options' nq(10) replace strict
 38.         assert inlist(_rc, 0, 2000)
 39.         gquantiles __p1 = `anything', pctile altdef `options' nq(10) replace strict
 40. 
.         cap gquantiles __p2 = `anything', pctile altdef binfreq `options' cutpoints(__p1) strict
 41.         assert _rc == 198
 42.         cap gquantiles __p2 = `anything', pctile altdef binpct `options' cutpoints(__p1) strict
 43.         assert _rc == 198
 44.         cap gquantiles __p2 = `anything', pctile altdef binfreq(__f2) binpct(__fp2) `options' cutpoints(__p1) strict
 45.         assert _rc == 198
 46.         gquantiles __p2 = `anything', pctile altdef binfreq(__f2) `options' cutpoints(__p1) strict
 47.         cap gquantiles __p2 = `anything' in 10 / 20, pctile altdef binfreq(__f2) `options' cutpoints(__p1) replace strict
 48.         assert inlist(_rc, 0, 2000)
 49.         cap gquantiles __p2 = `anything' in 10 / 20, pctile altdef binfreq(__f2) `options' cutpoints(__p1) replace cutifin cutby strict
 50.         assert inlist(_rc, 0, 198, 2000)
 51.         cap gquantiles __p2_ii = `anything' if inlist(_n, 1, 3, 7), pctile altdef `options' cutifin cutpoints(__p1) strict
 52.         gquantiles __p2 = `anything', pctile altdef binfreq(__f2) `options' cutpoints(__p1) replace strict
 53. 
. 
.         gquantiles __p3 = `anything', pctile altdef `options' quantiles(10 30 50 70 90) strict
 54.         gquantiles __p4 = `anything', pctile altdef `options' cutoffs(10 30 50 70 90) strict
 55. 
. 
.         cap gquantiles __p5 = `anything', pctile altdef binpct `options' cutquantiles(ru) strict
 56.         assert _rc == 198
 57.         cap gquantiles __p5 = `anything', pctile altdef binfreq `options' cutquantiles(ru) strict
 58.         assert _rc == 198
 59.         gquantiles __p5 = `anything', pctile altdef binfreq(__f5) `options' cutquantiles(ru) strict
 60.         cap gquantiles __p5 = `anything', pctile altdef binfreq(__f5) `options' cutquantiles(ru) strict
 61.         assert inlist(_rc, 110, 198)
 62.         gquantiles __p5 = `anything', pctile altdef binfreq(__f5) `options' cutquantiles(ru) replace strict
 63. 
.         gquantiles __x1 = `anything', pctile altdef binfreq(__bf1) `options' nq(10) replace strict
 64. 
. 
. 
.         gquantiles __x1 = `anything', pctile altdef binfreq(__bf1) `options' nq(10) replace strict
 65.         cap gquantiles __x1 = `anything' in 1/5, pctile altdef binfreq(__bf1) `options' nq(10) replace strict
 66.         assert inlist(_rc, 0, 2000)
 67.         cap gquantiles __x1 = `anything' in 1/5, pctile altdef binfreq(__bf1) `options' nq(10) replace strict
 68.         assert inlist(_rc, 0, 2000)
 69. 
.         cap gquantiles __x2 = `anything', pctile altdef binfreq `options' cutpoints(__p1) strict
 70.         assert _rc == 198
 71.         cap gquantiles __x2 = `anything', pctile altdef binpct `options' cutpoints(__p1) strict
 72.         assert _rc == 198
 73.         gquantiles __x2 = `anything', pctile altdef binfreq(__xf2) `options' cutpoints(__p1) strict
 74.         cap gquantiles __x2 = `anything', pctile altdef binfreq(__xf2) `options' cutpoints(__p1) strict
 75.         assert inlist(_rc, 110, 198)
 76.         gquantiles __x2 = `anything', pctile altdef binfreq(__xf2) `options' cutpoints(__p1) replace strict
 77. 
.         gquantiles __x3 = `anything', pctile altdef binfreq(__xf3) `options' quantiles(10 30 50 70 90) strict
 78.         gquantiles __x4 = `anything', pctile altdef binfreq(__xf4) `options' cutoffs(10 30 50 70 90) strict
 79. 
.         cap gquantiles __x5 = `anything', pctile altdef binpct `options' cutquantiles(ru) strict
 80.         assert _rc == 198
 81.         cap gquantiles __x5 = `anything', pctile altdef binfreq `options' cutquantiles(ru) strict
 82.         assert _rc == 198
 83.         gquantiles __x5 = `anything', pctile altdef binfreq(__xf5) `options' cutquantiles(ru) strict
 84.         cap gquantiles __x5 = `anything', pctile altdef binfreq(__xf5) `options' cutquantiles(ru) strict
 85.         assert inlist(_rc, 110, 198)
 86.         gquantiles __x5 = `anything', pctile altdef binfreq(__xf5) `options' cutquantiles(ru) replace strict
 87.     }
 88. end

. 
. ***********************************************************************
. *                        Internal Consistency                         *
. ***********************************************************************
. 
. capture program drop compare_gquantiles_by

. program compare_gquantiles_by
  1.     syntax, [NOIsily noaltdef wgt(str) *]
  2.     local options `options' `noisily'
  3. 
.     gettoken wfun wfoo: wgt
  4.     local wfun `wfun'
  5.     local wfoo `wfoo'
  6.     if ( `"`wfoo'"' == "mix" ) {
  7.         local wcall_a "[aw = unif_0_100]"
  8.         local wcall_f "[fw = int_unif_0_100]"
  9.         local wcall_p "[pw = float_unif_0_1]"
 10.         local wgen_a qui gen unif_0_100     = 100 * runiform() if mod(_n, 100)
 11.         local wgen_f qui gen int_unif_0_100 = int(100 * runiform()) if mod(_n, 100)
 12.         local wgen_p qui gen float_unif_0_1 = runiform() if mod(_n, 100)
 13. 
.         * This is for the benefit of comparing with fasterxtile from egenmisc
.         local wcall_stata [aw = unif_0_100_]
 14.         local wgen_stata  qui gen unif_0_100_ = 100 * runiform()
 15.     }
 16. 
.     compare_gquantiles_stata_by, n(5000) bench(10) `altdef' `options' wgt(`wcall_stata') wgen(`wgen_stata')
 17. 
.     local N = trim("`: di %15.0gc _N'")
 18.     di _n(1) "{hline 80}" _n(1) "consistency_gquantiles_pctile_xtile_by, N = `N', `options'" _n(1) "{hline 80}" _n(1)
 19. 
.     qui `noisily' gen_data, n(5000)
 20.     qui expand 10
 21.     qui `noisily' random_draws, random(3) double
 22.     gen long   ix = _n
 23.     gen double ru = runiform() * 100
 24.     qui replace ix = . if mod(_n, 5000) == 0
 25.     qui replace ru = . if mod(_n, 5000) == 0
 26.     gen byte    one = 1
 27.     qui sort random3
 28.     `wgen_a'
 29.     `wgen_f'
 30.     `wgen_p'
 31. 
.     _consistency_inner_gquantiles_by ru, `options' wgt(`wcall_f')
 32.     _consistency_inner_gquantiles_by ru in 1 / 5, `options' corners wgt(`wcall_p')
 33. 
.     local in1 = ceil((0.00 + 0.25 * runiform()) * `=_N')
 34.     local in2 = ceil((0.75 + 0.25 * runiform()) * `=_N')
 35.     local from = cond(`in1' < `in2', `in1', `in2')
 36.     local to   = cond(`in1' > `in2', `in1', `in2')
 37.     _consistency_inner_gquantiles_by ru      in `from' / `to', `options' wgt(`wcall_a')
 38.     _consistency_inner_gquantiles_by random1 in `from' / `to', `options' wgt(`wcall_f')
 39. 
.     _consistency_inner_gquantiles_by ru      if random2 > 0, `options' wgt(`wcall_p')
 40.     _consistency_inner_gquantiles_by random1 if random2 > 0, `options' wgt(`wcall_a')
 41. 
.     local in1 = ceil((0.00 + 0.25 * runiform()) * `=_N')
 42.     local in2 = ceil((0.75 + 0.25 * runiform()) * `=_N')
 43.     local from = cond(`in1' < `in2', `in1', `in2')
 44.     local to   = cond(`in1' > `in2', `in1', `in2')
 45.     _consistency_inner_gquantiles_by ru      `anything' if random2 < 0 in `from' / `to', `options' wgt(`wcall_f')
 46.     _consistency_inner_gquantiles_by random1 `anything' if random2 < 0 in `from' / `to', `options' wgt(`wcall_p')
 47. 
.     local N = trim("`: di %15.0gc _N'")
 48.     di _n(1) "{hline 80}" _n(1) "consistency_gquantiles_internals_by, N = `N', `options'" _n(1) "{hline 80}" _n(1)
 49. end

. 
. capture program drop _consistency_inner_gquantiles_by

. program _consistency_inner_gquantiles_by
  1.     syntax anything [if] [in], [tol(real 1e-15) tolpct(real 1e-6) NOIsily corners *]
  2.     _consistency_inner_full_by one               `if' `in', `options' var(`anything')
  3.     _consistency_inner_full_by ix                `if' `in', `options' var(`anything')
  4. 
.     _consistency_inner_full_by -str_12           `if' `in', `options' var(`anything')
  5.     _consistency_inner_full_by -double1          `if' `in', `options' var(`anything')
  6. 
.     _consistency_inner_full_by str_12 -str_32    `if' `in', `options' var(`anything')
  7.     _consistency_inner_full_by double1 -double2  `if' `in', `options' var(`anything')
  8. 
.     _consistency_inner_full_by -int1             `if' `in', `options' var(`anything')
  9.     _consistency_inner_full_by int1 -int2        `if' `in', `options' var(`anything')
 10. 
.     local forcestrl: disp cond(strpos(lower("`c(os)'"), "windows"), "forcestrl", "")
 11.     if ( `c(stata_version)' >= 14.1 ) {
 12.         _consistency_inner_full_by -strL1        `if' `in', `options' var(`anything') `forcestrl'
 13.         _consistency_inner_full_by strL1 -strL2  `if' `in', `options' var(`anything') `forcestrl'
 14.     }
 15. 
.     _consistency_inner_full_by str_12 -str_4 double2 -double3 `if' `in', `options' var(`anything')
 16.     if ( `c(stata_version)' >= 14.1 ) {
 17.         _consistency_inner_full_by str_12 -str_4 double2 -double3 strL3 `if' `in', `options' var(`anything') `forcestrl'
 18.     }
 19. end

. 
. capture program drop _consistency_inner_full_by

. program _consistency_inner_full_by
  1.     syntax anything [if] [in], [var(str) wgt(str) *]
  2. 
.     if ( "`wgt'" != "" ) {
  3.         local wtxt " `wgt'"
  4.     }
  5. 
.     if ( "`if'`in'" != "" ) {
  6.         local ifinstr ""
  7.         if ( "`if'" != "" ) local ifinstr `ifinstr' [`if']
  8.         if ( "`in'" != "" ) local ifinstr `ifinstr' [`in']
  9.     }
 10. 
.     local hlen = length("Internal consistency_by for gquantiles `var', by(`anything') `ifinstr'`wtxt'")
 11.     di as txt _n(1) "Internal consistency_by for gquantiles `var', by(`anything') `ifinstr'`wtxt'" _n(1) "{hline `hlen'}" _n(1)
 12. 
.     _consistency_inner_nq_by `var' `if' `in', by(`anything') `options' wgt(`wgt') nq(2)
 13.     _consistency_inner_nq_by `var' `if' `in', by(`anything') `options' wgt(`wgt') nq(20)
 14.     _consistency_inner_nq_by `var' `if' `in', by(`anything') `options' wgt(`wgt') nq(`=_N + 1')
 15. 
.     if ( `"`wgt'"' != "" ) exit 0
 16. 
.     _consistency_inner_nq_by `var' `if' `in', by(`anything') altdef `options' nq(2)
 17.     _consistency_inner_nq_by `var' `if' `in', by(`anything') altdef `options' nq(20)
 18.     _consistency_inner_nq_by `var' `if' `in', by(`anything') altdef `options' nq(`=_N + 1')
 19. end

. 
. capture program drop _consistency_inner_nq_by

. program _consistency_inner_nq_by
  1.     syntax anything [if] [in], [tol(real 1e-15) tolpct(real 1e-6) nq(real 2) by(str) wgt(str) *]
  2.     cap drop __* _*
  3.     local rc = 0
  4. 
.     local options `options' by(`by')
  5. 
.     qui {
  6.     gquantiles __p1 = `anything' `if' `in' `wgt', strict pctile `options' binfreq(__f1) xtile(__x1) nq(`nq') genp(__g1)
  7.     gquantiles __p2 = `anything' `if' `in' `wgt', strict pctile `options' binfreq(__f2) xtile(__x2) cutpoints(__p1) cutby
  8.     gquantiles __p5 = `anything' `if' `in' `wgt', strict pctile `options' binfreq(__f5) xtile(__x5) cutquantiles(__g1) genp(__g5) cutby
  9. 
.     _compare_inner_nqvars_by `tol' `tolpct'
 10.     if ( `rc' ) {
 11.         di as err "    consistency_internal_gquantiles_by (failed): pctile via nq(`nq') `options' not all equal"
 12.         exit `rc'
 13.     }
 14. 
.     cap drop __*
 15.     gquantiles __x1 = `anything' `if' `in' `wgt', strict xtile `options' binfreq(__f1) pctile(__p1) nq(`nq') genp(__g1)
 16.     gquantiles __x2 = `anything' `if' `in' `wgt', strict xtile `options' binfreq(__f2) pctile(__p2) cutpoints(__p1) cutby
 17.     gquantiles __x5 = `anything' `if' `in' `wgt', strict xtile `options' binfreq(__f5) pctile(__p5) cutquantiles(__g1) cutby
 18. 
.     _compare_inner_nqvars_by `tol' `tolpct'
 19.     if ( `rc' ) {
 20.         di as err "    consistency_internal_gquantiles_by (failed): xtile via nq(`nq') `options' not all equal"
 21.         exit `rc'
 22.     }
 23.     }
 24. 
.     di as txt "    consistency_internal_gquantiles_by (passed): xtile, pctile, and _pctile via nq(`nq') `options' (tol = `:di %6.2g `tol'')"
 25. end

. 
. capture program drop _compare_inner_nqvars_by

. program _compare_inner_nqvars_by, rclass
  1.     args tol tolpct
  2.     local rc = 0
  3. 
.     * NOTE(mauricio): Percentiles need not be super precise. The
.     * important property is that they preserve xtile and binfreq, which
.     * is why that tolerance is super small whereas the tolerance for
.     * percentiles is larger. // 2017-11-19 12:33 EST
. 
.     _compare_inner_nqvars_rc_by __p1 __p2 `tolpct'
  4.     local rc = max(`rc', `r(rc)')
  5.     _compare_inner_nqvars_rc_by __f1 __f2 `tol'
  6.     local rc = max(`rc', `r(rc)')
  7.     _compare_inner_nqvars_rc_by __x1 __x2 `tol'
  8.     local rc = max(`rc', `r(rc)')
  9. 
.     local rc = 0
 10.     _compare_inner_nqvars_rc_by __p1 __p5 `tolpct'
 11.     local rc = max(`rc', `r(rc)')
 12.     _compare_inner_nqvars_rc_by __f1 __f5 `tol'
 13.     local rc = max(`rc', `r(rc)')
 14.     _compare_inner_nqvars_rc_by __x1 __x5 `tol'
 15.     local rc = max(`rc', `r(rc)')
 16. 
.     c_local rc `rc'
 17. end

. 
. capture program drop _compare_inner_nqvars_rc_by

. program _compare_inner_nqvars_rc_by, rclass
  1.     args v1 v2 tol
  2.     cap assert `v1' == `v2'
  3.     if ( _rc ) {
  4.         cap assert abs(`v1' - `v2') < `tol' | mi(`v1')
  5.     }
  6.     return scalar rc = _rc
  7. end

. 
. ***********************************************************************
. *                            Compare Stata                            *
. ***********************************************************************
. 
. capture program drop bench_gquantiles_by

. program bench_gquantiles_by
  1.     syntax, [bench(int 10) n(int 5000) *]
  2.     compare_inner_quantiles_by, n(`n') bench(`bench') benchmode qopts(nq(10))
  3.     compare_inner_quantiles_by, n(`n') bench(`bench') benchmode nlist(2(2)20)
  4.     compare_inner_quantiles_by, n(`n') bench(`bench') benchmode nqlist(2(2)20)
  5. end

. 
. capture program drop compare_gquantiles_stata_by

. program compare_gquantiles_stata_by
  1.     syntax, [bench(int 10) n(int 5000) noaltdef *]
  2. 
.     if ( "`altdef'" != "noaltdef" ) {
  3.     compare_inner_quantiles_by, n(`n') bench(`bench') qopts(altdef nq(10)) `options'
  4.     compare_inner_quantiles_by, n(`n') bench(`bench') qopts(altdef nq(2))  `options'
  5.     }
  6. 
.     compare_inner_quantiles_by, n(`n') bench(`bench') qopts(nq(10)) `options'
  7.     compare_inner_quantiles_by, n(`n') bench(`bench') qopts(nq(2))  `options'
  8. end

. 
. capture program drop compare_inner_quantiles_by

. program compare_inner_quantiles_by
  1.     syntax, [bench(int 100) n(real 500) benchmode wgen(str) *]
  2.     local options `options' `benchmode' j(`n')
  3. 
.     qui `noisily' gen_data, n(`n')
  4.     qui expand `bench'
  5.     qui `noisily' random_draws, random(2) double
  6.     gen long   ix = _n
  7.     gen double ru = runiform() * 100
  8.     gen double rn = rnormal() * 100
  9.     qui replace ix = . if mod(_n, `n') == 0
 10.     qui replace ru = . if mod(_n, `n') == 0
 11.     qui replace rn = . if mod(_n, `n') == 0
 12.     qui sort random1
 13.     `wgen'
 14. 
.     _compare_inner_gquantiles_by, `options'
 15. 
.     if ( "`benchmode'" == "" ) {
 16.         local in1 = ceil((0.00 + 0.25 * runiform()) * `=_N')
 17.         local in2 = ceil((0.75 + 0.25 * runiform()) * `=_N')
 18.         local from = cond(`in1' < `in2', `in1', `in2')
 19.         local to   = cond(`in1' > `in2', `in1', `in2')
 20.         _compare_inner_gquantiles_by in `from' / `to', `options'
 21. 
.         _compare_inner_gquantiles_by if random2 > 0, `options'
 22. 
.         local in1 = ceil((0.00 + 0.25 * runiform()) * `=_N')
 23.         local in2 = ceil((0.75 + 0.25 * runiform()) * `=_N')
 24.         local from = cond(`in1' < `in2', `in1', `in2')
 25.         local to   = cond(`in1' > `in2', `in1', `in2')
 26.         _compare_inner_gquantiles_by `anything' if random2 < 0 in `from' / `to', `options'
 27.     }
 28. end

. 
. ***********************************************************************
. *                             Comparisons                             *
. ***********************************************************************
. 
. capture program drop _compare_inner_gquantiles_by

. program _compare_inner_gquantiles_by
  1.     syntax [if] [in], [tol(real 1e-6) NOIsily qopts(str) nqlist(numlist) nlist(numlist) benchmode table J(real 0) wgt(str) *]
  2. 
.     if ( "`if'`in'" != "" ) {
  3.         local ifinstr ""
  4.         if ( "`if'" != "" ) local ifinstr `ifinstr' [`if']
  5.         if ( "`in'" != "" ) local ifinstr `ifinstr' [`in']
  6.     }
  7. 
.     qui gunique int1
  8.     local N = trim("`: di %15.0gc _N'")
  9.     local J = trim("`: di %15.0gc `j''")
 10. 
.     if ( "`nqlist'`nlist'" == "" ) {
 11.         local options `options' `benchmode' `table' qopts(`qopts') wgt(`wgt')
 12. 
.         di as txt _n(1)
 13.         di as txt "Compare xtile"
 14.         di as txt "     - if in:  `ifinstr'"
 15.         di as txt "     - weight: `wgt'"
 16.         di as txt "     - obs:    `N'"
 17.         di as txt "     - J:      `J'"
 18.         di as txt "     - call:   fcn xtile = x, by(varlist) opts"
 19.         di as txt "     - opts:   `qopts'"
 20.         di as txt "     - x:      x ~ N(0, 100)"
 21.         if ( ("`benchmode'" != "") | ("`table'" != "") ) {
 22.         di as txt "          | egenmisc  |            |             |             |        "
 23.         di as txt "   astile | fastxtile | gquantiles | ratio (a/g) | ratio (f/g) | varlist"
 24.         di as txt "   ------ | --------- | ---------- | ----------- | ----------- | -------"
 25.         }
 26. 
.         _compare_inner_xtile_by str_12          `if' `in',  `options'
 27.         _compare_inner_xtile_by str_12 str_32   `if' `in',  `options'
 28. 
.         _compare_inner_xtile_by double1         `if' `in', `options'
 29.         _compare_inner_xtile_by double1 double2 `if' `in', `options'
 30. 
.         _compare_inner_xtile_by int1            `if' `in', `options'
 31.         _compare_inner_xtile_by int1 int2       `if' `in', `options'
 32. 
.         local forcestrl: disp cond(strpos(lower("`c(os)'"), "windows"), "forcestrl", "")
 33.         if ( `c(stata_version)' >= 14.1 ) {
 34.             _compare_inner_xtile_by strL1       `if' `in', `options' `forcestrl'
 35.             _compare_inner_xtile_by strL1 strL2 `if' `in', `options' `forcestrl'
 36.         }
 37.     }
 38.     else if ( "`nqlist'" != "" ) {
 39.         local options `options' `benchmode' `table' wgt(`wgt')
 40. 
.         di as txt _n(1)
 41.         di as txt "Compare xtile"
 42.         di as txt "     - if in:   `ifinstr'"
 43.         di as txt "     - weight:  `wgt'"
 44.         di as txt "     - obs:     `N'"
 45.         di as txt "     - J:       `J'"
 46.         di as txt "     - call:    fcn xtile = x, by(varlist)"
 47.         di as txt "     - varlist: int1"
 48.         di as txt "     - x:       x ~ N(0, 100)"
 49.         if ( ("`benchmode'" != "") | ("`table'" != "") ) {
 50.         di as txt "         |        | egenmisc  |            |             |            "
 51.         di as txt "      nq | astile | fastxtile | gquantiles | ratio (a/g) | ratio (f/g)"
 52.         di as txt "  ------ | ------ | --------- | ---------- | ----------- | -----------"
 53.         }
 54.         foreach nq in `nqlist' {
 55.             _compare_inner_xtile_by int1 `if' `in', `options' nq(`nq')
 56.         }
 57.     }
 58.     else if ( "`nlist'" != "" ) {
 59.         local from = `j'
 60.         local to   = `=_N'
 61.         local exp  = round(`to' / `from', 1)
 62.         local step = round(`exp' / 10, 1)
 63. 
.         qui `noisily' gen_data, n(`j') skipstr
 64.         qui `noisily' random_draws, random(1) double
 65. 
.         di as txt _n(1)
 66.         di as txt "Compare xtile"
 67.         di as txt "     - if in:   `ifinstr'"
 68.         di as txt "     - weight:  `wgt'"
 69.         di as txt "     - J:       `J'"
 70.         di as txt "     - call:    fcn xtile = x, by(varlist) nq(10)"
 71.         di as txt "     - varlist: int1"
 72.         di as txt "     - x:       x ~ N(0, 100)"
 73.         if ( ("`benchmode'" != "") | ("`table'" != "") ) {
 74.         di as txt "               |        | egenmisc  |            |             |            "
 75.         di as txt "             N | astile | fastxtile | gquantiles | ratio (a/g) | ratio (f/g)"
 76.         di as txt "  ------------ | ------ | --------- | ---------- | ----------- | -----------"
 77.         }
 78. 
.         local options `options' `benchmode' `table' wgt(`wgt')
 79.         forvalues i = `step'(`step')`exp' {
 80.         preserve
 81.             qui expand `i'
 82.             gen double rn = rnormal() * 100
 83.             qui sort random1
 84.             _compare_inner_xtile_by int1 `if' `in', `options' n(`=_N')
 85.         restore
 86.         }
 87.     }
 88. end

. 
. capture program drop _compare_inner_xtile_by

. program _compare_inner_xtile_by
  1.     syntax anything [if] [in], [benchmode table qopts(str) sorted FORCEcmp nq(str) n(str) wgt(str) *]
  2.     tempvar axtile fxtile gxtile
  3. 
.     local 0 `anything' `if' `in' `wgt', `options'
  4.     syntax anything [if] [in] [aw fw pw/], [*]
  5.     if ( "`weight'" != "" ) local weight weight(`exp')
  6. 
.     if ( "`sorted'" != "" ) {
  7.         cap sort `anything'
  8.         if ( _rc ) {
  9.             tempvar sort
 10.             qui gen double `sort' = `anything'
 11.             sort `sort'
 12.         }
 13.     }
 14. 
.     if ( "`nq'" != "" ) local qopts `qopts' nq(`nq')
 15. 
.     timer clear
 16.     timer on 43
 17.     qui gquantiles `gxtile' = rn `if' `in' `wgt', `qopts' by(`anything') `options' xtile
 18.     timer off 43
 19.     qui timer list
 20.     local time_gxtile = r(t43)
 21. 
.     if ( "`wgt'" == "" ) {
 22.         timer clear
 23.         timer on 42
 24.         cap astile `axtile' = rn `if' `in', `qopts' by(`anything')
 25.         local rc_a = _rc
 26.         timer off 42
 27.         qui timer list
 28.         local time_axtile = r(t42)
 29.     }
 30.     else local rc_a = 9
 31. 
.     timer clear
 32.     timer on 44
 33.     cap egen `fxtile' = fastxtile(rn) `if' `in', `qopts' by(`anything') `weight'
 34.     local rc_f = _rc
 35.     timer off 44
 36.     qui timer list
 37.     local time_fxtile = r(t44)
 38. 
.     if ( `rc_f' ) {
 39.         local time_fxtile = .
 40.         di "(note: fastxtile[egenmisc] failed)"
 41.     }
 42. 
.     if ( `rc_a' ) {
 43.         local time_fxtile = .
 44.         di "(note: astile failed)"
 45.     }
 46. 
.     cap assert `gxtile' == `axtile'
 47.     if ( _rc & (`rc_a' == 0) ) {
 48.         * if ( "`forcecmp'" == "" ) {
.         *     di as err "    compare_xtile_by (failed): gquantiles, by(`anything') gave different levels to astile"
.         *     exit 198
.         * }
.         * else {
.         *     di as txt "    (note: astile gave different levels)"
.         * }
.         di as txt "    (note: astile gave different levels)"
 49.     }
 50. 
.     cap assert `gxtile' == `fxtile'
 51.     if ( _rc & (`rc_f' == 0) ) {
 52.         if ( "`forcecmp'" == "" ) {
 53.             tempvar diff
 54.             qui gen `diff' = `fxtile' - `gxtile'
 55.             gtoplevelsof `diff', nowarn
 56.             qui count if `fxtile' != `gxtile'
 57.             local fail = `r(N)'
 58.             if ( `=max(`=`fail' / _N' < 0.05, `fail' == 1)' & ("`wgt'" != "") ) {
 59.                 di as err "    compare_xtile_by (warning): gquantiles, by(`anything') gave different levels to fastxtile[egenmisc]"
 60.                 di as err ""
 61.                 di as err "using weights in fastxtile[egenmisc] seems to give incorrect results" ///
>                     _n(1) "under some circumstances. Only `fail' / `=_N' xtiles were off."
 62.                 di as err ""
 63.             }
 64.             else {
 65.                 di as err "    compare_xtile_by (failed): gquantiles, by(`anything') gave different levels to fastxtile[egenmisc]"
 66.                 exit 198
 67.             }
 68.         }
 69.         else {
 70.             di as txt "    (note: fastxtile[egenmisc] gave different levels)"
 71.         }
 72.     }
 73.     else if ( "`benchmode'" == "" ) {
 74.         di as txt "    compare_xtile_by (passed): gquantiles, by(`anything') was the same as fastxtile[egenmisc]"
 75.     }
 76. 
.     if ( ("`table'" != "") | ("`benchmode'" != "") ) {
 77.         local rs = `time_axtile' / `time_gxtile'
 78.         local rf = `time_fxtile' / `time_gxtile'
 79.         if ( "`n'" != "" ) {
 80.         di as txt "  `:di %12.0gc `n'' | `:di %6.3g `time_axtile'' | `:di %9.3g `time_fxtile'' | `:di %10.3g `time_gxtile'' | `:di %11.3g `rs'' | `:di %11.3g `rf''"
 81.         }
 82.         else if ( "`nq'" != "" ) {
 83.         di as txt "  `:di %6.0g `nq'' | `:di %6.3g `time_axtile'' | `:di %9.3g `time_fxtile'' | `:di %10.3g `time_gxtile'' | `:di %11.3g `rs'' | `:di %11.3g `rf''"
 84.         }
 85.         else {
 86.         di as txt "    `:di %5.3g `time_axtile'' | `:di %9.3g `time_fxtile'' | `:di %10.3g `time_gxtile'' | `:di %11.3g `rs'' | `:di %11.3g `rf'' | `anything'"
 87.         }
 88.     }
 89. end

. capture program drop checks_gegen

. program checks_gegen
  1.     syntax, [tol(real 1e-6) NOIsily *]
  2.     di _n(1) "{hline 80}" _n(1) "checks_egen, `options'" _n(1) "{hline 80}" _n(1)
  3. 
.     qui `noisily' gen_data, n(5000)
  4.     qui expand 2
  5.     qui `noisily' random_draws, random(2)
  6.     gen long ix = _n
  7. 
.     checks_inner_egen, `options'
  8. 
.     checks_inner_egen -str_12,              `options' hash(0)
  9.     checks_inner_egen str_12 -str_32,       `options' hash(1)
 10.     checks_inner_egen str_12 -str_32 str_4, `options' hash(2)
 11. 
.     checks_inner_egen -double1,                 `options' hash(2)
 12.     checks_inner_egen double1 -double2,         `options' hash(0)
 13.     checks_inner_egen double1 -double2 double3, `options' hash(1)
 14. 
.     checks_inner_egen -int1,           `options' hash(1)
 15.     checks_inner_egen int1 -int2,      `options' hash(2)
 16.     checks_inner_egen int1 -int2 int3, `options' hash(0)
 17. 
.     checks_inner_egen -int1 -str_32 -double1,                                         `options'
 18.     checks_inner_egen int1 -str_32 double1 -int2 str_12 -double2,                     `options'
 19.     checks_inner_egen int1 -str_32 double1 -int2 str_12 -double2 int3 -str_4 double3, `options'
 20. 
.     if ( `c(stata_version)' >= 14.1 ) {
 21.         local forcestrl: disp cond(strpos(lower("`c(os)'"), "windows"), "forcestrl", "")
 22.         checks_inner_egen -strL1,             `options' hash(1) `forcestrl'
 23.         checks_inner_egen strL1 -strL2,       `options' hash(2) `forcestrl'
 24.         checks_inner_egen strL1 -strL2 strL3, `options' hash(0) `forcestrl'
 25.     }
 26. 
.     clear
 27.     set obs 10
 28.     gen x = .
 29.     gegen y = total(x), missing
 30.     gegen z = total(x)
 31.     assert y == .
 32.     assert z == 0
 33. 
.     clear
 34.     gen x = 1
 35.     cap gegen y = group(x)
 36.     assert _rc == 111
 37. 
.     clear
 38.     set obs 10
 39.     gen x = 1
 40.     gegen y = group(x) if x > 1
 41.     gegen z = tag(x)   if x > 1
 42. 
.     clear
 43.     sysuse auto
 44.     tempfile auto
 45.     save `"`auto'"'
 46. 
.     clear
 47.     set obs 5
 48.     gen x = _n
 49.     gen strL y = "hi" + string(mod(_n, 2)) + char(9) + char(0)
 50.     replace y  = fileread(`"`auto'"') in 1
 51.     cap gegen z = group(y)
 52.     if ( `c(stata_version)' < 14.1 ) {
 53.         assert _rc == 17002
 54.     }
 55.     else {
 56.         assert _rc == 17005
 57.     }
 58. 
.     clear
 59.     cap gegen
 60.     assert _rc == 100
 61.     cap gegen x = group(y)
 62.     assert _rc == 111
 63.     set obs 10
 64.     gen x = .
 65.     gegen y = group(x)
 66.     assert y == .
 67.     gegen y = group(x), missing replace
 68.     assert y == 1
 69. 
.     clear
 70.     set obs 10
 71.     gen x = _n
 72.     gegen y = group(x) if 0
 73.     assert y == .
 74.     gegen z = group(x) if 1
 75.     assert z == x
 76.     gegen z = group(x) in 1 / 3, replace
 77.     assert z == x | mi(z)
 78.     gegen z = group(x) in 8, replace
 79.     assert z == 1 | mi(z)
 80. 
.     gegen z = sum(x) in 1 / 3, by(x) replace
 81.     assert z == x | mi(z)
 82.     gegen z = sum(x) if x == 7, by(x) replace
 83.     assert z == x | mi(z)
 84.     gegen z = count(x) if x == 8, by(x) replace
 85.     assert z == 1 | mi(z)
 86. 
.     gegen z = count(z) if x == 8, by(z) replace
 87.     assert z[8] == 1
 88.     assert mi(z) | _n == 8
 89.     gegen z = group(z) in 8 / 9, replace missing
 90.     assert z == (x - 7) | mi(z)
 91.     gegen z = tag(z) in 7 / 10, replace missing
 92.     assert z[7] == 1
 93.     assert z[8] == 1
 94.     assert z[9] == 1
 95.     assert (z == 0) | z == 1
 96.     gegen z = sum(z) in 2 / 9, replace
 97.     assert z == 3 | inlist(_n, 1, 10)
 98.     gegen z = sum(x* z*) in 2 / 9, replace
 99.     assert z == `=4 * (2 + 9) + 8 * 3' | inlist(_n, 1, 10)
100.     gegen z = sum(x* z*) if 0, replace
101.     assert z == .
102.     gegen z = sum(x* z*) if 1, replace
103.     assert z != .
104.     cap gegen z = sum(x* z*) if 1
105.     assert _rc == 110
106. 
.     clear
107.     set obs 10
108.     gen x = 1
109.     gen w = .
110.     gegen z = sum(x) [w = w]
111.     drop z
112.     replace w = 0
113.     gegen z = sum(x) [w = w]
114.     drop z
115.     gegen z = sum(x) [w = w] if w == 3.14
116. 
.     clear
117.     set obs 10
118.     gen byte x = _n
119.     replace x = . in 1/5
120.     gen y = mi(x)
121.     gegen s = nansum(x)    , by(y)
122.     gegen ns = sum(x)      , by(y)
123.     gegen nm = nmissing(x) , by(y)
124.     gegen f_s = nansum(x)    [fw = 1314], by(y)
125.     gegen f_ns = sum(x)      [fw = 1314], by(y)
126.     gegen f_nm = nmissing(x) [fw = 1314], by(y)
127.     gegen a_s = nansum(x)    [aw = 13.14], by(y)
128.     gegen a_ns = sum(x)      [aw = 13.14], by(y)
129.     gegen a_nm = nmissing(x) [aw = 13.14], by(y)
130.     gegen p_s = nansum(x)    [pw = 987654321], by(y)
131.     gegen p_ns = sum(x)      [pw = 987654321], by(y)
132.     gegen p_nm = nmissing(x) [pw = 987654321], by(y)
133.     assert cond(mi(x), mi(s) & mi(f_s) & mi(a_s), !mi(s) & !mi(f_s) & !mi(a_s))
134.     assert cond(mi(x), (nm == 5) & (a_nm == 5) & (f_nm == 5 * 1314) & (p_nm == 5 * 987654321), (nm == 0) & (a_nm == 0) & (f_nm == 0) & (p_nm == 0))
135. 
.     * rank
.     * ----
. 
.     clear
136.     set obs 10000
137.     gen x = ceil(runiform() * 10)
138.     gen g = round(_n / 100)
139. 
.      egen double rankx_def1 = rank(x)
140.     gegen double rankx_def2 = rank(x)
141. 
.      egen rankx_track1 = rank(x), track
142.     gegen rankx_track2 = rank(x), ties(track)
143. 
.      egen rankx_field1 = rank(x), field
144.     gegen rankx_field2 = rank(x), ties(field)
145. 
.      egen long rankx_uniq1 = rank(x), uniq
146.     gegen long rankx_uniq2 = rank(x), ties(uniq)
147. 
.     gegen rankx_uniq3 = rank(x), ties(stable)
148. 
.      egen double rankx_group_def1 = rank(x), by(g)
149.     gegen double rankx_group_def2 = rank(x), by(g)
150. 
.      egen rankx_group_track1 = rank(x), by(g) track
151.     gegen rankx_group_track2 = rank(x), by(g) ties(track)
152. 
.      egen rankx_group_field1 = rank(x), by(g) field
153.     gegen rankx_group_field2 = rank(x), by(g) ties(field)
154. 
.      egen long rankx_group_uniq1 = rank(x), by(g) uniq
155.     gegen long rankx_group_uniq2 = rank(x), by(g) ties(uniq)
156. 
.     gegen rankx_group_uniq3 = rank(x), by(g) ties(stable)
157. 
.     assert (rankx_def1   == rankx_def2)
158.     assert (rankx_track1 == rankx_track2)
159.     assert (rankx_field1 == rankx_field2)
160. 
.     sort x, stable
161.     assert rankx_uniq3 == _n
162. 
.     gisid rankx_uniq1
163.     gisid rankx_uniq2
164. 
.     assert (rankx_group_def1   == rankx_group_def2)
165.     assert (rankx_group_track1 == rankx_group_track2)
166.     assert (rankx_group_field1 == rankx_group_field2)
167. 
.     cap drop ix
168.     sort g x, stable
169.     by g: gen ix = _n
170.     assert rankx_group_uniq3 == ix
171. 
.     gisid g rankx_group_uniq1
172.     gisid g rankx_group_uniq2
173. 
.     gegen double rankx_def2 = rank(x) [fw = 1], replace
174.     gegen rankx_track2      = rank(x) [fw = 1], replace ties(track)
175.     gegen rankx_field2      = rank(x) [fw = 1], replace ties(field)
176.     gegen long rankx_uniq2  = rank(x) [fw = 1], replace ties(uniq)
177.     gegen rankx_uniq3       = rank(x) [fw = 1], replace ties(stable)
178. 
.     gegen double rankx_group_def2 = rank(x) [fw = 1], replace by(g)
179.     gegen rankx_group_track2      = rank(x) [fw = 1], replace by(g) ties(track)
180.     gegen rankx_group_field2      = rank(x) [fw = 1], replace by(g) ties(field)
181.     gegen long rankx_group_uniq2  = rank(x) [fw = 1], replace by(g) ties(uniq)
182.     gegen rankx_group_uniq3       = rank(x) [fw = 1], replace by(g) ties(stable)
183. 
.     assert (rankx_def1   == rankx_def2)
184.     assert (rankx_track1 == rankx_track2)
185.     assert (rankx_field1 == rankx_field2)
186. 
.     sort x, stable
187.     assert rankx_uniq3 == _n
188. 
.     gisid rankx_uniq1
189.     gisid rankx_uniq2
190. 
.     assert (rankx_group_def1   == rankx_group_def2)
191.     assert (rankx_group_track1 == rankx_group_track2)
192.     assert (rankx_group_field1 == rankx_group_field2)
193. 
.     cap drop ix
194.     sort g x, stable
195.     by g: gen ix = _n
196.     assert rankx_group_uniq3 == ix
197. 
.     gisid g rankx_group_uniq1
198.     gisid g rankx_group_uniq2
199. 
.     clear
200.     set obs 10
201.     gen x = rnormal()
202.     gen fw = _n
203.     gen aw = runiform() * 5
204.     gen pw = runiform()
205.     gen iw = rnormal()
206.     replace fw = . in 5
207.     replace x  = . in 3
208. 
.     gegen r1_def    = rank(x) [fw = fw], ties(def)
209.     gegen r1_field  = rank(x) [fw = fw], ties(field)
210.     gegen r1_track  = rank(x) [fw = fw], ties(track)
211.     gegen r1_uniq   = rank(x) [fw = fw], ties(uniq)
212.     gegen r1_stable = rank(x) [fw = fw], ties(stable)
213. 
.     gegen r2 = rank(x) [aw = aw]
214.     gegen r3 = rank(x) [pw = pw]
215.     gegen r4 = rank(x) [iw = iw]
216. 
.     gisid r1_uniq if !mi(r1_uniq)
217.     gisid r1_stable if !mi(r1_stable)
218. 
.     expand fw
219. 
.     gegen r_def    = rank(x) if !mi(fw), ties(def)
220.     gegen r_field  = rank(x) if !mi(fw), ties(field)
221.     gegen r_track  = rank(x) if !mi(fw), ties(track)
222. 
.     assert r_def    == r1_def
223.     assert r_field  == r1_field
224.     assert r_track  == r1_track
225. 
.     egen e_def    = rank(x) if !mi(fw)
226.     egen e_field  = rank(x) if !mi(fw), field
227.     egen e_track  = rank(x) if !mi(fw), track
228. 
.     assert e_def    == r1_def
229.     assert e_field  == r1_field
230.     assert e_track  == r1_track
231. 
.     * cumsum
.     * ------
. 
.     clear
232.     set rmsg on
233.     set obs 1000000
234.     gen g = ceil(runiform() * 10)
235.     gen x = ceil(rnormal() * 10)
236.     gen y = ceil(rnormal() * 10)
237.     gen w = abs(round(rnormal() * 10, 0.1))
238.     gegen double cumx = cumsum(x) [aw = w], cumby(+) by(g)
239.     qui {
240.         sort g x, stable
241.         by g: gen double sumx = sum(x * w)
242.     }
243.     qui gen zz = reldif(sumx, cumx)
244.     qui sum zz, meanonly
245.     assert r(max) < 1e-8
246. 
.     sysuse auto, clear
247.     gen ix = _n
248. 
.     * fails
.     cap noi gegen cumprice = cumsum(price), cumby(+ +) replace
249.     assert _rc == 198
250.     cap noi gegen cumprice = cumsum(price), cumby(- +) replace
251.     assert _rc == 198
252.     cap noi gegen cumprice = cumsum(price), cumby(+ -) replace
253.     assert _rc == 198
254.     cap noi gegen cumprice = cumsum(price), cumby(+ _) replace
255.     assert _rc == 111
256.     cap noi gegen cumprice = cumsum(price), cumby(+ price weight) replace
257.     assert _rc == 198
258.     cap noi gegen cumprice = cumsum(price), cumby(+ make) replace
259.     assert _rc == 198
260.     cap noi gegen cumprice = cumsum(price), cumby(price) replace
261.     assert _rc == 7
262.     cap noi gegen cumprice = cumsum(price), cumby(price -) replace
263.     assert _rc == 7
264. 
.     sysuse auto, clear
265.     gen ix = _n
266. 
.     * 1. Basic
.     gegen cumprice = cumsum(price)
267.     gen sumprice = sum(price)
268.     assert (cumprice == sumprice)
269.     drop ???price
270. 
.     * 2. by()
.     gegen cumprice = cumsum(price), by(foreign)
271.     by foreign (ix), sort: gen sumprice = sum(price)
272.     assert (cumprice == sumprice)
273.     drop ???price
274. 
.     * 3. +
.     sort foreign price
275.     by foreign: gen sumprice = sum(price)
276.     sort foreign ix
277.     gegen cumprice = cumsum(price), by(foreign) cumby(+)
278.     assert (cumprice == sumprice)
279.     drop ???price
280. 
.     gegen cumprice = cumsum(rep78), by(foreign) cumby(+)
281.     sort foreign rep78 cumprice
282.     by foreign: gen sumprice = sum(rep78) if !mi(rep78)
283.     sort foreign ix
284.     assert (cumprice == sumprice)
285.     drop ???price
286. 
.     * 4. -
.     gsort foreign -price
287.     by foreign: gen sumprice = sum(price)
288.     sort foreign ix
289.     gegen cumprice = cumsum(price), by(foreign) cumby(-)
290.     assert (cumprice == sumprice)
291.     drop ???price
292. 
.     gegen cumprice = cumsum(rep78), by(foreign) cumby(-)
293.     gsort foreign -rep78 cumprice
294.     by foreign: gen sumprice = sum(rep78) if !mi(rep78)
295.     sort foreign ix
296.     assert (cumprice == sumprice)
297.     drop ???price
298. 
.     * 5. + mpg
.     sort foreign weight price
299.     by foreign: gen sumprice = sum(price)
300.     sort foreign ix
301.     gegen cumprice = cumsum(price), by(foreign) cumby(+ weight)
302.     assert (cumprice == sumprice)
303.     drop ???price
304. 
.     * 6. - mpg
.     gsort foreign -weight -price
305.     by foreign: gen sumprice = sum(price)
306.     sort foreign ix
307.     gegen cumprice = cumsum(price), by(foreign) cumby(- weight)
308.     assert (cumprice == sumprice)
309.     drop ???price
310. 
.     * 7. + rep78
.     sort foreign rep78 price
311.     by foreign: gen sumprice = sum(price) if !mi(rep78)
312.     sort foreign ix
313.     gegen cumprice = cumsum(price), by(foreign) cumby(+ rep78)
314.     assert (cumprice == sumprice)
315.     drop ???price
316. 
.     * 8. - rep78
.     gsort foreign -rep78 -price
317.     by foreign: gen sumprice = sum(price) if !mi(rep78)
318.     sort foreign ix
319.     gegen cumprice = cumsum(price), by(foreign) cumby(- rep78)
320.     assert (cumprice == sumprice)
321.     drop ???price
322. 
.     * 9. [fw = rep78]
.     sort foreign ix
323.     gen sumprice = price * rep78
324.     by foreign: replace sumprice = sum(sumprice) if !mi(rep78)
325.     gegen cumprice = cumsum(price) [fw = rep78], by(foreign)
326.     assert (cumprice == sumprice)
327.     drop ???price
328. 
.     * 10. + [fw = rep78]
.     gsort foreign price
329.     by foreign: gen sumprice = sum(price * rep78) if !mi(rep78)
330.     sort foreign ix
331.     gegen cumprice = cumsum(price) [fw = rep78], by(foreign) cumby(+)
332.     assert (cumprice == sumprice)
333.     drop ???price
334. 
.     * 11. - [fw = rep78]
.     gsort foreign -price
335.     by foreign: gen sumprice = sum(price * rep78) if !mi(rep78)
336.     sort foreign ix
337.     gegen cumprice = cumsum(price) [fw = rep78], by(foreign) cumby(-)
338.     assert (cumprice == sumprice)
339.     drop ???price
340. 
.     * 12. + mpg [fw = rep78]
.     sort foreign weight price
341.     by foreign: gen sumprice = sum(price * rep78) if !mi(rep78)
342.     sort foreign ix
343.     gegen cumprice = cumsum(price) [fw = rep78], by(foreign) cumby(+ weight)
344.     assert (cumprice == sumprice)
345.     drop ???price
346. 
.     * 13. - mpg [fw = rep78]
.     gsort foreign -weight -price
347.     by foreign: gen sumprice = sum(price * rep78) if !mi(rep78)
348.     sort foreign ix
349.     gegen cumprice = cumsum(price) [fw = rep78], by(foreign) cumby(- weight)
350.     assert (cumprice == sumprice)
351.     drop ???price
352. 
.     * Shift
.     * -----
. 
.     sysuse auto, clear
353.     gen ix = _n
354. 
.     cap noi gegen gprice3 = shift(price), by(foreign) shiftby(3.8)
355.     assert _rc == 7
356.     cap noi gegen gprice3 = shift(price), by(foreign) shiftby(-.1)
357.     assert _rc == 7
358.     cap noi gegen gprice3 = shift(price), by(foreign) shiftby(-)
359.     assert _rc == 7
360.     cap noi gegen gprice3 = shift(price), by(foreign) shiftby(wa)
361.     assert _rc == 7
362.     cap noi gegen gprice3 = shift(price), by(foreign)
363.     assert _rc == 198
364. 
.     gegen gprice_3 = shift(price), shiftby(-3) by(foreign)
365.     qui by foreign: gen price_3 = price[_n - 3]
366.     assert gprice_3 == price_3
367. 
.     gegen gprice3 = shift(price), shiftby(3) by(foreign)
368.     qui by foreign: gen price3 = price[_n + 3]
369.     assert gprice3 == price3
370. 
.     gegen gprice_6 = shift-6(price), by(foreign)
371.     qui by foreign: gen price_6 = price[_n - 6]
372.     assert gprice_6 == price_6
373. 
.     gegen gprice6 = shift+6(price), by(foreign)
374.     qui by foreign: gen price6 = price[_n + 6]
375.     assert gprice6 == price6
376. 
.     gegen gpricea = shift+0(price), by(foreign)
377.     gegen gpriceb = shift-0(price), by(foreign)
378.     gegen gpricec = shift|0(price), by(foreign)
379.     gegen gpriced = shift(price),   by(foreign) shiftby(0)
380. 
.     assert price == gpricea
381.     assert price == gpriceb
382.     assert price == gpricec
383.     assert price == gpriced
384. 
.     clear
385.     set rmsg on
386.     set obs 1000000
387.     gen g = ceil(runiform() * 10)
388.     gen x = ceil(rnormal() * 10)
389.     gen y = ceil(rnormal() * 10)
390.     gen w = abs(round(rnormal() * 10, 0.1))
391.     gen long ix = _n
392.     gegen gshiftx = shift(x) [aw = w], shiftby(-2) by(g)
393.     qui {
394.         gen byte now = mi(w) | w == 0
395.         sort g now, stable
396.         by g now: gen `:type x' shiftx = x[_n - 2]
397.     }
398.     assert (gshiftx == shiftx) | now
399. 
.     * Gini
.     * ----
. 
.     clear
400.     set obs 1000
401.     gen g  = int(runiform() * 10)
402.     gen y  = exp(int(rnormal()) + g) - exp(g)
403.     gen fw = int(runiform() * 5)
404.     gen aw = runiform() * 10
405.     replace aw = . if mod(_n, 42) == 0
406.     replace y  = . if mod(_n, 81) == 0
407.     gen long ix = _n
408. 
.     quickGini y, by(g) gen(_qg1)
409.     quickGini y, by(g) gen(_qg2) dropneg
410.     quickGini y, by(g) gen(_qg3) keepneg
411. 
.     quickGini y [fw = 1], by(g) gen(_qg4)
412.     quickGini y [fw = 1], by(g) gen(_qg5) dropneg
413.     quickGini y [fw = 1], by(g) gen(_qg6) keepneg
414. 
.     quickGini y [fw = fw], by(g) gen(_qg7)
415.     quickGini y [fw = fw], by(g) gen(_qg8) dropneg
416.     quickGini y [fw = fw], by(g) gen(_qg9) keepneg
417. 
.     quickGini y [aw = aw], by(g) gen(_qg10)
418.     quickGini y [aw = aw], by(g) gen(_qg11) dropneg
419.     quickGini y [aw = aw], by(g) gen(_qg12) keepneg
420. 
.     gegen _ge1 = gini(y), by(g)
421.     gegen _ge2 = gini|dropneg(y),   by(g)
422.     gegen _ge3 = gini|keepneg(y),   by(g)
423.     gegen _ge4 = gini(y) if y >= 0, by(g)
424.     gegen _ge4 = firstnm(_ge4), by(g) replace
425. 
.     gegen _ge5 = gini(y) [fw = 1], by(g)
426.     gegen _ge6 = gini|dropneg(y) [fw = 1], by(g)
427.     gegen _ge7 = gini|keepneg(y) [fw = 1], by(g)
428.     gegen _ge8 = gini(y) if y >= 0 [fw = 1], by(g)
429.     gegen _ge8 = firstnm(_ge8), by(g) replace
430. 
.     gegen _ge9 = gini(y) [fw = fw], by(g)
431.     gegen _ge10 = gini|dropneg(y) [fw = fw], by(g)
432.     gegen _ge11 = gini|keepneg(y) [fw = fw], by(g)
433.     gegen _ge12 = gini(y) if y >= 0 [fw = fw], by(g)
434.     gegen _ge12 = firstnm(_ge12) if fw > 0 & !mi(fw), by(g) replace
435. 
.     gegen _ge13 = gini(y) [aw = aw], by(g)
436.     gegen _ge14 = gini|dropneg(y) [aw = aw], by(g)
437.     gegen _ge15 = gini|keepneg(y) [aw = aw], by(g)
438.     gegen _ge16 = gini(y) if y >= 0 [aw = aw], by(g)
439.     gegen _ge16 = firstnm(_ge16) if aw > 0 & !mi(aw), by(g) replace
440. 
.     assert reldif(_qg1,  _qg4) < 1e-6 | (mi(_qg1) & mi(_qg4))
441.     assert reldif(_qg2,  _qg5) < 1e-6 | (mi(_qg2) & mi(_qg5))
442.     assert reldif(_qg3,  _qg6) < 1e-6 | (mi(_qg3) & mi(_qg6))
443. 
.     assert reldif(_ge1,  _ge5) < 1e-6 | (mi(_ge1) & mi(_ge5))
444.     assert reldif(_ge2,  _ge6) < 1e-6 | (mi(_ge2) & mi(_ge6))
445.     assert reldif(_ge3,  _ge7) < 1e-6 | (mi(_ge3) & mi(_ge7))
446.     assert reldif(_ge4,  _ge8) < 1e-6 | (mi(_ge4) & mi(_ge8))
447. 
.     assert reldif(_qg1,  _ge1) < 1e-6 | (mi(_qg1) & mi(_ge1))
448.     assert reldif(_qg2,  _ge2) < 1e-6 | (mi(_qg2) & mi(_ge2))
449.     assert reldif(_qg2,  _ge2) < 1e-6 | (mi(_qg2) & mi(_ge4))
450.     assert reldif(_qg3,  _ge3) < 1e-6 | (mi(_qg3) & mi(_ge3))
451.     assert reldif(_ge4,  _ge2) < 1e-6 | (mi(_ge4) & mi(_ge2))
452. 
.     assert reldif(_qg4,  _ge5) < 1e-6 | (mi(_qg4) & mi(_ge5))
453.     assert reldif(_qg5,  _ge6) < 1e-6 | (mi(_qg5) & mi(_ge6))
454.     assert reldif(_qg5,  _ge6) < 1e-6 | (mi(_qg5) & mi(_ge8))
455.     assert reldif(_qg6,  _ge7) < 1e-6 | (mi(_qg6) & mi(_ge7))
456.     assert reldif(_ge8,  _ge6) < 1e-6 | (mi(_ge8) & mi(_ge6))
457. 
.     assert reldif(_qg7,  _ge9)  < 1e-6 | (mi(_qg7)  & mi(_ge9))
458.     assert reldif(_qg8,  _ge10) < 1e-6 | (mi(_qg8)  & mi(_ge10))
459.     assert reldif(_qg8,  _ge10) < 1e-6 | (mi(_qg8)  & mi(_ge12))
460.     assert reldif(_qg9,  _ge11) < 1e-6 | (mi(_qg9)  & mi(_ge11))
461.     assert reldif(_ge12, _ge10) < 1e-6 | (mi(_ge12) & mi(_ge10))
462. 
.     assert reldif(_qg10, _ge13) < 1e-6 | (mi(_qg10) & mi(_ge13))
463.     assert reldif(_qg11, _ge14) < 1e-6 | (mi(_qg11) & mi(_ge14))
464.     assert reldif(_qg11, _ge14) < 1e-6 | (mi(_qg11) & mi(_ge16))
465.     assert reldif(_qg12, _ge15) < 1e-6 | (mi(_qg12) & mi(_ge15))
466.     assert reldif(_ge16, _ge14) < 1e-6 | (mi(_ge16) & mi(_ge14))
467. 
. end

. 
. capture program drop checks_inner_egen

. program checks_inner_egen
  1.     syntax [anything], [tol(real 1e-6) wgt(str) *]
  2. 
.     local 0 `anything' `wgt', `options'
  3.     syntax [anything] [aw fw iw pw], [*]
  4. 
.     local percentiles 1 10 30.5 50 70.5 90 99
  5.     local selections  1 2 5 999999 -999999 -5 -2 -1
  6.     local stats nunique nmissing total sum mean geomean max min range count median iqr percent first last firstnm lastnm skew kurt gini gini|dropneg gini|keepneg
  7.     local skipbulk
  8.     if ( !inlist("`weight'", "pweight") )            local stats `stats' sd variance cv
  9.     if ( !inlist("`weight'", "pweight", "iweight") ) local stats `stats' semean
 10.     if (  inlist("`weight'", "fweight", "") )        local stats `stats' sebinomial sepoisson
 11. 
.     tempvar gvar
 12.     foreach fun of local stats {
 13.         `noisily' gegen `gvar' = `fun'(random1) `wgt', by(`anything') replace `options'
 14.         if ( "`weight'" == "" & !(`:list fun in skipbulk') ) {
 15.         `noisily' gegen `gvar' = `fun'(random*) `wgt', by(`anything') replace `options'
 16.         }
 17.     }
 18. 
.     foreach p in `percentiles' {
 19.         `noisily' gegen `gvar' = pctile(random1) `wgt', p(`p') by(`anything') replace `options'
 20.         if ( "`weight'" == "" ) {
 21.         `noisily' gegen `gvar' = pctile(random*) `wgt', p(`p') by(`anything') replace `options'
 22.         }
 23.     }
 24. 
.     if ( !inlist("`weight'", "iweight") ) {
 25.         foreach n in `selections' {
 26.             `noisily' gegen `gvar' = select(random1) `wgt', n(`n') by(`anything') replace `options'
 27.             if ( "`weight'" == "" ) {
 28.             `noisily' gegen `gvar' = select(random*) `wgt', n(`n') by(`anything') replace `options'
 29.             }
 30.         }
 31.     }
 32. 
.     if ( "`anything'" != "" ) {
 33.         `noisily' gegen `gvar' = tag(`anything')   `wgt', replace `options'
 34.         `noisily' gegen `gvar' = group(`anything') `wgt', replace `options'
 35.         `noisily' gegen `gvar' = count(1)          `wgt', by(`anything') replace `options'
 36.     }
 37. end

. 
. ***********************************************************************
. *                               Compare                               *
. ***********************************************************************
. 
. capture program drop compare_egen

. program compare_egen
  1.     syntax, [tol(real 1e-6) NOIsily *]
  2.     di _n(1) "{hline 80}" _n(1) "consistency_egen, `options'" _n(1) "{hline 80}" _n(1)
  3. 
.     qui `noisily' gen_data, n(500)
  4.     * qui expand 100
.     qui `noisily' random_draws, random(2) float
  5.     qui expand 10
  6. 
.     compare_inner_egen, `options' tol(`tol')
  7. 
.     compare_inner_egen str_12,              `options' tol(`tol') hash(1)
  8.     compare_inner_egen str_12 str_32,       `options' tol(`tol') hash(0) sort
  9.     compare_inner_egen str_12 str_32 str_4, `options' tol(`tol') hash(2) shuffle
 10. 
.     compare_inner_egen double1,                 `options' tol(`tol') hash(2) shuffle
 11.     compare_inner_egen double1 double2,         `options' tol(`tol') hash(1)
 12.     compare_inner_egen double1 double2 double3, `options' tol(`tol') hash(0) sort
 13. 
.     compare_inner_egen int1,           `options' tol(`tol') hash(0) sort
 14.     compare_inner_egen int1 int2,      `options' tol(`tol') hash(2) shuffle
 15.     compare_inner_egen int1 int2 int3, `options' tol(`tol') hash(1)
 16. 
.     compare_inner_egen int1 str_32 double1,                                        `options' tol(`tol')
 17.     compare_inner_egen int1 str_32 double1 int2 str_12 double2,                    `options' tol(`tol')
 18.     compare_inner_egen int1 str_32 double1 int2 str_12 double2 int3 str_4 double3, `options' tol(`tol')
 19. 
.     if ( `c(stata_version)' >= 14.1 ) {
 20.         local forcestrl: disp cond(strpos(lower("`c(os)'"), "windows"), "forcestrl", "")
 21.         compare_inner_egen strL1,             `options' tol(`tol') hash(0) `forcestrl' sort
 22.         compare_inner_egen strL1 strL2,       `options' tol(`tol') hash(2) `forcestrl' shuffle
 23.         compare_inner_egen strL1 strL2 strL3, `options' tol(`tol') hash(1) `forcestrl'
 24.     }
 25. end

. 
. capture program drop compare_inner_egen

. program compare_inner_egen
  1.     syntax [anything], [tol(real 1e-6) sort shuffle *]
  2. 
.     tempvar rsort
  3.     if ( "`shuffle'" != "" ) gen `rsort' = runiform()
  4.     if ( "`shuffle'" != "" ) sort `rsort'
  5.     if ( ("`sort'" != "") & ("`anything'" != "") ) {
  6.         if ( strpos(`"`anything'"', "strL") > 0 ) {
  7.             sort `anything'
  8.         }
  9.         else {
 10.             hashsort `anything'
 11.         }
 12.     }
 13. 
.     local N = trim("`: di %15.0gc _N'")
 14.     local hlen = 31 + length("`anything'") + length("`N'")
 15. 
.     di _n(2) "Checking egen. N = `N'; varlist = `anything'" _n(1) "{hline `hlen'}"
 16. 
.     _compare_inner_egen `anything', `options' tol(`tol')
 17. 
.     local in1 = ceil((0.00 + 0.25 * runiform()) * `=_N')
 18.     local in2 = ceil((0.75 + 0.25 * runiform()) * `=_N')
 19.     local from = cond(`in1' < `in2', `in1', `in2')
 20.     local to   = cond(`in1' > `in2', `in1', `in2')
 21.     _compare_inner_egen `anything' in `from' / `to', `options' tol(`tol')
 22. 
.     _compare_inner_egen `anything' if random2 > 0, `options' tol(`tol')
 23. 
.     local in1 = ceil((0.00 + 0.25 * runiform()) * `=_N')
 24.     local in2 = ceil((0.75 + 0.25 * runiform()) * `=_N')
 25.     local from = cond(`in1' < `in2', `in1', `in2')
 26.     local to   = cond(`in1' > `in2', `in1', `in2')
 27.     _compare_inner_egen `anything' if random2 < 0 in `from' / `to', `options' tol(`tol')
 28. end

. 
. capture program drop _compare_inner_egen

. program _compare_inner_egen
  1.     syntax [anything] [if] [in], [tol(real 1e-6) *]
  2. 
.     local stats       total sum mean sd max min count median iqr skew kurt
  3.     local percentiles 1 10 30 50 70 90 99
  4. 
.     cap drop g*_*
  5.     cap drop c*_*
  6. 
.     tempvar g_fun
  7. 
.     if ( "`if'`in'" == "" ) {
  8.         di _n(1) "Checking full egen range: `anything'"
  9.     }
 10.     else if ( "`if'`in'" != "" ) {
 11.         di _n(1) "Checking [`if' `in'] egen range: `anything'"
 12.     }
 13. 
.     foreach fun of local stats {
 14.         timer clear
 15.         timer on 43
 16.         qui `noisily' gegen float `g_fun' = `fun'(random1) `if' `in', by(`anything') replace `options'
 17.         timer off 43
 18.         qui timer list
 19.         local time_gegen = r(t43)
 20. 
.         timer clear
 21.         timer on 42
 22.         qui `noisily'  egen float c_`fun' = `fun'(random1) `if' `in', by(`anything')
 23.         timer off 42
 24.         qui timer list
 25.         local time_egen = r(t42)
 26. 
.         local rs = `time_egen'  / `time_gegen'
 27.         local tinfo `:di %4.3g `time_gegen'' vs `:di %4.3g `time_egen'', ratio `:di %4.3g `rs''
 28. 
.         cap noi assert (`g_fun' == c_`fun') | abs(`g_fun' - c_`fun') < `tol'
 29.         if ( _rc ) {
 30.             di as err "    compare_egen (failed): gegen `fun' not equal to egen (tol = `tol'; `tinfo')"
 31.             exit _rc
 32.         }
 33.         else di as txt "    compare_egen (passed): gegen `fun' results similar to egen (tol = `tol'; `tinfo')"
 34.     }
 35. 
.     foreach p in `percentiles' {
 36.         timer clear
 37.         timer on 43
 38.         qui  `noisily' gegen float `g_fun' = pctile(random1) `if' `in', by(`anything') p(`p') replace `options'
 39.         timer off 43
 40.         qui timer list
 41.         local time_gegen = r(t43)
 42. 
. 
.         timer clear
 43.         timer on 42
 44.         qui  `noisily'  egen float c_p`p'  = pctile(random1) `if' `in', by(`anything') p(`p')
 45.         timer off 42
 46.         qui timer list
 47.         local time_egen = r(t42)
 48. 
.         local rs = `time_egen'  / `time_gegen'
 49.         local tinfo `:di %4.3g `time_gegen'' vs `:di %4.3g `time_egen'', ratio `:di %4.3g `rs''
 50. 
.         cap noi assert (`g_fun' == c_p`p') | abs(`g_fun' - c_p`p') < `tol'
 51.         if ( _rc ) {
 52.             di as err "    compare_egen (failed): gegen percentile `p' not equal to egen (tol = `tol'; `tinfo')"
 53.             exit _rc
 54.         }
 55.         else di as txt "    compare_egen (passed): gegen percentile `p' results similar to egen (tol = `tol'; `tinfo')"
 56.     }
 57. 
.     foreach fun in tag group {
 58.         timer clear
 59.         timer on 43
 60.         qui  `noisily' gegen float `g_fun' = `fun'(`anything') `if' `in', replace `options'
 61.         timer off 43
 62.         qui timer list
 63.         local time_gegen = r(t43)
 64. 
. 
.         timer clear
 65.         timer on 42
 66.         qui  `noisily'  egen float c_`fun' = `fun'(`anything') `if' `in'
 67.         timer off 42
 68.         qui timer list
 69.         local time_egen = r(t42)
 70. 
.         local rs = `time_egen'  / `time_gegen'
 71.         local tinfo `:di %4.3g `time_gegen'' vs `:di %4.3g `time_egen'', ratio `:di %4.3g `rs''
 72. 
.         cap noi assert (`g_fun' == c_`fun') | abs(`g_fun' - c_`fun') < `tol'
 73.         if ( _rc ) {
 74.             di as err "    compare_egen (failed): gegen `fun' not equal to egen (tol = `tol'; `tinfo')"
 75.             exit _rc
 76.         }
 77.         else di as txt "    compare_egen (passed): gegen `fun' results similar to egen (tol = `tol'; `tinfo')"
 78. 
.         timer clear
 79.         timer on 43
 80.         qui  `noisily' gegen float `g_fun' = `fun'(`anything') `if' `in', missing replace `options'
 81.         timer off 43
 82.         qui timer list
 83.         local time_gegen = r(t43)
 84. 
. 
.         timer clear
 85.         timer on 42
 86.         qui  `noisily'  egen float c_`fun'2 = `fun'(`anything') `if' `in', missing
 87.         timer off 42
 88.         qui timer list
 89.         local time_egen = r(t42)
 90. 
.         local rs = `time_egen'  / `time_gegen'
 91.         local tinfo `:di %4.3g `time_gegen'' vs `:di %4.3g `time_egen'', ratio `:di %4.3g `rs''
 92. 
.         cap noi assert (`g_fun' == c_`fun'2) | abs(`g_fun' - c_`fun'2) < `tol'
 93.         if ( _rc ) {
 94.             di as err "    compare_egen (failed): gegen `fun', missing not equal to egen (tol = `tol'; `tinfo')"
 95.             exit _rc
 96.         }
 97.         else di as txt "    compare_egen (passed): gegen `fun', missing results similar to egen (tol = `tol'; `tinfo')"
 98.     }
 99. 
.     {
100.         qui  `noisily' gegen g_g1 = group(`anything') `if' `in', counts(g_c1) fill(.) v `options' missing
101.         qui  `noisily' gegen g_g2 = group(`anything') `if' `in', counts(g_c2)         v `options' missing
102.         qui  `noisily' gegen g_c3 = count(1) `if' `in', by(`anything')
103.         qui  `noisily'  egen c_t1 = tag(`anything') `if' `in',  missing
104.         cap noi assert ( (g_c1 == g_c3) | ((c_t1 == 0) & (g_c1 == .)) ) & (g_c2 == g_c3)
105.         if ( _rc ) {
106.             di as err "    compare_egen (failed): gegen `fun' counts not equal to gegen count (tol = `tol')"
107.             exit _rc
108.         }
109.         else di as txt "    compare_egen (passed): gegen `fun' counts results similar to gegen count (tol = `tol')"
110.     }
111. 
.     cap drop g_*
112.     cap drop c_*
113. end

. 
. ***********************************************************************
. *                             Benchmarks                              *
. ***********************************************************************
. 
. capture program drop bench_egen

. program bench_egen
  1.     syntax, [tol(real 1e-6) bench(int 1) n(int 500) NOIsily *]
  2. 
.     qui gen_data, n(`n')
  3.     qui expand `=100 * `bench''
  4.     qui `noisily' random_draws, random(1)
  5.     qui sort random1
  6. 
.     local N = trim("`: di %15.0gc _N'")
  7.     local J = trim("`: di %15.0gc `n''")
  8. 
.     di _n(1)
  9.     di "Benchmark vs egen, obs = `N', J = `J' (in seconds)"
 10.     di "     egen | fegen | gegen | ratio (e/g) | ratio (f/g) | varlist"
 11.     di "     ---- | ----- | ----- | ----------- | ----------- | -------"
 12. 
.     versus_egen str_12,              `options' fegen
 13.     versus_egen str_12 str_32,       `options' fegen
 14.     versus_egen str_12 str_32 str_4, `options' fegen
 15. 
.     versus_egen double1,                 `options' fegen
 16.     versus_egen double1 double2,         `options' fegen
 17.     versus_egen double1 double2 double3, `options' fegen
 18. 
.     versus_egen int1,           `options' fegen
 19.     versus_egen int1 int2,      `options' fegen
 20.     versus_egen int1 int2 int3, `options' fegen
 21. 
.     versus_egen int1 str_32 double1,                                        `options'
 22.     versus_egen int1 str_32 double1 int2 str_12 double2,                    `options'
 23.     versus_egen int1 str_32 double1 int2 str_12 double2 int3 str_4 double3, `options'
 24. 
.     if ( `c(stata_version)' >= 14.1 ) {
 25.         local forcestrl: disp cond(strpos(lower("`c(os)'"), "windows"), "forcestrl", "")
 26.         versus_egen strL1,             `options' `forcestrl'
 27.         versus_egen strL1 strL2,       `options' `forcestrl'
 28.         versus_egen strL1 strL2 strL3, `options' `forcestrl'
 29.     }
 30. 
.     di _n(1) "{hline 80}" _n(1) "bench_egen, `options'" _n(1) "{hline 80}" _n(1)
 31. end

. 
. capture program drop versus_egen

. program versus_egen, rclass
  1.     syntax varlist, [fegen *]
  2. 
.     preserve
  3.         timer clear
  4.         timer on 42
  5.         cap egen id = group(`varlist')
  6.         timer off 42
  7.         qui timer list
  8.         local time_egen = r(t42)
  9.     restore
 10. 
.     preserve
 11.         timer clear
 12.         timer on 43
 13.         cap gegen id = group(`varlist'), `options'
 14.         timer off 43
 15.         qui timer list
 16.         local time_gegen = r(t43)
 17.     restore
 18. 
.     if ( "`fegen'" == "fegen" ) {
 19.     preserve
 20.         timer clear
 21.         timer on 44
 22.         cap fegen id = group(`varlist')
 23.         timer off 44
 24.         qui timer list
 25.         local time_fegen = r(t44)
 26.     restore
 27.     }
 28.     else {
 29.         local time_fegen = .
 30.     }
 31. 
.     local rs = `time_egen'  / `time_gegen'
 32.     local rf = `time_fegen' / `time_gegen'
 33.     di "    `:di %5.3g `time_egen'' | `:di %5.3g `time_fegen'' | `:di %5.3g `time_gegen'' | `:di %11.3g `rs'' | `:di %11.3g `rf'' | `varlist'"
 34. end

. capture program drop checks_unique

. program checks_unique
  1.     syntax, [tol(real 1e-6) NOIsily *]
  2.     di _n(1) "{hline 80}" _n(1) "checks_unique, `options'" _n(1) "{hline 80}" _n(1)
  3. 
.     qui `noisily' gen_data, n(5000)
  4.     qui expand 2
  5.     gen long ix = _n
  6. 
.     checks_inner_unique str_12,              `options'
  7.     checks_inner_unique str_12 str_32,       `options' by(str_4) replace
  8.     checks_inner_unique str_12 str_32 str_4, `options'
  9. 
.     checks_inner_unique double1,                 `options'
 10.     checks_inner_unique double1 double2,         `options' by(double3) replace
 11.     checks_inner_unique double1 double2 double3, `options'
 12. 
.     checks_inner_unique int1,           `options'
 13.     checks_inner_unique int1 int2,      `options' by(int3) replace
 14.     checks_inner_unique int1 int2 int3, `options'
 15. 
.     checks_inner_unique int1 str_32 double1,                                        `options'
 16.     checks_inner_unique int1 str_32 double1 int2 str_12 double2,                    `options' by(int3 str_4 double3) replace
 17.     checks_inner_unique int1 str_32 double1 int2 str_12 double2 int3 str_4 double3, `options'
 18. 
.     if ( `c(stata_version)' >= 14.1 ) {
 19.         local forcestrl: disp cond(strpos(lower("`c(os)'"), "windows"), "forcestrl", "")
 20. 
.         * This is for the benefit of gtop, which can only handle strings that are so long
.         qui `noisily' gen_data, n(50)
 21.         qui expand 200
 22.         gen long ix = _n
 23. 
.         checks_inner_unique strL1,             `options' `forcestrl'
 24.         checks_inner_unique strL1 strL2,       `options' `forcestrl' by(strL3) replace
 25.         checks_inner_unique strL1 strL2 strL3, `options' `forcestrl'
 26.     }
 27. 
.     clear
 28.     gen x = 1
 29.     cap gunique x
 30.     assert _rc == 2000
 31. 
.     clear
 32.     set obs 10
 33.     gen x = 1
 34.     cap gunique x if x < 0
 35.     assert _rc == 0
 36.     cap gunique x if 0
 37.     assert _rc == 0
 38.     replace x = .
 39.     cap gunique x if 0
 40.     assert _rc == 0
 41. 
.     clear
 42.     set obs 10
 43.     gen x = mod(_n, 3)
 44.     gen y = mod(_n, 4)
 45.     gunique x
 46.     gunique y
 47.     gunique y, by(x)
 48.     cap gunique y, by(x)
 49.     assert _rc == 110
 50.     gen `:type _Unique' _Unique2 = _Unique
 51.     gunique y, by(x) replace
 52.     assert _Unique == _Unique2
 53.     replace y = 0
 54.     gunique y, by(x) replace
 55.     assert _Unique == 1
 56. 
.     drop _U*
 57.     gunique y, by(x) gen(nuniq)
 58.     cap gunique y, by(x) gen(nuniq)
 59.     assert _rc == 110
 60.     gen `:type nuniq' nuniq2 = nuniq
 61.     gunique y, by(x) gen(nuniq) replace
 62.     assert nuniq == nuniq2
 63.     replace y = 0
 64.     gunique y, by(x) gen(nuniq) replace
 65.     assert nuniq == 1
 66. end

. 
. capture program drop checks_inner_unique

. program checks_inner_unique
  1.     syntax varlist, [*]
  2.     cap gunique `varlist', `options' v bench miss
  3.     assert _rc == 0
  4. 
.     cap gunique `varlist' in 1, `options' miss d
  5.     assert _rc == 0
  6.     assert `r(N)' == `r(J)'
  7.     assert `r(J)' == 1
  8. 
.     cap gunique `varlist' if _n == 1, `options' miss
  9.     assert _rc == 0
 10.     assert `r(N)' == `r(J)'
 11.     assert `r(J)' == 1
 12. 
.     cap gunique `varlist' if _n < 10 in 5, `options' miss d
 13.     assert _rc == 0
 14.     assert `r(N)' == `r(J)'
 15.     assert `r(J)' == 1
 16. end

. 
. ***********************************************************************
. *                               Compare                               *
. ***********************************************************************
. 
. capture program drop compare_unique

. program compare_unique
  1.     syntax, [tol(real 1e-6) NOIsily distinct unique *]
  2. 
.     if ( "`distinct'`unique'" == "" ) local unique unique
  3.     if ( ("`distinct'" != "") & ("`unique'" != "") ) {
  4.         di as err "Specify only one of: unique distinct"
  5.         exit 198
  6.     }
  7. 
.     qui `noisily' gen_data, n(500)
  8.     qui expand 100
  9. 
.     local N    = trim("`: di %15.0gc _N'")
 10.     local hlen = 22 + length("`options'") + length("`N'")
 11.     di _n(1) "{hline 80}" _n(1) "compare_`distinct'`unique', N = `N', `options'" _n(1) "{hline 80}" _n(1)
 12. 
.     local options `options' `distinct'`unique'
 13. 
.     compare_inner_unique str_12,              `options' sort
 14.     compare_inner_unique str_12 str_32,       `options' shuffle
 15.     compare_inner_unique str_12 str_32 str_4, `options'
 16. 
.     compare_inner_unique double1,                 `options'
 17.     compare_inner_unique double1 double2,         `options' sort
 18.     compare_inner_unique double1 double2 double3, `options' shuffle
 19. 
.     compare_inner_unique int1,           `options' shuffle
 20.     compare_inner_unique int1 int2,      `options'
 21.     compare_inner_unique int1 int2 int3, `options' sort
 22. 
.     compare_inner_unique int1 str_32 int3 double3  , `options'
 23.     compare_inner_unique int1 int1 double2 double3 , `options'
 24.     compare_inner_unique int1 double? str_* int?   , `options'
 25. 
.     if ( `c(stata_version)' >= 14.1 ) {
 26.         local forcestrl: disp cond(strpos(lower("`c(os)'"), "windows"), "forcestrl", "")
 27.         compare_inner_unique strL1,             `options' `forcestrl' shuffle
 28.         compare_inner_unique strL1 strL2,       `options' `forcestrl' 
 29.         compare_inner_unique strL1 strL2 strL3, `options' `forcestrl' sort
 30.     }
 31. end

. 
. capture program drop compare_inner_unique

. program compare_inner_unique
  1.     syntax varlist, [distinct unique sort shuffle *]
  2. 
.     tempvar rsort
  3.     if ( "`shuffle'" != "" ) gen `rsort' = runiform()
  4.     if ( "`shuffle'" != "" ) sort `rsort'
  5.     if ( ("`sort'" != "") & ("`anything'" != "") ) {
  6.         if ( strpos(`"`anything'"', "strL") > 0 ) {
  7.             sort `anything'
  8.         }
  9.         else {
 10.             hashsort `anything'
 11.         }
 12.     }
 13. 
.     if ( "`distinct'" != "" ) {
 14.         local joint joint
 15.         local rname ndistinct
 16.     }
 17.     else {
 18.         local joint
 19.         local rname unique
 20.     }
 21. 
.     local options `options' `joint'
 22. 
.     tempvar rsort ix
 23.     gen `rsort' = runiform()
 24.     gen long `ix' = _n
 25. 
.     cap `distinct'`unique' `varlist', `joint'
 26.     local nJ_`distinct'`unique' = `r(`rname')'
 27.     cap g`distinct'`unique' `varlist', `options'
 28.     local nJ_g`distinct'`unique' = `r(`rname')'
 29.     check_nlevels `nJ_`distinct'`unique'' `nJ_g`distinct'`unique'' , by( `varlist') `distinct'`unique'
 30. 
.     cap `distinct'`unique' `ix' `varlist', `joint'
 31.     local nJ_`distinct'`unique' = `r(`rname')'
 32.     cap g`distinct'`unique' `ix' `varlist', `options'
 33.     local nJ_g`distinct'`unique' = `r(`rname')'
 34.     check_nlevels `nJ_`distinct'`unique'' `nJ_g`distinct'`unique'' , by( ix `varlist') `distinct'`unique'
 35. 
.     cap `distinct'`unique' `rsort' `varlist', `joint'
 36.     local nJ_`distinct'`unique' = `r(`rname')'
 37.     cap g`distinct'`unique' `rsort' `varlist', `options'
 38.     local nJ_g`distinct'`unique' = `r(`rname')'
 39.     check_nlevels `nJ_`distinct'`unique'' `nJ_g`distinct'`unique'' , by( rsort `varlist') `distinct'`unique'
 40. 
.     * ---------------------------------------------------------------------
.     * ---------------------------------------------------------------------
. 
.     qui replace `ix' = `=_N / 2' if _n > `=_N / 2'
 41.     cap `distinct'`unique' `ix', `joint'
 42.     local nJ_`distinct'`unique' = `r(`rname')'
 43.     cap g`distinct'`unique' `ix', `options'
 44.     local nJ_g`distinct'`unique' = `r(`rname')'
 45.     check_nlevels `nJ_`distinct'`unique'' `nJ_g`distinct'`unique'' , by( ix) `distinct'`unique'
 46. 
.     * ---------------------------------------------------------------------
.     * ---------------------------------------------------------------------
. 
.     preserve
 47.         qui keep in 100 / `=ceil(`=_N / 2')'
 48.         cap `distinct'`unique' `ix' `varlist', `joint'
 49.         local nJ_`distinct'`unique' = `r(`rname')'
 50.     restore
 51.     cap g`distinct'`unique' `ix' `varlist' in 100 / `=ceil(`=_N / 2')', `options'
 52.     local nJ_g`distinct'`unique' = `r(`rname')'
 53.     check_nlevels  `nJ_`distinct'`unique'' `nJ_g`distinct'`unique'' , by( ix `varlist' in 100 / `=ceil(`=_N / 2')') `distinct'`unique'
 54. 
.     preserve
 55.         qui keep in `=ceil(`=_N / 2')' / `=_N'
 56.         cap `distinct'`unique' `ix' `varlist', `joint'
 57.         local nJ_`distinct'`unique' = `r(`rname')'
 58.     restore
 59.     cap g`distinct'`unique' `ix' `varlist' in `=ceil(`=_N / 2')' / `=_N', `options'
 60.     local nJ_g`distinct'`unique' = `r(`rname')'
 61.     check_nlevels  `nJ_`distinct'`unique'' `nJ_g`distinct'`unique'' , by( ix `varlist' in `=ceil(`=_N / 2')' / `=_N') `distinct'`unique'
 62. 
.     * ---------------------------------------------------------------------
.     * ---------------------------------------------------------------------
. 
.     preserve
 63.         qui keep if _n < `=_N / 2'
 64.         cap `distinct'`unique' `ix' `varlist', `joint'
 65.         local nJ_`distinct'`unique' = `r(`rname')'
 66.     restore
 67.     cap g`distinct'`unique' `ix' `varlist' if _n < `=_N / 2', `options'
 68.     local nJ_g`distinct'`unique' = `r(`rname')'
 69.     check_nlevels  `nJ_`distinct'`unique'' `nJ_g`distinct'`unique'' , by( ix `varlist' if _n < `=_N / 2') `distinct'`unique'
 70. 
.     preserve
 71.         qui keep if _n > `=_N / 2'
 72.         cap `distinct'`unique' `ix' `varlist', `joint'
 73.         local nJ_`distinct'`unique' = `r(`rname')'
 74.     restore
 75.     cap g`distinct'`unique' `ix' `varlist' if _n > `=_N / 2', `options'
 76.     local nJ_g`distinct'`unique' = `r(`rname')'
 77.     check_nlevels  `nJ_`distinct'`unique'' `nJ_g`distinct'`unique'' , by( ix `varlist' if _n > `=_N / 2') `distinct'`unique'
 78. 
.     * ---------------------------------------------------------------------
.     * ---------------------------------------------------------------------
. 
.     qui replace `ix' = 100 in 1 / 100
 79. 
.     preserve
 80.         qui keep if _n < `=_N / 4' in 100 / `=ceil(`=_N / 2')'
 81.         cap `distinct'`unique' `ix' `varlist', `joint'
 82.         local nJ_`distinct'`unique' = `r(`rname')'
 83.     restore
 84.     cap g`distinct'`unique' `ix' `varlist' if _n < `=_N / 4' in 100 / `=ceil(`=_N / 2')', `options'
 85.     local nJ_g`distinct'`unique' = `r(`rname')'
 86.     check_nlevels  `nJ_`distinct'`unique'' `nJ_g`distinct'`unique'' , by( ix `varlist' if _n < `=_N / 4' in 100 / `=ceil(`=_N / 2')') `distinct'`unique'
 87. 
.     preserve
 88.         qui keep if _n > `=_N / 4' in `=ceil(`=_N / 1.5')' / `=_N'
 89.         cap `distinct'`unique' `ix' `varlist', `joint'
 90.         local nJ_`distinct'`unique' = `r(`rname')'
 91.     restore
 92.     cap g`distinct'`unique' `ix' `varlist' if _n > `=_N / 4' in `=ceil(`=_N / 1.5')' / `=_N', `options'
 93.     local nJ_g`distinct'`unique' = `r(`rname')'
 94.     check_nlevels  `nJ_`distinct'`unique'' `nJ_g`distinct'`unique'' , by( ix `varlist' if _n > `=_N / 4' in `=ceil(`=_N / 1.5')' / `=_N') `distinct'`unique'
 95. 
.     di _n(1)
 96. end

. 
. capture program drop check_nlevels

. program check_nlevels
  1.     syntax anything, by(str) [distinct unique]
  2. 
.     tokenize `anything'
  3.     local nJ   `1'
  4.     local nJ_g `2'
  5. 
.     if ( `nJ' != `nJ_g' ) {
  6.         di as err "    compare_`distinct'`unique' (failed): `distinct'`unique' `by' gave `nJ' levels but g`distinct'`unique' gave `nJ_g'"
  7.         exit 198
  8.     }
  9.     else {
 10.         di as txt "    compare_`distinct'`unique' (passed): `distinct'`unique' and g`distinct'`unique' `by' gave the same number of levels"
 11.     }
 12. end

. 
. ***********************************************************************
. *                             Benchmarks                              *
. ***********************************************************************
. 
. capture program drop bench_unique

. program bench_unique
  1.     syntax, [tol(real 1e-6) bench(int 1) n(int 500) NOIsily distinct joint distunique *]
  2. 
.     if ( "`distinct'" != "" ) {
  3.         local dstr distinct
  4.         local dsep --------
  5.     }
  6.     else {
  7.         local dstr unique
  8.         local dsep ------
  9.     }
 10. 
.     if ( "`joint'" != "" ) {
 11.         local dj   , joint;
 12.     }
 13.     else {
 14.         local dj   ,
 15.     }
 16. 
.     local options `options' `distinct' `joint' `distunique'
 17. 
.     qui `noisily' gen_data, n(`n')
 18.     qui expand `=100 * `bench''
 19.     qui gen rsort = rnormal()
 20.     qui sort rsort
 21. 
.     local N = trim("`: di %15.0gc _N'")
 22.     local J = trim("`: di %15.0gc `n''")
 23. 
.     if ( ("`distunique'" != "") & ("`joint'" != "") ) {
 24.         di as txt _n(1)
 25.         di as txt "Benchmark vs `dstr'`dj' obs = `N', all calls include a unique index (in seconds)"
 26.         di as txt "     `dstr' |    unique | g`dstr' | ratio (d/g) | ratio (u/g) | varlist"
 27.         di as txt "     `dsep' | -`dsep' | -`dsep' | ----------- | ----------- | -------"
 28.     }
 29.     else {
 30.         di as txt _n(1)
 31.         di as txt "Benchmark vs `dstr'`dj' obs = `N', all calls include a unique index (in seconds)"
 32.         di as txt "     `dstr' | f`dstr' | g`dstr' | ratio (d/g) | ratio (u/g) | varlist"
 33.         di as txt "     `dsep' | -`dsep' | -`dsep' | ----------- | ----------- | -------"
 34.     }
 35. 
.     versus_unique str_12,              `options' unique
 36.     versus_unique str_12 str_32,       `options' unique
 37.     versus_unique str_12 str_32 str_4, `options' unique
 38. 
.     versus_unique double1,                 `options' unique
 39.     versus_unique double1 double2,         `options' unique
 40.     versus_unique double1 double2 double3, `options' unique
 41. 
.     versus_unique int1,           `options' unique
 42.     versus_unique int1 int2,      `options' unique
 43.     versus_unique int1 int2 int3, `options' unique
 44. 
.     * versus_unique str_12,              `options' funique unique
.     * versus_unique str_12 str_32,       `options' funique unique
.     * versus_unique str_12 str_32 str_4, `options' funique unique
.     *
.     * versus_unique double1,                 `options' funique unique
.     * versus_unique double1 double2,         `options' funique unique
.     * versus_unique double1 double2 double3, `options' funique unique
.     *
.     * versus_unique int1,           `options' funique unique
.     * versus_unique int1 int2,      `options' funique unique
.     * versus_unique int1 int2 int3, `options' funique unique
. 
.     versus_unique int1 str_32 double1,                                        unique `options'
 45.     versus_unique int1 str_32 double1 int2 str_12 double2,                    unique `options'
 46.     versus_unique int1 str_32 double1 int2 str_12 double2 int3 str_4 double3, unique `options'
 47. 
.     if ( `c(stata_version)' >= 14.1 ) {
 48.         local forcestrl: disp cond(strpos(lower("`c(os)'"), "windows"), "forcestrl", "")
 49.         versus_unique strL1,             `options' `forcestrl' unique
 50.         versus_unique strL1 strL2,       `options' `forcestrl' unique
 51.         versus_unique strL1 strL2 strL3, `options' `forcestrl' unique
 52.     }
 53. 
.     if ( ("`distunique'" != "") & ("`joint'" != "") ) {
 54.         di as txt _n(1)
 55.         di as txt "Benchmark vs `dstr'`dj' obs = `N', J = `J' (in seconds)"
 56.         di as txt "     `dstr' |    unique | g`dstr' | ratio (d/g) | ratio (u/g) | varlist"
 57.         di as txt "     `dsep' | -`dsep' | -`dsep' | ----------- | ----------- | -------"
 58.     }
 59.     else {
 60.         di as txt _n(1)
 61.         di as txt "Benchmark vs `dstr'`dj' obs = `N', J = `J' (in seconds)"
 62.         di as txt "     `dstr' | f`dstr' | g`dstr' | ratio (u/g) | ratio (f/g) | varlist"
 63.         di as txt "     `dsep' | -`dsep' | -`dsep' | ----------- | ----------- | -------"
 64.     }
 65. 
.     versus_unique str_12,              `options'
 66.     versus_unique str_12 str_32,       `options'
 67.     versus_unique str_12 str_32 str_4, `options'
 68. 
.     versus_unique double1,                 `options'
 69.     versus_unique double1 double2,         `options'
 70.     versus_unique double1 double2 double3, `options'
 71. 
.     versus_unique int1,           `options'
 72.     versus_unique int1 int2,      `options'
 73.     versus_unique int1 int2 int3, `options'
 74. 
.     * versus_unique str_12,              `options' funique
.     * versus_unique str_12 str_32,       `options' funique
.     * versus_unique str_12 str_32 str_4, `options' funique
.     *
.     * versus_unique double1,                 `options' funique
.     * versus_unique double1 double2,         `options' funique
.     * versus_unique double1 double2 double3, `options' funique
.     *
.     * versus_unique int1,           `options' funique
.     * versus_unique int1 int2,      `options' funique
.     * versus_unique int1 int2 int3, `options' funique
. 
.     versus_unique int1 str_32 double1,                                        `options'
 75.     versus_unique int1 str_32 double1 int2 str_12 double2,                    `options'
 76.     versus_unique int1 str_32 double1 int2 str_12 double2 int3 str_4 double3, `options'
 77. 
.     if ( `c(stata_version)' >= 14 ) {
 78.         local forcestrl: disp cond(strpos(lower("`c(os)'"), "windows"), "forcestrl", "")
 79.         versus_unique strL1,             `options' `forcestrl'
 80.         versus_unique strL1 strL2,       `options' `forcestrl'
 81.         versus_unique strL1 strL2 strL3, `options' `forcestrl'
 82.     }
 83. 
.     di as txt _n(1) "{hline 80}" _n(1) "bench_unique, `options'" _n(1) "{hline 80}" _n(1)
 84. end

. 
. capture program drop versus_unique

. program versus_unique, rclass
  1.     syntax varlist, [funique unique distinct joint distunique *]
  2.     if ( "`unique'" == "unique" ) {
  3.         tempvar ix
  4.         gen `ix' = `=_N' - _n
  5.         if ( strpos("`varlist'", "str") ) qui tostring `ix', replace
  6.     }
  7. 
.     preserve
  8.         timer clear
  9.         timer on 42
 10.         cap unique `varlist' `ix'
 11.         assert inlist(_rc, 0, 459)
 12.         timer off 42
 13.         qui timer list
 14.         local time_unique = r(t42)
 15.     restore
 16. 
.     preserve
 17.         timer clear
 18.         timer on 43
 19.         cap gunique `varlist' `ix', `options'
 20.         assert inlist(_rc, 0, 459)
 21.         timer off 43
 22.         qui timer list
 23.         local time_gunique = r(t43)
 24.     restore
 25. 
.     if ( ("`funique'" == "funique") & ("`distinct'" == "") ) {
 26.     preserve
 27.         timer clear
 28.         timer on 44
 29.         cap funique `varlist' `ix'
 30.         assert inlist(_rc, 0, 459)
 31.         timer off 44
 32.         qui timer list
 33.         local time_funique = r(t44)
 34.     restore
 35.     }
 36.     else if ( "`distunique'" != "" ) {
 37.     preserve
 38.         timer clear
 39.         timer on 44
 40.         cap unique `varlist' `ix'
 41.         assert inlist(_rc, 0, 459)
 42.         timer off 44
 43.         qui timer list
 44.         local time_funique = r(t44)
 45.     restore
 46.     }
 47.     else {
 48.         local time_funique = .
 49.     }
 50. 
.     local rs = `time_unique'  / `time_gunique'
 51.     local rf = `time_funique' / `time_gunique'
 52. 
.     if ( "`distinct'" == "" ) {
 53.     di as txt "    `:di %7.3g `time_unique'' | `:di %7.3g `time_funique'' | `:di %7.3g `time_gunique'' | `:di %11.3g `rs'' | `:di %11.3g `rf'' | `varlist'"
 54.     }
 55.     else {
 56.     di as txt "    `:di %9.3g `time_unique'' | `:di %9.3g `time_funique'' | `:di %9.3g `time_gunique'' | `:di %11.3g `rs'' | `:di %11.3g `rf'' | `varlist'"
 57.     }
 58. end

. 
. * Prototype of -unique-
. * ---------------------
. 
. * cap mata: mata drop funique()
. * mata:
. * mata set matastrict off
. * void funique(string scalar varlist, real scalar detail)
. * {
. *       class Factor scalar F
. *       F = factor(varlist)
. *       printf("{txt}Number of unique values of turn is {res}%-11.0f{txt}\n", F.num_levels)
. *       printf("{txt}Number of records is {res}%-11.0f{txt}\n", F.num_obs)
. *       if (detail) {
. *               (void) st_addvar("long", tempvar=st_tempname())
. *               st_store(1::F.num_levels, tempvar, F.counts)
. *               st_varlabel(tempvar, "Records per " + invtokens(F.varlist))
. *               stata("su " + tempvar + ", detail")
. *       }
. * }
. * end
. *
. * cap program drop funique
. * program funique
. *       syntax varlist [if] [in], [Detail]
. *       
. *       mata: funique("`varlist'", "`detail'"!="")
. * end
. capture program drop checks_levelsof

. program checks_levelsof
  1.     syntax, [tol(real 1e-6) NOIsily *]
  2.     di _n(1) "{hline 80}" _n(1) "checks_levelsof, `options'" _n(1) "{hline 80}" _n(1)
  3. 
.     qui `noisily' gen_data, n(50)
  4.     qui expand 200
  5.     gen long ix = _n
  6. 
.     checks_inner_levelsof str_12,              `options'
  7.     checks_inner_levelsof str_12 str_32,       `options'
  8.     checks_inner_levelsof str_12 str_32 str_4, `options'
  9. 
.     checks_inner_levelsof double1,                 `options'
 10.     checks_inner_levelsof double1 double2,         `options'
 11.     checks_inner_levelsof double1 double2 double3, `options'
 12. 
.     checks_inner_levelsof int1,           `options'
 13.     checks_inner_levelsof int1 int2,      `options'
 14.     checks_inner_levelsof int1 int2 int3, `options'
 15. 
.     checks_inner_levelsof int1 str_32 double1,                                        `options'
 16.     checks_inner_levelsof int1 str_32 double1 int2 str_12 double2,                    `options'
 17.     checks_inner_levelsof int1 str_32 double1 int2 str_12 double2 int3 str_4 double3, `options'
 18. 
.     if ( `c(stata_version)' >= 14.1 ) {
 19.         local forcestrl: disp cond(strpos(lower("`c(os)'"), "windows"), "forcestrl", "")
 20.         qui `noisily' gen_data, n(50)
 21.         qui expand 200
 22.         gen long ix = _n
 23. 
.         checks_inner_levelsof strL1,             `options' `forcestrl'
 24.         checks_inner_levelsof strL1 strL2,       `options' `forcestrl'
 25.         checks_inner_levelsof strL1 strL2 strL3, `options' `forcestrl'
 26.     }
 27. 
.     clear
 28.     set obs 10
 29.     gen x = _n
 30.     glevelsof x if 0
 31.     glevelsof x if 0, gen(z)
 32. 
.     clear
 33.     gen x = 1
 34.     cap glevelsof x
 35.     assert _rc == 2000
 36. 
.     clear
 37.     set obs 100000
 38.     gen x = _n
 39.     cap glevelsof x in 1 / 10000 if mod(x, 3) == 0
 40.     assert _rc == 0
 41. 
.     clear
 42.     set obs 10
 43.     gen x = string(_n)
 44.     gen y = cond(mod(_n, 2), "a", "b")
 45.     gen z = _n
 46.     gen w = runiform()
 47.     gen strL s = "s"
 48.     expand 3
 49. 
.     cap glevelsof x,     gen(z, replace) nolocal
 50.     assert _rc == 198
 51.     cap glevelsof x,     gen(a, replace) nolocal
 52.     assert _rc == 198
 53.     cap glevelsof x y w, gen(z b)   nolocal
 54.     assert _rc == 198
 55.     cap glevelsof x y w, gen(a b)   nolocal
 56.     assert _rc == 198
 57.     cap glevelsof x y w, gen(a b z) nolocal
 58.     assert _rc == 198
 59. 
.     cap glevelsof x y w, gen(a b c) nolocal
 60.     assert _rc == 0
 61.     cap glevelsof x y,   gen(z)
 62.     assert _rc == 0
 63.     cap glevelsof x y,   gen(a) nolocal
 64.     assert _rc == 0
 65. 
.     cap glevelsof s, gen(a) nolocal
 66.     assert _rc == 17002
 67. 
.     clear
 68.     set obs 100000
 69.     gen x = "a long string appeared" + string(_n)
 70.     cap glevelsof x
 71.     assert _rc == 920
 72.     cap glevelsof x, gen(uniq) nolocal
 73.     assert _rc == 0
 74. 
.     sysuse auto, clear
 75.     glevelsof price
 76.     glevelsof mpg
 77.     glevelsof price   mpg     foreign
 78.     glevelsof foreign mpg     price
 79.     glevelsof mpg     foreign price
 80.     glevelsof price   make    mpg     foreign
 81.     glevelsof foreign make    mpg     price
 82.     glevelsof mpg     make    foreign price
 83.     glevelsof price   mpg     foreign
 84.     glevelsof foreign mpg     price
 85.     glevelsof mpg     foreign price
 86.     glevelsof make    price   mpg     foreign
 87.     glevelsof make    foreign mpg     price
 88.     glevelsof make    mpg     foreign price
 89.     glevelsof price   mpg     foreign make
 90.     glevelsof foreign mpg     price   make
 91.     glevelsof mpg     foreign price   make
 92. 
.     glevelsof price                           , mata(hi)
 93.     glevelsof mpg                             , mata(hi)
 94.     glevelsof price   mpg     foreign         , mata(hi)
 95.     glevelsof foreign mpg     price           , mata(hi)
 96.     glevelsof mpg     foreign price           , mata(hi)
 97.     glevelsof price   make    mpg     foreign , mata(hi)
 98.     glevelsof foreign make    mpg     price   , mata(hi)
 99.     glevelsof mpg     make    foreign price   , mata(hi)
100.     glevelsof price   mpg     foreign         , mata(hi)
101.     glevelsof foreign mpg     price           , mata(hi)
102.     glevelsof mpg     foreign price           , mata(hi)
103.     glevelsof make    price   mpg     foreign , mata(hi)
104.     glevelsof make    foreign mpg     price   , mata(hi)
105.     glevelsof make    mpg     foreign price   , mata(hi)
106.     glevelsof price   mpg     foreign make    , mata(hi)
107.     glevelsof foreign mpg     price   make    , mata(hi)
108.     glevelsof mpg     foreign price   make    , mata(hi)
109. 
.     clear
110.     set obs 2000
111.     gen long ix = _n
112.     gen r  = runiform()
113.     sort r
114. 
.     glevelsof ix
115.     glevelsof ix, mata
116.     glevelsof ix, mata(hi) silent
117. 
.     mata hi.desc()
118.     mata hi.getPrinted("%16.0g", 1)
119.     mata hi.desc()
120. end

. 
. capture program drop checks_inner_levelsof

. program checks_inner_levelsof
  1.     syntax varlist, [*]
  2.     cap glevelsof `varlist', `options' v bench clean
  3.     assert _rc == 0
  4. 
.     cap glevelsof `varlist' in 1, `options' miss
  5.     assert _rc == 0
  6. 
.     cap glevelsof `varlist' if _n == 1, `options' local(hi) miss
  7.     assert _rc == 0
  8.     assert `"`r(levels)'"' == `"`hi'"'
  9. 
.     cap glevelsof `varlist' if _n < 10 in 5, `options' s(" | ") cols(", ") miss
 10.     assert _rc == 0
 11. end

. 
. ***********************************************************************
. *                               Compare                               *
. ***********************************************************************
. 
. capture program drop compare_levelsof

. program compare_levelsof
  1.     syntax, [tol(real 1e-6) NOIsily *]
  2. 
.     qui `noisily' gen_data, n(50)
  3.     qui expand 5000
  4. 
.     local N    = trim("`: di %15.0gc _N'")
  5.     local hlen = 24 + length("`options'") + length("`N'")
  6.     di _n(1) "{hline 80}" _n(1) "compare_levelsof, N = `N', `options'" _n(1) "{hline 80}" _n(1)
  7. 
.     compare_inner_levelsof str_12, `options' sort
  8.     compare_inner_levelsof str_32, `options' shuffle
  9.     compare_inner_levelsof str_4,  `options'
 10. 
.     compare_inner_levelsof double1, `options' round
 11.     compare_inner_levelsof double2, `options' round sort
 12.     compare_inner_levelsof double3, `options' round shuffle
 13. 
.     compare_inner_levelsof int1, `options' shuffle
 14.     compare_inner_levelsof int2, `options'
 15.     compare_inner_levelsof int3, `options' sort
 16. 
.     if ( `c(stata_version)' >= 14.1 ) {
 17.         local forcestrl: disp cond(strpos(lower("`c(os)'"), "windows"), "forcestrl", "")
 18.         compare_inner_levelsof strL1, `options' `forcestrl'
 19.         compare_inner_levelsof strL2, `options' `forcestrl'
 20.         compare_inner_levelsof strL3, `options' `forcestrl'
 21.     }
 22. 
.     qui `noisily' gen_data, n(500)
 23.     qui expand 100
 24. 
.     local N    = trim("`: di %15.0gc _N'")
 25.     local hlen = 24 + length("`options'") + length("`N'")
 26.     di _n(1) "{hline 80}" _n(1) "compare_levelsof_gen, N = `N', `options'" _n(1) "{hline 80}" _n(1)
 27. 
.     compare_inner_levelsof_gen str_12,              `options' sort
 28.     compare_inner_levelsof_gen str_12 str_32 str_4, `options'
 29. 
.     compare_inner_levelsof_gen double1,                 `options'
 30.     compare_inner_levelsof_gen double1 double2 double3, `options' shuffle
 31. 
.     compare_inner_levelsof_gen int1,           `options' shuffle
 32.     compare_inner_levelsof_gen int1 int2 int3, `options' sort
 33. 
.     compare_inner_levelsof_gen str_32 int3 double3  , `options'
 34.     compare_inner_levelsof_gen int1 double2 double3 , `options'
 35.     compare_inner_levelsof_gen double? str_* int?   , `options'
 36. end

. 
. capture program drop compare_inner_levelsof

. program compare_inner_levelsof
  1.     syntax varlist, [round shuffle sort *]
  2. 
.     tempvar rsort
  3.     if ( "`shuffle'" != "" ) gen `rsort' = runiform()
  4.     if ( "`shuffle'" != "" ) sort `rsort'
  5.     if ( ("`sort'" != "") & ("`anything'" != "") ) hashsort `anything'
  6. 
.     cap  levelsof `varlist', s(" | ") local(l_stata)
  7.     cap glevelsof `varlist', s(" | ") local(l_gtools) `options'
  8.     if ( `"`l_stata'"' != `"`l_gtools'"' ) {
  9.         if ( "`round'" != "" ) {
 10.             while ( `"`l_stata'`l_gtools'"' != "" ) {
 11.                 gettoken l_scmp l_stata:  l_stata,  p(" | ")
 12.                 gettoken _      l_stata:  l_stata,  p(" | ")
 13.                 gettoken l_gcmp l_gtools: l_gtools, p(" | ")
 14.                 gettoken _      l_gtools: l_gtools, p(" | ")
 15.                 if ( `"`l_gcmp'"' != `"`l_scmp'"' ) {
 16.                     cap assert abs(`l_gcmp' - `l_scmp') < 1e-15
 17.                     if ( _rc ) {
 18.                         di as err "    compare_levelsof (failed): glevelsof `varlist' returned different levels with rounding"
 19.                         exit 198
 20.                     }
 21.                 }
 22.             }
 23.             di as txt "    compare_levelsof (passed): glevelsof `varlist' returned similar levels as levelsof (tol = 1e-15)"
 24.         }
 25.         else {
 26.             di as err "    compare_levelsof (failed): glevelsof `varlist' returned different levels to levelsof"
 27.             exit 198
 28.         }
 29.     }
 30.     else {
 31.         di as txt "    compare_levelsof (passed): glevelsof `varlist' returned the same levels as levelsof"
 32.     }
 33. 
.     cap  levelsof `varlist', local(l_stata)  miss
 34.     cap glevelsof `varlist', local(l_gtools) miss `options'
 35.     if ( `"`l_stata'"' != `"`l_gtools'"' ) {
 36.         if ( "`round'" != "" ) {
 37.             while ( `"`l_stata'`l_gtools'"' != "" ) {
 38.                 gettoken l_scmp l_stata:  l_stata,  p(" | ")
 39.                 gettoken _      l_stata:  l_stata,  p(" | ")
 40.                 gettoken l_gcmp l_gtools: l_gtools, p(" | ")
 41.                 gettoken _      l_gtools: l_gtools, p(" | ")
 42.                 if ( `"`l_gcmp'"' != `"`l_scmp'"' ) {
 43.                     cap assert abs(`l_gcmp' - `l_scmp') < 1e-15
 44.                     if ( _rc ) {
 45.                         di as err "    compare_levelsof (failed): glevelsof `varlist' returned different levels with rounding"
 46.                         exit 198
 47.                     }
 48.                 }
 49.             }
 50.             di as txt "    compare_levelsof (passed): glevelsof `varlist' returned similar levels as levelsof (tol = 1e-15)"
 51.         }
 52.         else {
 53.             di as err "    compare_levelsof (failed): glevelsof `varlist' returned different levels to levelsof"
 54.             exit 198
 55.         }
 56.     }
 57.     else {
 58.         di as txt "    compare_levelsof (passed): glevelsof `varlist' returned the same levels as levelsof"
 59.     }
 60. 
.     * ---------------------------------------------------------------------
.     * ---------------------------------------------------------------------
. 
.         cap  levelsof `varlist' in 100 / `=ceil(`=_N / 2')', local(l_stata)  miss
 61.         cap glevelsof `varlist' in 100 / `=ceil(`=_N / 2')', local(l_gtools) miss `options'
 62.         if ( `"`l_stata'"' != `"`l_gtools'"' ) {
 63.             if ( "`round'" != "" ) {
 64.                 while ( `"`l_stata'`l_gtools'"' != "" ) {
 65.                     gettoken l_scmp l_stata:  l_stata,  p(" | ")
 66.                     gettoken _      l_stata:  l_stata,  p(" | ")
 67.                     gettoken l_gcmp l_gtools: l_gtools, p(" | ")
 68.                     gettoken _      l_gtools: l_gtools, p(" | ")
 69.                     if ( `"`l_gcmp'"' != `"`l_scmp'"' ) {
 70.                         cap assert abs(`l_gcmp' - `l_scmp') < 1e-15
 71.                         if ( _rc ) {
 72.                             di as err "    compare_levelsof (failed): glevelsof `varlist' [in] returned different levels with rounding"
 73.                             exit 198
 74.                         }
 75.                     }
 76.                 }
 77.                 di as txt "    compare_levelsof (passed): glevelsof `varlist' [in] returned similar levels as levelsof (tol = 1e-15)"
 78.             }
 79.             else {
 80.                 di as err "    compare_levelsof (failed): glevelsof `varlist' [in] returned different levels to levelsof"
 81.                 exit 198
 82.             }
 83.         }
 84.         else {
 85.             di as txt "    compare_levelsof (passed): glevelsof `varlist' [in] returned the same levels as levelsof"
 86.         }
 87. 
.         cap glevelsof `varlist' in `=ceil(`=_N / 2')' / `=_N', local(l_stata)
 88.         cap glevelsof `varlist' in `=ceil(`=_N / 2')' / `=_N', local(l_gtools) `options'
 89.         if ( `"`l_stata'"' != `"`l_gtools'"' ) {
 90.             if ( "`round'" != "" ) {
 91.                 while ( `"`l_stata'`l_gtools'"' != "" ) {
 92.                     gettoken l_scmp l_stata:  l_stata,  p(" | ")
 93.                     gettoken _      l_stata:  l_stata,  p(" | ")
 94.                     gettoken l_gcmp l_gtools: l_gtools, p(" | ")
 95.                     gettoken _      l_gtools: l_gtools, p(" | ")
 96.                     if ( `"`l_gcmp'"' != `"`l_scmp'"' ) {
 97.                         cap assert abs(`l_gcmp' - `l_scmp') < 1e-15
 98.                         if ( _rc ) {
 99.                             di as err "    compare_levelsof (failed): glevelsof `varlist' [in] returned different levels with rounding"
100.                             exit 198
101.                         }
102.                     }
103.                 }
104.                 di as txt "    compare_levelsof (passed): glevelsof `varlist' [in] returned similar levels as levelsof (tol = 1e-15)"
105.             }
106.             else {
107.                 di as err "    compare_levelsof (failed): glevelsof `varlist' [in] returned different levels to levelsof"
108.                 exit 198
109.             }
110.         }
111.         else {
112.             di as txt "    compare_levelsof (passed): glevelsof `varlist' [in] returned the same levels as levelsof"
113.         }
114. 
.     * ---------------------------------------------------------------------
.     * ---------------------------------------------------------------------
. 
.         cap  levelsof `varlist' if _n > `=_N / 2', local(l_stata)  miss
115.         cap glevelsof `varlist' if _n > `=_N / 2', local(l_gtools) miss `options'
116.         if ( `"`l_stata'"' != `"`l_gtools'"' ) {
117.             if ( "`round'" != "" ) {
118.                 while ( `"`l_stata'`l_gtools'"' != "" ) {
119.                     gettoken l_scmp l_stata:  l_stata,  p(" | ")
120.                     gettoken _      l_stata:  l_stata,  p(" | ")
121.                     gettoken l_gcmp l_gtools: l_gtools, p(" | ")
122.                     gettoken _      l_gtools: l_gtools, p(" | ")
123.                     if ( `"`l_gcmp'"' != `"`l_scmp'"' ) {
124.                         cap assert abs(`l_gcmp' - `l_scmp') < 1e-15
125.                         if ( _rc ) {
126.                             di as err "    compare_levelsof (failed): glevelsof `varlist' [if] returned different levels with rounding"
127.                             exit 198
128.                         }
129.                     }
130.                 }
131.                 di as txt "    compare_levelsof (passed): glevelsof `varlist' [if] returned similar levels as levelsof (tol = 1e-15)"
132.             }
133.             else {
134.                 di as err "    compare_levelsof (failed): glevelsof `varlist' [if] returned different levels to levelsof"
135.                 exit 198
136.             }
137.         }
138.         else {
139.             di as txt "    compare_levelsof (passed): glevelsof `varlist' [if] returned the same levels as levelsof"
140.         }
141. 
.         cap glevelsof `varlist' if _n < `=_N / 2', local(l_stata)
142.         cap glevelsof `varlist' if _n < `=_N / 2', local(l_gtools) `options'
143.         if ( `"`l_stata'"' != `"`l_gtools'"' ) {
144.             if ( "`round'" != "" ) {
145.                 while ( `"`l_stata'`l_gtools'"' != "" ) {
146.                     gettoken l_scmp l_stata:  l_stata,  p(" | ")
147.                     gettoken _      l_stata:  l_stata,  p(" | ")
148.                     gettoken l_gcmp l_gtools: l_gtools, p(" | ")
149.                     gettoken _      l_gtools: l_gtools, p(" | ")
150.                     if ( `"`l_gcmp'"' != `"`l_scmp'"' ) {
151.                         cap assert abs(`l_gcmp' - `l_scmp') < 1e-15
152.                         if ( _rc ) {
153.                             di as err "    compare_levelsof (failed): glevelsof `varlist' [if] returned different levels with rounding"
154.                             exit 198
155.                         }
156.                     }
157.                 }
158.                 di as txt "    compare_levelsof (passed): glevelsof `varlist' [if] returned similar levels as levelsof (tol = 1e-15)"
159.             }
160.             else {
161.                 di as err "    compare_levelsof (failed): glevelsof `varlist' [if] returned different levels to levelsof"
162.                 exit 198
163.             }
164.         }
165.         else {
166.             di as txt "    compare_levelsof (passed): glevelsof `varlist' [if] returned the same levels as levelsof"
167.         }
168. 
.     * ---------------------------------------------------------------------
.     * ---------------------------------------------------------------------
. 
.         cap  levelsof `varlist' if _n < `=_N / 4' in 100 / `=ceil(`=_N / 2')', local(l_stata)  miss
169.         cap glevelsof `varlist' if _n < `=_N / 4' in 100 / `=ceil(`=_N / 2')', local(l_gtools) miss `options'
170.         if ( `"`l_stata'"' != `"`l_gtools'"' ) {
171.             if ( "`round'" != "" ) {
172.                 while ( `"`l_stata'`l_gtools'"' != "" ) {
173.                     gettoken l_scmp l_stata:  l_stata,  p(" | ")
174.                     gettoken _      l_stata:  l_stata,  p(" | ")
175.                     gettoken l_gcmp l_gtools: l_gtools, p(" | ")
176.                     gettoken _      l_gtools: l_gtools, p(" | ")
177.                     if ( `"`l_gcmp'"' != `"`l_scmp'"' ) {
178.                         cap assert abs(`l_gcmp' - `l_scmp') < 1e-15
179.                         if ( _rc ) {
180.                             di as err "    compare_levelsof (failed): glevelsof `varlist' [if] [in] returned different levels with rounding"
181.                             exit 198
182.                         }
183.                     }
184.                 }
185.                 di as txt "    compare_levelsof (passed): glevelsof `varlist'  if] [in] returned similar levels as levelsof (tol = 1e-15)"
186.             }
187.             else {
188.                 di as err "    compare_levelsof (failed): glevelsof `varlist' [if] [in] returned different levels to levelsof"
189.                 exit 198
190.             }
191.         }
192.         else {
193.             di as txt "    compare_levelsof (passed): glevelsof `varlist' [if] [in] returned the same levels as levelsof"
194.         }
195. 
.         cap glevelsof `varlist' if _n > `=_N / 4' in `=ceil(`=_N / 1.5')' / `=_N', local(l_stata)
196.         cap glevelsof `varlist' if _n > `=_N / 4' in `=ceil(`=_N / 1.5')' / `=_N', local(l_gtools) `options'
197.         if ( `"`l_stata'"' != `"`l_gtools'"' ) {
198.             if ( "`round'" != "" ) {
199.                 while ( `"`l_stata'`l_gtools'"' != "" ) {
200.                     gettoken l_scmp l_stata:  l_stata,  p(" | ")
201.                     gettoken _      l_stata:  l_stata,  p(" | ")
202.                     gettoken l_gcmp l_gtools: l_gtools, p(" | ")
203.                     gettoken _      l_gtools: l_gtools, p(" | ")
204.                     if ( `"`l_gcmp'"' != `"`l_scmp'"' ) {
205.                         cap assert abs(`l_gcmp' - `l_scmp') < 1e-15
206.                         if ( _rc ) {
207.                             di as err "    compare_levelsof (failed): glevelsof `varlist' [if] [in] returned different levels with rounding"
208.                             exit 198
209.                         }
210.                     }
211.                 }
212.                 di as txt "    compare_levelsof (passed): glevelsof `varlist'  if] [in] returned similar levels as levelsof (tol = 1e-15)"
213.             }
214.             else {
215.                 di as err "    compare_levelsof (failed): glevelsof `varlist' [if] [in] returned different levels to levelsof"
216.                 exit 198
217.             }
218.         }
219.         else {
220.             di as txt "    compare_levelsof (passed): glevelsof `varlist' [if] [in] returned the same levels as levelsof"
221.         }
222. 
.     di _n(1)
223. end

. 
. capture program drop compare_inner_levelsof_gen

. program compare_inner_levelsof_gen
  1.     syntax varlist, [shuffle sort *]
  2. 
.     tempvar rsort
  3.     if ( "`shuffle'" != "" ) gen `rsort' = runiform()
  4.     if ( "`shuffle'" != "" ) sort `rsort'
  5.     if ( ("`sort'" != "") & ("`anything'" != "") ) hashsort `anything'
  6. 
.     local ifin1
  7.     local ifin2 if _n < `=_N / 2'
  8.     local ifin3 in `=ceil(`=_N / 2')' / `=_N'
  9.     local ifin4 if _n > `=_N / 4' in `=ceil(`=_N / 1.5')' / `=_N'
 10. 
.     local iftxt1
 11.     local iftxt2 " [if]"
 12.     local iftxt3 " [in]"
 13.     local iftxt4 " [if] [in]"
 14. 
.     forvalues i = 1 / 4 {
 15.         preserve
 16.             keep `varlist'
 17.             glevelsof `varlist' `ifin`i'', nolocal gen(, replace) missing `options'
 18.             qui keep in 1 / `r(J)'
 19.             tempfile glevels
 20.             qui save `"`glevels'"'
 21.         restore, preserve
 22.             if  ( "`ifin`i''" != "" ) qui keep `ifin`i''
 23.             keep `varlist'
 24.             qui duplicates drop
 25.             cap merge 1:1 `varlist' using `"`glevels'"', assert(3) nogen
 26.             if ( _rc ) {
 27.                 di as err "    compare_levelsof (failed): glevelsof `varlist'`iftxt`i'', gen(, replace) returned different levels to duplicates drop"
 28.             }
 29.             else {
 30.                 di as err "    compare_levelsof (passed): glevelsof `varlist'`iftxt`i'', gen(, replace) returned the same levels as  duplicates drop"
 31.             }
 32.         restore
 33.     }
 34. 
.     di _n(1)
 35. end

. 
. ***********************************************************************
. *                             Benchmarks                              *
. ***********************************************************************
. 
. capture program drop bench_levelsof

. program bench_levelsof
  1.     syntax, [tol(real 1e-6) bench(int 1) n(int 100) NOIsily *]
  2. 
.     qui `noisily' gen_data, n(`n')
  3.     qui expand `=500 * `bench''
  4.     qui gen rsort = rnormal()
  5.     qui sort rsort
  6. 
.     local N = trim("`: di %15.0gc _N'")
  7.     local J = trim("`: di %15.0gc `n''")
  8. 
.     di as txt _n(1)
  9.     di as txt "Benchmark vs levelsof, obs = `N', J = `J' (in seconds)"
 10.     di as txt "    levelsof | flevelsof | glevelsof | ratio (l/g) | ratio (f/g) | varlist"
 11.     di as txt "    -------- | --------- | --------- | ----------- | ----------- | -------"
 12. 
.     versus_levelsof str_12, `options' flevelsof
 13.     versus_levelsof str_32, `options' flevelsof
 14.     versus_levelsof str_4,  `options' flevelsof
 15. 
.     versus_levelsof double1, `options' flevelsof
 16.     versus_levelsof double2, `options' flevelsof
 17.     versus_levelsof double3, `options' flevelsof
 18. 
.     versus_levelsof int1, `options' flevelsof
 19.     versus_levelsof int2, `options' flevelsof
 20.     versus_levelsof int3, `options' flevelsof
 21. 
.     di as txt _n(1) "{hline 80}" _n(1) "bench_levelsof, `options'" _n(1) "{hline 80}" _n(1)
 22. end

. 
. capture program drop versus_levelsof

. program versus_levelsof, rclass
  1.     syntax varlist, [flevelsof unique *]
  2.     if ( "`unique'" == "unique" ) {
  3.         tempvar ix
  4.         gen `ix' = `=_N' - _n
  5.         if ( strpos("`varlist'", "str") ) qui tostring `ix', replace
  6.     }
  7. 
.     preserve
  8.         timer clear
  9.         timer on 42
 10.         qui levelsof `varlist' `ix'
 11.         timer off 42
 12.         qui timer list
 13.         local time_levelsof = r(t42)
 14.     restore
 15. 
.     preserve
 16.         timer clear
 17.         timer on 43
 18.         qui glevelsof `varlist' `ix', `options'
 19.         timer off 43
 20.         qui timer list
 21.         local time_glevelsof = r(t43)
 22.     restore
 23. 
.     if ( "`flevelsof'" == "flevelsof" ) {
 24.     preserve
 25.         timer clear
 26.         timer on 44
 27.         qui flevelsof `varlist' `ix'
 28.         timer off 44
 29.         qui timer list
 30.         local time_flevelsof = r(t44)
 31.     restore
 32.     }
 33.     else {
 34.         local time_flevelsof = .
 35.     }
 36. 
.     local rs = `time_levelsof'  / `time_glevelsof'
 37.     local rf = `time_flevelsof' / `time_glevelsof'
 38.     di as txt "    `:di %8.3g `time_levelsof'' | `:di %9.3g `time_flevelsof'' | `:di %9.3g `time_glevelsof'' | `:di %11.3g `rs'' | `:di %11.3g `rf'' | `varlist'"
 39. end

. capture program drop checks_toplevelsof

. program checks_toplevelsof
  1.     syntax, [tol(real 1e-6) NOIsily *]
  2.     di _n(1) "{hline 80}" _n(1) "checks_toplevelsof, `options'" _n(1) "{hline 80}" _n(1)
  3. 
.     qui {
  4.         qui `noisily' gen_data, n(50)
  5.         qui expand 200
  6.         gen long ix = _n
  7. 
.         checks_inner_toplevelsof -str_12,              `options'
  8.         checks_inner_toplevelsof str_12 -str_32,       `options'
  9.         checks_inner_toplevelsof str_12 -str_32 str_4, `options'
 10. 
.         checks_inner_toplevelsof -double1,                 `options'
 11.         checks_inner_toplevelsof double1 -double2,         `options'
 12.         checks_inner_toplevelsof double1 -double2 double3, `options'
 13. 
.         checks_inner_toplevelsof -int1,           `options'
 14.         checks_inner_toplevelsof int1 -int2,      `options'
 15.         checks_inner_toplevelsof int1 -int2 int3, `options'
 16. 
.         checks_inner_toplevelsof -int1 -str_32 -double1,                                         `options'
 17.         checks_inner_toplevelsof int1 -str_32 double1 -int2 str_12 -double2,                     `options'
 18.         checks_inner_toplevelsof int1 -str_32 double1 -int2 str_12 -double2 int3 -str_4 double3, `options'
 19. 
.         if ( `c(stata_version)' >= 14.1 ) {
 20.             local forcestrl: disp cond(strpos(lower("`c(os)'"), "windows"), "forcestrl", "")
 21.             checks_inner_toplevelsof -strL1,             `options' `forcestrl'
 22.             checks_inner_toplevelsof strL1 -strL2,       `options' `forcestrl'
 23.             checks_inner_toplevelsof strL1 -strL2 strL3, `options' `forcestrl'
 24.         }
 25. 
.         clear
 26.         set obs 10
 27.         gen x = _n
 28.         gen w = runiform()
 29.         gtoplevelsof x [w = w]
 30.         gtop x [w = w]
 31.         gtop x [w = .]
 32.         gtop x [w = 0]
 33.         gtop x if 0
 34. 
.         clear
 35.         gen x = 1
 36.         gtoplevelsof x
 37. 
.         clear
 38.         set obs 100000
 39.         gen x = _n
 40.         gtoplevelsof x in 1 / 10000 if mod(x, 3) == 0
 41.         gtoplevelsof x if _n < 1
 42.     }
 43. 
.     sysuse auto , clear
 44.     forvalues i = 1 / 100 {
 45.         gtop make price, ntop(`i') silent
 46.     }
 47. 
.     sysuse auto , clear
 48.     gtop price                           , mata
 49.     gtop mpg                             , mata
 50.     gtop price   mpg     foreign         , mata
 51.     gtop foreign mpg     price           , mata
 52.     gtop mpg     foreign price           , mata
 53.     gtop price   make    mpg     foreign , mata
 54.     gtop foreign make    mpg     price   , mata
 55.     gtop mpg     make    foreign price   , mata
 56.     gtop price   mpg     foreign         , mata
 57.     gtop foreign mpg     price           , mata
 58.     gtop mpg     foreign price           , mata
 59.     gtop make    price   mpg     foreign , mata
 60.     gtop make    foreign mpg     price   , mata
 61.     gtop make    mpg     foreign price   , mata
 62.     gtop price   mpg     foreign make    , mata
 63.     gtop foreign mpg     price   make    , mata
 64.     gtop mpg     foreign price   make    , mata
 65. 
.     expand mpg
 66. 
.     gtop price                           , ntop(.) mata(hi)
 67.     gtop mpg                             , ntop(.) mata(hi)
 68.     gtop price   mpg     foreign         , ntop(.) mata(hi)
 69.     gtop foreign mpg     price           , ntop(.) mata(hi)
 70.     gtop mpg     foreign price           , ntop(.) mata(hi)
 71.     gtop price   make    mpg     foreign , ntop(.) mata(hi)
 72.     gtop foreign make    mpg     price   , ntop(.) mata(hi)
 73.     gtop mpg     make    foreign price   , ntop(-.) mata(hi)
 74.     gtop price   mpg     foreign         , ntop(-.) mata(hi)
 75.     gtop foreign mpg     price           , ntop(-.) mata(hi)
 76.     gtop mpg     foreign price           , ntop(-.) mata(hi)
 77.     gtop make    price   mpg     foreign , ntop(-.) mata(hi)
 78.     gtop make    foreign mpg     price   , ntop(-.) mata(hi)
 79.     gtop make    mpg     foreign price   , ntop(-.) mata(hi)
 80.     gtop price   mpg     foreign make    , ntop(-.) mata
 81.     gtop foreign mpg     price   make    , ntop(-.) mata
 82.     gtop mpg     foreign price   make    , ntop(-.) mata
 83. 
.     clear
 84.     set obs 2000
 85.     gen long ix = _n
 86.     gen r  = runiform()
 87.     sort r
 88. 
.     gtop ix, ntop(.) mata
 89.     gtop ix, ntop(.)
 90.     gtop ix, ntop(.) mata(hi) silent
 91. 
.     mata hi.desc()
 92.     mata hi.getPrinted("%16.0g", 1)
 93.     mata hi.desc()
 94. 
.     gtop ix, mata(hi) silent
 95.     * gtop ix, mata(hi) silent ntop(.) alpha
. end

. 
. capture program drop checks_inner_toplevelsof

. program checks_inner_toplevelsof
  1.     syntax anything, [*]
  2.     gtoplevelsof `anything' in 1, `options' miss
  3.     gtoplevelsof `anything' in 1, `options' miss
  4.     gtoplevelsof `anything' if _n == 1, `options' local(hi) miss
  5.     gtoplevelsof `anything' if _n < 10 in 5, `options' s(" | ") cols(", ") miss
  6.     gtoplevelsof `anything', `options' v bench
  7.     gtoplevelsof `anything', `options' ntop(2)
  8.     gtoplevelsof `anything', `options' ntop(0)
  9.     gtoplevelsof `anything', `options' ntop(0) noother
 10.     gtoplevelsof `anything', `options' ntop(0) missrow
 11.     gtoplevelsof `anything', `options' ntop(.)
 12.     gtoplevelsof `anything', `options' ntop(-.)
 13.     gtoplevelsof `anything', `options' freqabove(10000)
 14.     gtoplevelsof `anything', `options' pctabove(5)
 15.     gtoplevelsof `anything', `options' pctabove(100)
 16.     gtoplevelsof `anything', `options' pctabove(100) noother
 17.     gtoplevelsof `anything', `options' groupmiss
 18.     gtoplevelsof `anything', `options' nomiss
 19.     gtoplevelsof `anything', `options' nooth
 20.     gtoplevelsof `anything', `options' oth
 21.     gtoplevelsof `anything', `options' oth(I'm some other group)
 22.     gtoplevelsof `anything', `options' missrow
 23.     gtoplevelsof `anything', `options' missrow(Hello, I'm missing)
 24.     gtoplevelsof `anything', `options' pctfmt(%15.6f)
 25.     gtoplevelsof `anything', `options' novaluelab
 26.     gtoplevelsof `anything', `options' hidecont
 27.     gtoplevelsof `anything', `options' varabb(5)
 28.     gtoplevelsof `anything', `options' colmax(3)
 29.     gtoplevelsof `anything', `options' colstrmax(2)
 30.     gtoplevelsof `anything', `options' numfmt(%9.4f)
 31.     gtoplevelsof `anything', `options' s(", ") cols(" | ")
 32.     gtoplevelsof `anything', `options' v bench
 33.     gtoplevelsof `anything', `options' colstrmax(0) numfmt(%.5g) colmax(0) varabb(1) freqabove(100) nooth
 34.     gtoplevelsof `anything', `options' missrow nooth groupmiss pctabove(2.5)
 35.     gtoplevelsof `anything', `options' missrow groupmiss pctabove(2.5)
 36.     gtoplevelsof `anything', `options' missrow groupmiss pctabove(99)
 37.     gtoplevelsof `anything', `options' s(|) cols(<<) missrow("I am missing ):")
 38.     gtoplevelsof `anything', `options' s(|) cols(<<) matrix(zz) loc(oo)
 39.     gtoplevelsof `anything', `options' loc(toplevels) mat(topmat)
 40.     disp `"`toplevels'"'
 41.     matrix list topmat
 42. end

. 
. ***********************************************************************
. *                               Compare                               *
. ***********************************************************************
. 
. capture program drop compare_toplevelsof

. program compare_toplevelsof
  1.     syntax, [tol(real 1e-6) NOIsily wgt(str) *]
  2. 
.     gettoken wfun wfoo: wgt
  3.     local wfun `wfun'
  4.     local wfoo `wfoo'
  5.     if ( `"`wfoo'"' == "f" ) {
  6.         local wcall_f "[fw = int_unif_0_100]"
  7.         local wgen_f qui gen int_unif_0_100 = int(100 * runiform()) if mod(_n, 100)
  8.     }
  9. 
.     qui `noisily' gen_data, n(500)
 10.     qui expand 100
 11.     qui `noisily' random_draws, random(2)
 12.     `wgen_f'
 13. 
.     local N = trim("`: di %15.0gc _N'")
 14.     di _n(1) "{hline 80}" _n(1) "consistency_gtoplevelsof_gcontract, N = `N', `options' `wgt'" _n(1) "{hline 80}" _n(1)
 15. 
.     compare_inner_gtoplevelsof -str_12,              `options' tol(`tol') wgt(`wcall_f')
 16.     compare_inner_gtoplevelsof str_12 -str_32,       `options' tol(`tol') wgt(`wcall_f')
 17.     compare_inner_gtoplevelsof str_12 -str_32 str_4, `options' tol(`tol') wgt(`wcall_f')
 18. 
.     compare_inner_gtoplevelsof -double1,                 `options' tol(`tol') wgt(`wcall_f')
 19.     compare_inner_gtoplevelsof double1 -double2,         `options' tol(`tol') wgt(`wcall_f')
 20.     compare_inner_gtoplevelsof double1 -double2 double3, `options' tol(`tol') wgt(`wcall_f')
 21. 
.     compare_inner_gtoplevelsof -int1,           `options' tol(`tol') wgt(`wcall_f')
 22.     compare_inner_gtoplevelsof int1 -int2,      `options' tol(`tol') wgt(`wcall_f')
 23.     compare_inner_gtoplevelsof int1 -int2 int3, `options' tol(`tol') wgt(`wcall_f')
 24. 
.     compare_inner_gtoplevelsof -int1 -str_32 -double1,                                         `options' tol(`tol') wgt(`wcall_f')
 25.     compare_inner_gtoplevelsof int1 -str_32 double1 -int2 str_12 -double2,                     `options' tol(`tol') wgt(`wcall_f')
 26.     compare_inner_gtoplevelsof int1 -str_32 double1 -int2 str_12 -double2 int3 -str_4 double3, `options' tol(`tol') wgt(`wcall_f')
 27. 
.     if ( `c(stata_version)' >= 14.1 ) {
 28.         local forcestrl: disp cond(strpos(lower("`c(os)'"), "windows"), "forcestrl", "")
 29.         compare_inner_gtoplevelsof strL1,             `options' tol(`tol') contract `forcestrl' wgt(`wcall_f')
 30.         compare_inner_gtoplevelsof strL1 strL2,       `options' tol(`tol') contract `forcestrl' wgt(`wcall_f')
 31.         compare_inner_gtoplevelsof strL1 strL2 strL3, `options' tol(`tol') contract `forcestrl' wgt(`wcall_f')
 32.     }
 33. end

. 
. capture program drop compare_inner_gtoplevelsof

. program compare_inner_gtoplevelsof
  1.     syntax [anything], [tol(real 1e-6) wgt(str) *]
  2. 
.     if ( "`wgt'" != "" ) {
  3.         local wtxt "; `wgt'"
  4.     }
  5. 
.     local N = trim("`: di %15.0gc _N'")
  6.     local hlen = 36 + length("`anything'") + length("`N'") + length("`wtxt'")
  7.     di as txt _n(2) "Checking contract. N = `N'; varlist = `anything'`wtxt'" _n(1) "{hline `hlen'}"
  8. 
.     preserve
  9.         _compare_inner_gtoplevelsof `anything', `options' tol(`tol') wgt(`wgt')
 10.     restore, preserve
 11.         local in1 = ceil((0.00 + 0.25 * runiform()) * `=_N')
 12.         local in2 = ceil((0.75 + 0.25 * runiform()) * `=_N')
 13.         local from = cond(`in1' < `in2', `in1', `in2')
 14.         local to   = cond(`in1' > `in2', `in1', `in2')
 15.         _compare_inner_gtoplevelsof  `anything' in `from' / `to', `options' tol(`tol') wgt(`wgt')
 16.     restore, preserve
 17.         _compare_inner_gtoplevelsof `anything' if random2 > 0, `options' tol(`tol') wgt(`wgt')
 18.     restore, preserve
 19.         local in1 = ceil((0.00 + 0.25 * runiform()) * `=_N')
 20.         local in2 = ceil((0.75 + 0.25 * runiform()) * `=_N')
 21.         local from = cond(`in1' < `in2', `in1', `in2')
 22.         local to   = cond(`in1' > `in2', `in1', `in2')
 23.         _compare_inner_gtoplevelsof `anything' if random2 < 0 in `from' / `to', `options' tol(`tol') wgt(`wgt')
 24.     restore
 25. end

. 
. capture program drop _compare_inner_gtoplevelsof

. program _compare_inner_gtoplevelsof
  1.     syntax [anything] [if] [in], [NOIsily tol(real 1e-6) contract wgt(str) *]
  2. 
.     if ( "`contract'" == "" ) local contract gcontract
  3. 
.     * cf(Cum) p(Pct) cp(PctCum)
.     local opts freq(N)
  4.     preserve
  5.         qui {
  6.             `noisily' `contract' `anything' `if' `in' `wgt', `opts'
  7.             qui sum N, meanonly
  8.             local r_N = `r(sum)'
  9.             if ( strpos(`"`anything'"', "strL") > 0 ) {
 10.                 gsort -N `anything'
 11.             }
 12.             else {
 13.                 hashsort -N `anything'
 14.             }
 15.             local nl = min(_N, 10)
 16.             keep in 1/`=min(_N, 10)'
 17.             set obs `=_N+1'
 18.             gen byte ID = 1
 19.             replace ID  = 3 in `=_N'
 20.             gen long ix = _n
 21.             gen long Cum = sum(N)
 22.             gen double Pct = 100 * N / `r_N'
 23.             gen double PctCum = 100 * Cum / `r_N'
 24.             replace Pct       = 100 - PctCum[10] in `=_N'
 25.             replace PctCum    = 100 in `=_N'
 26.             replace N         = `r_N' - Cum[10] in `=_N'
 27.             replace Cum       = `r_N' in `=_N'
 28.             local varlist: subinstr local anything "-" "", all
 29.             if ( `:list sizeof varlist' == 1 ) {
 30.                 local levels [:skip:]
 31.                 forvalues i = 1 / `=_N' {
 32.                     local levels `levels' `"`:disp `varlist'[`i']'"'
 33.                 }
 34.             }
 35.         }
 36.         tempfile fg
 37.         qui save `fg'
 38.     restore
 39. 
.     tempname gmat
 40.     preserve
 41.         qui {
 42.             `noisily' gtoplevelsof `anything' `if' `in' `wgt', mat(`gmat')
 43.             if ( `:list sizeof varlist' == 1 ) {
 44.                 forvalues i = 1 / `nl' {
 45.                     * noi disp `i', `"`:word `=`i'+1' of `levels''"', `"`:word `i' of `r(levels)''"'
.                     cap assert (`"`:word `=`i'+1' of `levels''"' == `"`:word `i' of `r(levels)''"')
 46.                     if ( _rc ) {
 47.                         if ( "`if'`in'" == "" ) {
 48.                             noi di as err "    compare_gtoplevelsof_gcontract (failed levels): full range, `anything'"
 49.                         }
 50.                         else if ( "`if'`in'" != "" ) {
 51.                             noi di as err "    compare_gtoplevelsof_gcontract (failed levels): [`if' `in'], `anything'"
 52.                         }
 53.                         exit 198
 54.                     }
 55.                 }
 56.                 if ( "`if'`in'" == "" ) {
 57.                     noi di "    compare_gtoplevelsof_gcontract (passed): full range, same levels as gcontract"
 58.                 }
 59.                 else if ( "`if'`in'" != "" ) {
 60.                     noi di "    compare_gtoplevelsof_gcontract (passed): [`if' `in'], same levels as gcontract"
 61.                 }
 62.             }
 63.             clear
 64.             svmat `gmat', names(col)
 65.             gen long ix = _n
 66.         }
 67.         tempfile fc
 68.         qui save `fc'
 69.     restore
 70. 
.     preserve
 71.     use `fc', clear
 72.         local bad_any = 0
 73.         local bad `anything'
 74.         local bad: subinstr local bad "-" "", all
 75.         local bad: subinstr local bad "+" "", all
 76.         foreach var in N Cum Pct PctCum {
 77.             rename `var' c_`var'
 78.         }
 79.         qui merge 1:1 ix using `fg', assert(3)
 80.         foreach var in N Cum Pct PctCum {
 81.             qui count if ( (abs(`var' - c_`var') > `tol') & (`var' != c_`var'))
 82.             if ( `r(N)' > 0 ) {
 83.                 gen bad_`var' = abs(`var' - c_`var') * (`var' != c_`var')
 84.                 local bad `bad' *`var'
 85.                 di "    `var' has `:di r(N)' mismatches".
 86.                 local bad_any = 1
 87.                 order *`var'
 88.             }
 89.         }
 90.         if ( `bad_any' ) {
 91.             if ( "`if'`in'" == "" ) {
 92.                 di "    compare_gtoplevelsof_gcontract (failed): full range, `anything'"
 93.             }
 94.             else if ( "`if'`in'" != "" ) {
 95.                 di "    compare_gtoplevelsof_gcontract (failed): [`if' `in'], `anything'"
 96.             }
 97.             order `bad'
 98.             egen bad_any = rowmax(bad_*)
 99.             l `bad' if bad_any
100.             sum bad_*
101.             desc
102.             exit 9
103.         }
104.         else {
105.             if ( "`if'`in'" == "" ) {
106.                 di "    compare_gtoplevelsof_gcontract (passed): full range, gcontract results equal to contract (tol = `tol')"
107.             }
108.             else if ( "`if'`in'" != "" ) {
109.                 di "    compare_gtoplevelsof_gcontract (passed): [`if' `in'], gcontract results equal to contract (tol = `tol')"
110.             }
111.         }
112.     restore
113. end

. 
. ***********************************************************************
. *                             Benchmarks                              *
. ***********************************************************************
. 
. capture program drop bench_toplevelsof

. program bench_toplevelsof
  1.     syntax, [tol(real 1e-6) bench(real 1) n(int 500) NOIsily *]
  2. 
.     qui gen_data, n(`n')
  3.     qui expand `=100 * `bench''
  4.     qui `noisily' random_draws, random(1) double
  5.     qui hashsort random1
  6. 
.     local N = trim("`: di %15.0gc _N'")
  7.     local J = trim("`: di %15.0gc `n''")
  8. 
.     di as txt _n(1)
  9.     di as txt "Benchmark toplevelsof vs contract (unsorted), obs = `N', J = `J' (in seconds)"
 10.     di as txt "    gcontract | gtoplevelsof | ratio (c/t) | varlist"
 11.     di as txt "    --------- | ------------ | ----------- | -------"
 12. 
.     versus_toplevelsof str_12,              `options'
 13.     versus_toplevelsof str_12 str_32,       `options'
 14.     versus_toplevelsof str_12 str_32 str_4, `options'
 15. 
.     versus_toplevelsof double1,                 `options'
 16.     versus_toplevelsof double1 double2,         `options'
 17.     versus_toplevelsof double1 double2 double3, `options'
 18. 
.     versus_toplevelsof int1,           `options'
 19.     versus_toplevelsof int1 int2,      `options'
 20.     versus_toplevelsof int1 int2 int3, `options'
 21. 
.     versus_toplevelsof int1 str_32 double1,                                        `options'
 22.     versus_toplevelsof int1 str_32 double1 int2 str_12 double2,                    `options'
 23.     versus_toplevelsof int1 str_32 double1 int2 str_12 double2 int3 str_4 double3, `options'
 24. 
.     di as txt _n(1)
 25.     di as txt "Benchmark toplevelsof vs contract (plus preserve, sort, keep, restore), obs = `N', J = `J' (in seconds)"
 26.     di as txt "    gcontract | gtoplevelsof | ratio (c/t) | varlist"
 27.     di as txt "    --------- | ------------ | ----------- | -------"
 28. 
.     versus_toplevelsof str_12,              `options' sorted
 29.     versus_toplevelsof str_12 str_32,       `options' sorted
 30.     versus_toplevelsof str_12 str_32 str_4, `options' sorted
 31. 
.     versus_toplevelsof double1,                 `options' sorted
 32.     versus_toplevelsof double1 double2,         `options' sorted
 33.     versus_toplevelsof double1 double2 double3, `options' sorted
 34. 
.     versus_toplevelsof int1,           `options' sorted
 35.     versus_toplevelsof int1 int2,      `options' sorted
 36.     versus_toplevelsof int1 int2 int3, `options' sorted
 37. 
.     versus_toplevelsof int1 str_32 double1,                                        `options' sorted
 38.     versus_toplevelsof int1 str_32 double1 int2 str_12 double2,                    `options' sorted
 39.     versus_toplevelsof int1 str_32 double1 int2 str_12 double2 int3 str_4 double3, `options' sorted
 40. 
.     di _n(1) "{hline 80}" _n(1) "bench_toplevelsof, `options'" _n(1) "{hline 80}" _n(1)
 41. end

. 
. capture program drop versus_toplevelsof

. program versus_toplevelsof, rclass
  1.     syntax [anything], [sorted *]
  2. 
.     local stats       ""
  3.     local percentiles ""
  4. 
.     local opts freq(freq) cf(cf) p(p) cp(cp)
  5. 
.     if ( "`sorted'" == "" ) {
  6.     preserve
  7.         timer clear
  8.         timer on 42
  9.         qui gcontract `anything' `if' `in', `opts'
 10.         timer off 42
 11.         qui timer list
 12.         local time_contract = r(t42)
 13.     restore
 14.     }
 15.     else {
 16.         timer clear
 17.         timer on 42
 18.         qui {
 19.             preserve
 20.             gcontract `anything' `if' `in', `opts'
 21.             if ( strpos(`"`anything'"', "strL") > 0 ) {
 22.                 gsort -freq `anything'
 23.             }
 24.             else {
 25.                 hashsort -freq `anything'
 26.             }
 27.             keep in 1/10
 28.             restore
 29.         }
 30.         timer off 42
 31.         qui timer list
 32.         local time_contract = r(t42)
 33.     }
 34. 
.     timer clear
 35.     timer on 43
 36.     qui gtoplevelsof `anything' `if' `in'
 37.     timer off 43
 38.     qui timer list
 39.     local time_gcontract = r(t43)
 40. 
.     local rs = `time_contract'  / `time_gcontract'
 41.     di as txt "    `:di %9.3g `time_contract'' | `:di %12.3g `time_gcontract'' | `:di %11.3g `rs'' | `anything'"
 42. end

. capture program drop checks_isid

. program checks_isid
  1.     syntax, [tol(real 1e-6) NOIsily *]
  2.     di _n(1) "{hline 80}" _n(1) "checks_isid, `options'" _n(1) "{hline 80}" _n(1)
  3. 
.     qui `noisily' gen_data, n(5000)
  4.     qui expand 2
  5.     gen long ix  = _n
  6.     gen byte ind = 0
  7. 
.     checks_inner_isid str_12,              `options'
  8.     checks_inner_isid str_12 str_32,       `options'
  9.     checks_inner_isid str_12 str_32 str_4, `options'
 10. 
.     checks_inner_isid double1,                 `options'
 11.     checks_inner_isid double1 double2,         `options'
 12.     checks_inner_isid double1 double2 double3, `options'
 13. 
.     checks_inner_isid int1,           `options'
 14.     checks_inner_isid int1 int2,      `options'
 15.     checks_inner_isid int1 int2 int3, `options'
 16. 
.     checks_inner_isid int1 str_32 double1,                                        `options'
 17.     checks_inner_isid int1 str_32 double1 int2 str_12 double2,                    `options'
 18.     checks_inner_isid int1 str_32 double1 int2 str_12 double2 int3 str_4 double3, `options'
 19. 
.     if ( `c(stata_version)' >= 14.1 ) {
 20.         local forcestrl: disp cond(strpos(lower("`c(os)'"), "windows"), "forcestrl", "")
 21.         checks_inner_isid strL1,             `options' `forcestrl'
 22.         checks_inner_isid strL1 strL2,       `options' `forcestrl'
 23.         checks_inner_isid strL1 strL2 strL3, `options' `forcestrl'
 24.     }
 25. 
.     clear
 26.     gen x = 1
 27.     cap gisid x
 28.     assert _rc == 0
 29. 
.     clear
 30.     set obs 4
 31.     gen x = 1
 32.     gen y = _n
 33.     gen z = _n
 34.     replace y = 1 in 1/2
 35.     replace x = 2 in 3/4
 36.     gisid x y z, v
 37. 
.     gisid x y z if 0, v
 38.     gisid x y z if x, v
 39.     gisid x y z in 1, v
 40. 
.     replace y = x
 41.     replace z = 1 in 1/2
 42.     cap noi gisid x y z, v
 43.     assert _rc == 459
 44. end

. 
. capture program drop checks_inner_isid

. program checks_inner_isid
  1.     syntax varlist, [*]
  2.     cap gisid `varlist', `options' v bench missok
  3.     assert _rc == 459
  4. 
.     cap gisid `varlist' in 1, `options' missok
  5.     assert _rc == 0
  6. 
.     cap gisid `varlist' if _n == 1, `options' missok
  7.     assert _rc == 0
  8. 
.     cap gisid `varlist' if _n < 10 in 5, `options' missok
  9.     assert _rc == 0
 10. 
.     cap gisid ix `varlist', `options' v bench missok
 11.     assert _rc == 0
 12. 
.     preserve
 13.     sort `varlist'
 14.     cap noi gisid `varlist' ix, `options' v bench missok
 15.     assert _rc == 0
 16. 
.     qui replace ix  = _n
 17.     qui replace ix  = 1 in 1/2
 18.     qui replace ind = 1 in 3/4
 19.     cap gisid  ind ix `varlist', `options' v bench missok
 20.     assert _rc == 459
 21.     restore
 22. end

. 
. ***********************************************************************
. *                               Compare                               *
. ***********************************************************************
. 
. capture program drop compare_isid

. program compare_isid
  1.     syntax, [tol(real 1e-6) NOIsily *]
  2. 
.     qui `noisily' gen_data, n(500)
  3.     qui expand 100
  4. 
.     local N    = trim("`: di %15.0gc _N'")
  5.     local hlen = 20 + length("`options'") + length("`N'")
  6.     di _n(1) "{hline 80}" _n(1) "compare_isid, N = `N', `options'" _n(1) "{hline 80}" _n(1)
  7. 
.     compare_inner_isid str_12,              `options'
  8.     compare_inner_isid str_12 str_32 str_4, `options'
  9. 
.     compare_inner_isid double1,                 `options'
 10.     compare_inner_isid double1 double2 double3, `options'
 11. 
.     compare_inner_isid int1,           `options'
 12.     compare_inner_isid int1 int2,      `options'
 13.     compare_inner_isid int1 int2 int3, `options'
 14. 
.     compare_inner_isid str_32 int3 double3  , `options'
 15.     compare_inner_isid int1 double2 double3 , `options'
 16.     compare_inner_isid double? str_* int?   , `options'
 17. 
.     if ( `c(stata_version)' >= 14.1 ) {
 18.         local forcestrl: disp cond(strpos(lower("`c(os)'"), "windows"), "forcestrl", "")
 19.         compare_inner_isid strL1,             `options' `forcestrl' sort
 20.         compare_inner_isid strL1 strL2,       `options' `forcestrl' sort
 21.         compare_inner_isid strL1 strL2 strL3, `options' `forcestrl' sort
 22.     }
 23. end

. 
. capture program drop compare_inner_isid

. program compare_inner_isid
  1.     syntax varlist, [sort *]
  2. 
.     tempvar rsort ix
  3.     gen `rsort' = runiform()
  4.     sort `rsort'
  5.     gen long `ix' = _n
  6. 
.     cap isid `varlist', missok
  7.     local rc_isid = _rc
  8.     cap gisid `varlist', missok `options'
  9.     local rc_gisid = _rc
 10.     check_rc `rc_isid' `rc_gisid' , by( `varlist')
 11. 
.     * make sure sorted check gives same result
. 
.     if ( `"`sort'"' == "" ) hashsort `varlist'
 12.     else sort `varlist'
 13. 
.     cap gisid `varlist', missok `options'
 14.     local rc_gisid = _rc
 15.     check_rc `rc_isid' `rc_gisid' , by([sorted] `varlist')
 16. 
.     cap isid `ix' `varlist', missok
 17.     local rc_isid = _rc
 18.     cap gisid `ix' `varlist', missok `options'
 19.     local rc_gisid = _rc
 20.     check_rc `rc_isid' `rc_gisid' , by( ix `varlist')
 21. 
.     * make sure sorted check gives same result
. 
.     if ( `"`sort'"' == "" ) hashsort `ix' `varlist'
 22.     else sort `ix' `varlist'
 23. 
.     cap gisid `ix' `varlist', missok `options'
 24.     local rc_gisid = _rc
 25.     check_rc `rc_isid' `rc_gisid' , by([sorted] ix `varlist')
 26. 
.     cap isid `rsort' `varlist', missok
 27.     local rc_isid = _rc
 28.     cap gisid `rsort' `varlist', missok `options'
 29.     local rc_gisid = _rc
 30.     check_rc `rc_isid' `rc_gisid' , by( rsort `varlist')
 31. 
.     * make sure sorted check gives same result
. 
.     if ( `"`sort'"' == "" ) hashsort `rsort' `varlist'
 32.     else sort `rsort' `varlist'
 33. 
.     cap isid `rsort' `varlist', missok
 34.     local rc_isid = _rc
 35.     cap gisid `rsort' `varlist', missok `options'
 36.     local rc_gisid = _rc
 37.     check_rc `rc_isid' `rc_gisid' , by([sorted] rsort `varlist')
 38. 
.     * ---------------------------------------------------------------------
.     * ---------------------------------------------------------------------
. 
.     qui replace `ix' = `=_N / 2' if _n > `=_N / 2'
 39.     cap isid `ix'
 40.     local rc_isid = _rc
 41.     cap gisid `ix', `options'
 42.     local rc_gisid = _rc
 43.     check_rc `rc_isid' `rc_gisid' , by( ix)
 44. 
.     * ---------------------------------------------------------------------
.     * ---------------------------------------------------------------------
. 
.     preserve
 45.         qui keep in 100 / `=ceil(`=_N / 2')'
 46.         cap isid `ix' `varlist', missok
 47.         local rc_isid = _rc
 48.     restore
 49.     cap gisid `ix' `varlist' in 100 / `=ceil(`=_N / 2')', missok `options'
 50.     local rc_gisid = _rc
 51.     check_rc  `rc_isid' `rc_gisid' , by( ix `varlist' in 100 / `=ceil(`=_N / 2')')
 52. 
.     preserve
 53.         qui keep in `=ceil(`=_N / 2')' / `=_N'
 54.         cap isid `ix' `varlist', missok
 55.         local rc_isid = _rc
 56.     restore
 57.     cap gisid `ix' `varlist' in `=ceil(`=_N / 2')' / `=_N', missok `options'
 58.     local rc_gisid = _rc
 59.     check_rc  `rc_isid' `rc_gisid' , by( ix `varlist' in `=ceil(`=_N / 2')' / `=_N')
 60. 
.     * ---------------------------------------------------------------------
.     * ---------------------------------------------------------------------
. 
.     preserve
 61.         qui keep if _n < `=_N / 2'
 62.         cap isid `ix' `varlist', missok
 63.         local rc_isid = _rc
 64.     restore
 65.     cap gisid `ix' `varlist' if _n < `=_N / 2', missok
 66.     local rc_gisid = _rc
 67.     check_rc  `rc_isid' `rc_gisid' , by( ix `varlist' if _n < `=_N / 2')
 68. 
.     preserve
 69.         qui keep if _n > `=_N / 2'
 70.         cap isid `ix' `varlist', missok
 71.         local rc_isid = _rc
 72.     restore
 73.     cap gisid `ix' `varlist' if _n > `=_N / 2', missok `options'
 74.     local rc_gisid = _rc
 75.     check_rc  `rc_isid' `rc_gisid' , by( ix `varlist' if _n > `=_N / 2')
 76. 
.     * ---------------------------------------------------------------------
.     * ---------------------------------------------------------------------
. 
.     qui replace `ix' = 100 in 1 / 100
 77. 
.     preserve
 78.         qui keep if _n < `=_N / 4' in 100 / `=ceil(`=_N / 2')'
 79.         cap isid `ix' `varlist', missok
 80.         local rc_isid = _rc
 81.     restore
 82.     cap gisid `ix' `varlist' if _n < `=_N / 4' in 100 / `=ceil(`=_N / 2')', missok `options'
 83.     local rc_gisid = _rc
 84.     check_rc  `rc_isid' `rc_gisid' , by( ix `varlist' if _n < `=_N / 4' in 100 / `=ceil(`=_N / 2')')
 85. 
.     preserve
 86.         qui keep if _n > `=_N / 4' in `=ceil(`=_N / 1.5')' / `=_N'
 87.         cap isid `ix' `varlist', missok
 88.         local rc_isid = _rc
 89.     restore
 90.     cap gisid `ix' `varlist' if _n > `=_N / 4' in `=ceil(`=_N / 1.5')' / `=_N', missok
 91.     local rc_gisid = _rc
 92.     check_rc  `rc_isid' `rc_gisid' , by( ix `varlist' if _n > `=_N / 4' in `=ceil(`=_N / 1.5')' / `=_N')
 93. 
.     di _n(1)
 94. end

. 
. capture program drop check_rc

. program check_rc
  1.     syntax anything, by(str)
  2. 
.     tokenize `anything'
  3.     local rc_isid  `1'
  4.     local rc_gisid `2'
  5. 
.     if ( `rc_isid' != `rc_gisid' ) {
  6.         if ( `rc_isid' & (`rc_gisid' == 0) ) {
  7.             di as err "    compare_isid (failed): gisid `by' was an id but isid returned error r(`rc_isid')"
  8.             exit `rc_isid'
  9.         }
 10.         else if ( (`rc_isid' == 0) & `rc_gisid' ) {
 11.             di as err "    compare_isid (failed): isid `by' was an id but gisid returned error r(`rc_gisid')"
 12.             exit `rc_gisigd'
 13.         }
 14.         else {
 15.             di as err "    compare_isid (failed): `by' was not an id but isid and gisid returned different errors r(`rc_isid') vs r(`rc_gisid')"
 16.             exit `rc_gisid'
 17.         }
 18.     }
 19.     else {
 20.         if ( _rc ) {
 21.             di as txt "    compare_isid (passed): `by' was not an id"
 22.         }
 23.         else {
 24.             di as txt "    compare_isid (passed): `by' was an id"
 25.         }
 26.     }
 27. end

. 
. ***********************************************************************
. *                             Benchmarks                              *
. ***********************************************************************
. 
. capture program drop bench_isid

. program bench_isid
  1.     syntax, [tol(real 1e-6) bench(int 1) n(int 500) NOIsily *]
  2. 
.     qui `noisily' gen_data, n(`n')
  3.     qui expand `=100 * `bench''
  4.     qui gen rsort = rnormal()
  5.     qui sort rsort
  6. 
.     local N = trim("`: di %15.0gc _N'")
  7.     local J = trim("`: di %15.0gc `n''")
  8. 
.     di as txt _n(1)
  9.     di as txt "Benchmark vs isid, obs = `N', all calls include an index to ensure uniqueness (in seconds)"
 10.     di as txt "     isid | fisid | gisid | ratio (i/g) | ratio (f/g) | varlist"
 11.     di as txt "     ---- | ----- | ----- | ----------- | ----------- | -------"
 12. 
.     versus_isid str_12,              `options' fisid unique
 13.     versus_isid str_12 str_32,       `options' fisid unique
 14.     versus_isid str_12 str_32 str_4, `options' fisid unique
 15. 
.     versus_isid double1,                 `options' fisid unique
 16.     versus_isid double1 double2,         `options' fisid unique
 17.     versus_isid double1 double2 double3, `options' fisid unique
 18. 
.     versus_isid int1,           `options' fisid unique
 19.     versus_isid int1 int2,      `options' fisid unique
 20.     versus_isid int1 int2 int3, `options' fisid unique
 21. 
.     versus_isid int1 str_32 double1,                                        unique `options'
 22.     versus_isid int1 str_32 double1 int2 str_12 double2,                    unique `options'
 23.     versus_isid int1 str_32 double1 int2 str_12 double2 int3 str_4 double3, unique `options'
 24. 
.     di as txt _n(1)
 25.     di as txt "Benchmark vs isid, obs = `N', J = `J' (in seconds)"
 26.     di as txt "     isid | fisid | gisid | ratio (i/g) | ratio (f/g) | varlist"
 27.     di as txt "     ---- | ----- | ----- | ----------- | ----------- | -------"
 28. 
.     versus_isid str_12,              `options' fisid
 29.     versus_isid str_12 str_32,       `options' fisid
 30.     versus_isid str_12 str_32 str_4, `options' fisid
 31. 
.     versus_isid double1,                 `options' fisid
 32.     versus_isid double1 double2,         `options' fisid
 33.     versus_isid double1 double2 double3, `options' fisid
 34. 
.     versus_isid int1,           `options' fisid
 35.     versus_isid int1 int2,      `options' fisid
 36.     versus_isid int1 int2 int3, `options' fisid
 37. 
.     versus_isid int1 str_32 double1,                                        `options'
 38.     versus_isid int1 str_32 double1 int2 str_12 double2,                    `options'
 39.     versus_isid int1 str_32 double1 int2 str_12 double2 int3 str_4 double3, `options'
 40. 
.     di as txt _n(1) "{hline 80}" _n(1) "bench_isid, `options'" _n(1) "{hline 80}" _n(1)
 41. end

. 
. capture program drop versus_isid

. program versus_isid, rclass
  1.     syntax varlist, [fisid unique *]
  2.     if ( "`unique'" == "unique" ) {
  3.         tempvar ix
  4.         gen `ix' = `=_N' - _n
  5.         if ( strpos("`varlist'", "str") ) qui tostring `ix', replace
  6.     }
  7. 
.     preserve
  8.         timer clear
  9.         timer on 42
 10.         cap isid `varlist' `ix', missok
 11.         assert inlist(_rc, 0, 459)
 12.         timer off 42
 13.         qui timer list
 14.         local time_isid = r(t42)
 15.     restore
 16. 
.     preserve
 17.         timer clear
 18.         timer on 43
 19.         cap gisid `varlist' `ix', `options' missok
 20.         assert inlist(_rc, 0, 459)
 21.         timer off 43
 22.         qui timer list
 23.         local time_gisid = r(t43)
 24.     restore
 25. 
.     if ( "`fisid'" == "fisid" ) {
 26.     preserve
 27.         timer clear
 28.         timer on 44
 29.         cap fisid `varlist' `ix', missok
 30.         if ( inlist(_rc, 0, 459) ) {
 31.             timer off 44
 32.             qui timer list
 33.             local time_fisid = r(t44)
 34.         }
 35.         else {
 36.             di "(note: fisid failed)"
 37.             timer off 44
 38.             local time_fisid = .
 39.         }
 40.     restore
 41.     }
 42.     else {
 43.         local time_fisid = .
 44.     }
 45. 
.     local rs = `time_isid'  / `time_gisid'
 46.     local rf = `time_fisid' / `time_gisid'
 47.     di as txt "    `:di %5.3g `time_isid'' | `:di %5.3g `time_fisid'' | `:di %5.3g `time_gisid'' | `:di %11.3g `rs'' | `:di %11.3g `rf'' | `varlist'"
 48. end

. * Checks in greshape
. * ------------------
. *
. * 1. Unique j
. * 2. Unique Xi
. * 3. Missing j values
. * 4. preserve, restore
. * 5. Unique i
. * 6. unsorted
. 
. capture program drop checks_greshape

. program checks_greshape
  1.     qui checks_inner_greshape_errors
  2.     qui checks_inner_greshape_errors nochecks
  3. 
.     qui checks_inner_greshape_long
  4.     qui checks_inner_greshape_long nochecks
  5.     qui checks_inner_greshape_long " " xi
  6.     qui checks_inner_greshape_long nochecks xi
  7. 
.     qui checks_inner_greshape_wide
  8.     qui checks_inner_greshape_wide nochecks
  9.     qui checks_inner_greshape_wide " " xi
 10.     qui checks_inner_greshape_wide nochecks xi
 11. 
.     * Random check: chars, labels, etc.
.     * ---------------------------------
. 
.     sysuse auto, clear
 12.     note price: Hello, there!
 13.     note price: GENERAL KENOBI!!!
 14.     note price: You are a bold one.
 15.     char price[varname] #GiraffesAreFake
 16.     char price[note17]  This should not be listed by notes
 17. 
.     note mpg: I don't like sand
 18.     note mpg: It's coarse and rough and irritating and it gets everywhere
 19.     note mpg: It used to bother me that Anakin commits genocide and Padme stays with him.
 20.     note mpg: But I think it's just supposed to show how much she's drawn to the dark side.
 21.     note mpg: I mean, she did leave Jar Jar in charge, and Jar Jar did give Palpatine emergency powers
 22.     note mpg: #JarJarWasSupposedToBeASithLordButYallRuinedItWithYourBickering
 23.     char mpg[varname] Thisis my fight song
 24.     char mpg[note11]  My I'm all right song
 25. 
.     label define pr .a A .b B
 26.     label define mp .a C .b D
 27.     label values price pr
 28.     label values mpg   mp
 29.     replace price = .a if mod(_n, 2)
 30.     replace mpg   = .b if _n > 50
 31. 
.     preserve
 32.         greshape wide price mpg, i(make) j(foreign)
 33.         desc price* mpg*
 34.     restore, preserve
 35.         greshape wide price mpg, i(make) j(foreign) labelf(#stublabel#, #keyname# == #keyvaluelabel#)
 36.         desc price* mpg*
 37.     restore, preserve
 38.         greshape wide price mpg, i(make) j(foreign) labelf(#stubname#, #keylabel# == #keyvalue#)
 39.         desc price* mpg*
 40.     restore, preserve
 41.         label drop origin
 42.         greshape wide price mpg, i(make) j(foreign) labelf(#stublabel#, #keyname# == #keyvaluelabel#)
 43.         desc price* mpg*
 44.     restore, preserve
 45.         decode foreign, gen(fstr)
 46.         greshape wide price mpg, i(make) j(fstr) labelf(#stublabel#, #keyname# == #keyvaluelabel#)
 47.         desc price* mpg*
 48.     restore, preserve
 49.         decode foreign, gen(fstr)
 50.         greshape wide price mpg, i(make) j(fstr)
 51.         desc price* mpg*
 52.     restore, preserve
 53.         decode foreign, gen(fstr)
 54.         greshape wide price mpg, i(make) j(fstr foreign)
 55.         desc price* mpg*
 56.     restore, preserve
 57.         decode foreign, gen(fstr)
 58.         greshape wide price mpg, i(make) j(foreign fstr) labelf(#stublabel#, #keyname# == #keyvaluelabel#)
 59.         desc price* mpg*
 60.     restore
 61. 
.     preserve
 62.         greshape wide price mpg, i(make) j(foreign)
 63.         greshape long price mpg, i(make) j(foreign)
 64. 
.         greshape wide price mpg, i(make) j(foreign)
 65.         gen long   price2 = _n    
 66.         gen double price3 = 3.14
 67.         note price2: When the night!
 68.         note price3: Has coooome....
 69.         greshape long price mpg, i(make) j(foreign)
 70.     restore
 71. 
.     preserve
 72.         greshape spread price, i(make) j(foreign) xi(drop)
 73.         greshape gather _*, j(foreign) values(price)
 74.     restore
 75. 
.     preserve
 76.         greshape spread mpg, i(make) j(foreign) xi(drop)
 77.         greshape gather _*,  j(foreign) values(mpg)
 78.     restore
 79. 
.     preserve
 80.         greshape spread price mpg,   i(make) j(foreign) xi(drop)
 81.         greshape gather price* mpg*, j(foreign) values(price_mpg)
 82.     restore
 83. 
.     gen long   price2 = _n    
 84.     gen double price3 = 3.14
 85.     note price2: When the night!
 86.     note price3: Has coooome....
 87. 
.     preserve
 88.         greshape spread price, i(make) j(foreign) xi(drop)
 89.         greshape gather _*, j(foreign) values(price)
 90.     restore
 91. 
.     preserve
 92.         greshape spread mpg, i(make) j(foreign) xi(drop)
 93.         greshape gather _*,  j(foreign) values(mpg)
 94.     restore
 95.                                                               
.     preserve
 96.         greshape spread price mpg,   i(make) j(foreign) xi(drop)
 97.         greshape gather price* mpg*, j(foreign) values(price_mpg)
 98.     restore
 99. 
.     * Check dropmiss
.     * --------------
. 
.     clear
100.     set obs 10
101.     gen i = _n
102.     gen x1 = 1
103.     gen x2 = 2
104.     gen z1 = "a"
105.     gen z2 = "bb"
106.     preserve
107.         greshape gather x*, values(x) key(var) dropmiss
108.     restore, preserve
109.         greshape long x, by(i) key(var) dropmiss nochecks
110.     restore, preserve
111.         greshape long x, by(i) key(var) dropmiss
112.     restore, preserve
113.         greshape gather z*, values(z) key(var) dropmiss
114.     restore, preserve
115.         greshape long z, by(i) key(var) dropmiss nochecks
116.     restore
117.         greshape long z, by(i) key(var) dropmiss
118. 
.     clear
119.     set obs 10
120.     gen i = _n
121.     gen x1 = 1
122.     gen x2 = 2
123.     gen x3 = .
124.     gen z1 = "a"
125.     gen z2 = "bb"
126.     gen z3 = ""
127.     preserve
128.         greshape gather x*, values(x) key(var) dropmiss
129.     restore, preserve
130.         greshape long x, by(i) key(var) dropmiss nochecks
131.     restore, preserve
132.         greshape long x, by(i) key(var) dropmiss
133.     restore, preserve
134.         greshape gather z*, values(z) key(var) dropmiss
135.     restore, preserve
136.         greshape long z, by(i) key(var) dropmiss nochecks
137.     restore
138.         greshape long z, by(i) key(var) dropmiss
139. 
.     clear
140.     set obs 10
141.     gen i = _n
142.     gen x1 = 1
143.     gen x2 = 2
144.     gen x3 = 3
145.     gen x4 = .
146.     gen x5 = 5
147.     replace x1 = . in 1
148.     replace x2 = . in 1
149.     replace x3 = . in 1
150.     replace x5 = . in 1
151.     replace x1 = . in 2
152.     replace x2 = . in 3
153.     replace x3 = . in 4
154.     replace x5 = . in 5
155.     replace x1 = . in 6
156.     replace x2 = . in 7
157.     replace x3 = . in 8
158.     replace x5 = . in 9
159. 
.     gen z1 = "a"
160.     gen z2 = "bb"
161.     gen z3 = "ccc"
162.     gen z4 = ""
163.     gen z5 = "eeeee"
164.     replace z1 = "" in 1
165.     replace z2 = "" in 1
166.     replace z3 = "" in 1
167.     replace z5 = "" in 1
168.     replace z1 = "" in 2
169.     replace z2 = "" in 3
170.     replace z3 = "" in 4
171.     replace z5 = "" in 5
172.     replace z1 = "" in 6
173.     replace z2 = "" in 7
174.     replace z3 = "" in 8
175.     replace z5 = "" in 9
176. 
.     preserve
177.         greshape gather x*, values(x) key(var) dropmiss
178.     restore, preserve
179.         greshape long x, by(i) key(var) dropmiss nochecks
180.     restore, preserve
181.         greshape long x, by(i) key(var) dropmiss
182.     restore, preserve
183.         greshape gather z*, values(z) key(var) dropmiss
184.     restore, preserve
185.         greshape long z, by(i) key(var) dropmiss nochecks
186.     restore, preserve
187.         greshape long z, by(i) key(var) dropmiss
188.     restore, preserve
189.         greshape long x z, by(i) key(var) dropmiss
190.     restore, preserve
191.         greshape long x z, by(i) key(var) nochecks dropmiss
192.     restore, preserve
193.         greshape long x z, by(i) key(var) nochecks
194.     restore
195.         greshape long x z, by(i) key(var)
196. 
. end

. 
. capture program drop compare_greshape

. program compare_greshape
  1.     local n 500
  2.     qui gen_data, n(`n')
  3.     qui expand 100
  4.     qui `noisily' random_draws, random(2) double
  5.     gen long   ix_num = _n
  6.     gen str    ix_str = "str" + string(_n)
  7.     gen double ix_dbl = _pi + _n
  8.     cap drop strL*
  9.     qui hashsort random1
 10. 
.     local N = trim("`: di %15.0gc _N'")
 11.     local J = trim("`: di %15.0gc `n''")
 12. 
.     di _n(1) "{hline 80}" _n(1) "compare_greshape, N = `N', J = `J' `options'" _n(1) "{hline 80}" _n(1)
 13. 
.     rename double? dbl?
 14.     rename int?    num?
 15. 
.     compare_fail_greshape versus_greshape dbl random,      j(_j) i(ix_num num1)
 16.     compare_fail_greshape versus_greshape dbl random,      j(_j) i(ix_num num1 num2)
 17.     compare_fail_greshape versus_greshape dbl random str_, j(_j) i(ix_num num1 num2 num3) string
 18. 
.     compare_fail_greshape versus_greshape num random,      j(_j) i(ix_dbl dbl1)
 19.     compare_fail_greshape versus_greshape num random str_, j(_j) i(ix_dbl dbl1 dbl2 dbl3) string
 20. 
.     compare_fail_greshape versus_greshape dbl num random, j(_j) i(ix_str str_32)
 21.     compare_fail_greshape versus_greshape dbl num random, j(_j) i(ix_str str_32 str_12 str_4) string
 22. 
.     compare_fail_greshape versus_greshape random, j(_j) i(ix_str str_32 num3 dbl3) string
 23.     compare_fail_greshape versus_greshape random, j(_j) i(ix_num num1 dbl2 dbl3)   string
 24. 
.     disp
 25. end

. 
. capture program drop compare_fail_greshape

. program compare_fail_greshape
  1.     gettoken cmd 0: 0
  2.     syntax [anything], [tol(real 1e-6) *]
  3.     cap `cmd' `0'
  4.     if ( _rc ) {
  5.         di "    compare_greshape (failed): `anything', `options'"
  6.         exit _rc
  7.     }
  8.     else {
  9.         di "    compare_greshape (passed): greshape wide/long gave identical data (via cf); `anything', `options'"
 10.     }
 11. end

. 
. ***********************************************************************
. *                               Errors                                *
. ***********************************************************************
. 
. capture program drop checks_inner_greshape_errors

. program checks_inner_greshape_errors
  1. 
.     foreach v in v1 v2 {
  2.         clear
  3.         set obs 5
  4.         gen i1 = _n
  5.         gen i2 = -_n
  6.         gen i3 = "why?" + string(mod(_n, 3))
  7.         gen i4 = "hey" + string(-_n) + "thisIsLongRight?"
  8.         expand 3
  9.         if "`v'" == "v1" bys i1: gen j = "@#" + string(_n) + "|"
 10.         else bys i1: gen j = _n + _N
 11.         gen w = "|" + string(_n / 3) + "/"
 12.         gen x = _N - _n
 13.         gen y = _n / 2
 14.         gen r = runiform()
 15.         sort r
 16.         drop r
 17. 
.         preserve
 18.             greshape wide x y w, i(i1) j(j)
 19.             assert _rc == 0
 20.         restore, preserve
 21.             cap greshape wide x, i(i1) j(j)
 22.             assert _rc == 9
 23.         restore, preserve
 24.             if "`v'" == "v1" replace j = "2" if i1 == 1
 25.             else replace j = 2 if i1 == 1
 26.             cap greshape wide x y, i(i1) j(j)
 27.             assert _rc == 9
 28.         restore, preserve
 29.             rename (i3 i4) (a3 a4)
 30.             cap greshape long a, i(i1 i2) j(_j)
 31.             assert _rc == 9
 32.         restore, preserve
 33.             cap greshape long i, i(i1 i2 j) j(_j)
 34.             assert _rc == 198
 35.         restore, preserve
 36.             cap greshape long a, i(i1 i? j) j(_j)
 37.             assert _rc == 111
 38.         restore, preserve
 39.             rename (i3 i4) (a3 a4)
 40.             cap greshape long a, i(i1 i? j) j(_j)
 41.             assert _rc == 0
 42.         restore
 43. 
.         label var i3 "hey-o i3"
 44.         label var i4 "bye-a i4"
 45.         preserve
 46.             greshape gather i3 i4, values(val) by(i1 i2) xi(drop)
 47.             l in 1/10
 48.         restore, preserve
 49.             greshape gather i3 i4, values(val) by(i1 i2) xi(drop) uselabels
 50.             l in 1/10
 51.         restore, preserve
 52.             greshape gather i3 i4, values(val) by(i1 i2) xi(drop) uselabels(i3)
 53.             l in 1/10
 54.         restore, preserve
 55.             greshape gather i3 i4, values(val) by(i1 i2) xi(drop) uselabels(i3, exclude)
 56.             l in 1/10
 57.         restore
 58.     }
 59. 
.     clear
 60.     set obs 5
 61.     gen bykey      = _n
 62.     gen st1ub      = _n
 63.     gen st2ub      = -_n
 64.     gen foo3bar    = "foobar" + string(mod(_n, 3))
 65.     gen foo4bar    = "foobar" + string(-_n) + "thisIsLongRight?"
 66.     gen ali9ce5bob = "ali9cebob" + string(mod(_n, 3))
 67.     gen ali9ce6bob = "ali9cebob" + string(-_n) + "thisIsLongRight?"
 68.     gen w = "|" + string(_n / 3) + "/"
 69.     gen x = _N - _n
 70.     gen y = _n / 2
 71.     gen r = runiform()
 72.     sort r
 73.     drop r
 74. 
.     preserve
 75.         greshape long st(.+)ub (foo|alice)([0-9]+)(bar|bob)/2, by(bykey) j(j) match(regex)
 76.         greshape wide st@ub foobar ali9ce*bob, by(bykey) j(j)
 77.         greshape long st(.+)ub (foo|ali9ce)([0-9]+)(bar|bob)/2, by(bykey) j(j) match(regex)
 78.     restore, preserve
 79.         if ( `c(stata_version)' >= 14 ) {
 80.             greshape long (?<=st).+(?=ub) (?<=(foo|ali\d{0,5}ce))(\d+)(?=(bar|bob)), by(bykey) j(j) match(ustrregex)
 81.             greshape wide stub foo@bar ali9ce@bob, by(bykey) j(j)
 82.         }
 83.     restore
 84. end

. 
. ***********************************************************************
. *                             Basic Tests                             *
. ***********************************************************************
. 
. capture program drop checks_inner_greshape_wide

. program checks_inner_greshape_wide
  1.     args opts extras
  2. 
.     clear
  3.     set obs 5
  4.     gen i1 = _n
  5.     gen i2 = -_n
  6.     gen i3 = "why?" + string(mod(_n, 3))
  7.     gen i4 = "hey" + string(-_n) + "thisIsWideRight?"
  8.     gen ca = "constant | " + string(_n) + " | group "
  9.     gen cb = int(20 * runiform())
 10.     expand 3
 11.     bys i?: gen j1 = mod(_n, 6)
 12.     bys i?: gen j2 = "waffle" + string(mod(_n, 6))
 13.     gen str10  x  = "some"
 14.     replace    x  = "whenever" in 4/ 9
 15.     replace    x  = "wherever" in 9/l
 16.     gen str20  p  = "another long one" + string(mod(_n, 4))
 17.     replace    p  = "this b"   in 3 / 7
 18.     replace    p  = "this c"   in 11/l
 19.     gen float  z  = _n
 20.     replace    z  = runiform() in 4 / 8
 21.     replace    z  = runiform() in 12/l
 22.     gen double w  = _n * 3.14
 23.     replace    w  = rnormal()  in 7/l
 24.     gen int    y  = _n
 25.     replace    y  = int(10 * runiform()) in 3/l
 26. 
.     if ( `"`extras'"' != "" ) local xi ca cb
 27.     else drop ca cb
 28. 
. disp as err "    set 1 `xi'"
 29.     * 1. Single num i
.     preserve
 30.         * 1.1 num xij
.         keep i1 j1 z `xi'
 31.         greshape wide z, i(i1) j(j1) `opts'
 32.         l
 33.     restore, preserve
 34.         keep i1 j1 z `xi'
 35.         greshape wide z, i(i1) j(j1) `opts'
 36.         l
 37.     restore, preserve
 38.         keep i1 j1 w z `xi'
 39.         greshape wide w z, i(i1) j(j1) `opts'
 40.         l
 41.     restore, preserve
 42.         * 1.2 str xij
.         keep i1 j1 x `xi'
 43.         greshape wide x, i(i1) j(j1) string `opts'
 44.         l
 45.     restore, preserve
 46.         keep i1 j1 x p `xi'
 47.         greshape wide x p, i(i1) j(j1) string `opts'
 48.         l
 49.     restore, preserve
 50.         * 1.3 mix xij
.         keep i1 j1 x z `xi'
 51.         greshape wide x z, i(i1) j(j1) string `opts'
 52.         l
 53.     restore, preserve
 54.         drop i2-i4 j2
 55.         greshape wide p w x y z, i(i1) j(j1) string `opts'
 56.         l
 57.     restore
 58. 
. disp as err "    set 2 `xi'"
 59.     preserve
 60.         * 1.1 num xij
.         keep i1 j2 z `xi'
 61.         greshape wide z, i(i1) j(j2) `opts'
 62.         l
 63.     restore, preserve
 64.         keep i1 j2 z `xi'
 65.         greshape wide z, i(i1) j(j2) `opts'
 66.         l
 67.     restore, preserve
 68.         keep i1 j2 w z `xi'
 69.         greshape wide w z, i(i1) j(j2) `opts'
 70.         l
 71.     restore, preserve
 72.         * 1.2 str xij
.         keep i1 j2 x `xi'
 73.         greshape wide x, i(i1) j(j2) string `opts'
 74.         l
 75.     restore, preserve
 76.         keep i1 j2 x p `xi'
 77.         greshape wide x p, i(i1) j(j2) string `opts'
 78.         l
 79.     restore, preserve
 80.         * 1.3 mix xij
.         keep i1 j2 x z `xi'
 81.         greshape wide x z, i(i1) j(j2) string `opts'
 82.         l
 83.     restore, preserve
 84.         drop i2-i4 j1 `xi'
 85.         greshape wide p w x y z, i(i1) j(j2) string `opts'
 86.         l
 87.     restore
 88. 
. disp as err "    set 3 `xi'"
 89.     * 2. Multiple num i
.     preserve
 90.         * 1.1 num xij
.         keep i1 i2 j1 z `xi'
 91.         greshape wide z, i(i?) j(j1) `opts'
 92.         l
 93.     restore, preserve
 94.         keep i1 i2 j1 z `xi'
 95.         greshape wide z, i(i?) j(j1) `opts'
 96.         l
 97.     restore, preserve
 98.         keep i1 i2 j1 w z `xi'
 99.         greshape wide w z, i(i?) j(j1) `opts'
100.         l
101.     restore, preserve
102.         * 1.2 str xij
.         keep i1 i2 j1 x `xi'
103.         greshape wide x, i(i?) j(j1) string `opts'
104.         l
105.     restore, preserve
106.         keep i1 i2 j1 x p `xi'
107.         greshape wide x p, i(i?) j(j1) string `opts'
108.         l
109.     restore, preserve
110.         * 1.3 mix xij
.         keep i1 i2 j1 x z `xi'
111.         greshape wide x z, i(i?) j(j1) string `opts'
112.         l
113.     restore, preserve
114.         drop i3 i4 j2
115.         greshape wide p w x y z, i(i?) j(j1) string `opts'
116.         l
117.     restore
118. 
. disp as err "    set 4 `xi'"
119.     preserve
120.         * 1.1 num xij
.         keep i1 i2 j2 z `xi'
121.         greshape wide z, i(i?) j(j2) `opts'
122.         l
123.     restore, preserve
124.         keep i1 i2 j2 z `xi'
125.         greshape wide z, i(i?) j(j2) `opts'
126.         l
127.     restore, preserve
128.         keep i1 i2 j2 w z `xi'
129.         greshape wide w z, i(i?) j(j2) `opts'
130.         l
131.     restore, preserve
132.         * 1.2 str xij
.         keep i1 i2 j2 x `xi'
133.         greshape wide x, i(i?) j(j2) string `opts'
134.         l
135.     restore, preserve
136.         keep i1 i2 j2 x p `xi'
137.         greshape wide x p, i(i?) j(j2) string `opts'
138.         l
139.     restore, preserve
140.         * 1.3 mix xij
.         keep i1 i2 j2 x z `xi'
141.         greshape wide x z, i(i?) j(j2) string `opts'
142.         l
143.     restore, preserve
144.         drop i3 i4 j1
145.         greshape wide p w x y z, i(i?) j(j2) string `opts'
146.         l
147.     restore
148. 
. disp as err "    set 5 `xi'"
149.     * 3. Single str i
.     preserve
150.         * 1.1 num xij
.         keep i4 j1 z `xi'
151.         greshape wide z, i(i4) j(j1) `opts'
152.         l
153.     restore, preserve
154.         keep i4 j1 z `xi'
155.         greshape wide z, i(i4) j(j1) `opts'
156.         l
157.     restore, preserve
158.         keep i4 j1 w z `xi'
159.         greshape wide w z, i(i4) j(j1) `opts'
160.         l
161.     restore, preserve
162.         * 1.2 str xij
.         keep i4 j1 x `xi'
163.         greshape wide x, i(i4) j(j1) string `opts'
164.         l
165.     restore, preserve
166.         keep i4 j1 x p `xi'
167.         greshape wide x p, i(i4) j(j1) string `opts'
168.         l
169.     restore, preserve
170.         * 1.3 mix xij
.         keep i4 j1 x z `xi'
171.         greshape wide x z, i(i4) j(j1) string `opts'
172.         l
173.     restore, preserve
174.         drop i1-i3 j2
175.         greshape wide p w x y z, i(i4) j(j1) string `opts'
176.         l
177.     restore
178. 
. disp as err "    set 6 `xi'"
179.     preserve
180.         * 1.1 num xij
.         keep i4 j2 z `xi'
181.         greshape wide z, i(i4) j(j2) `opts'
182.         l
183.     restore, preserve
184.         keep i4 j2 z `xi'
185.         greshape wide z, i(i4) j(j2) `opts'
186.         l
187.     restore, preserve
188.         keep i4 j2 w z `xi'
189.         greshape wide w z, i(i4) j(j2) `opts'
190.         l
191.     restore, preserve
192.         * 1.2 str xij
.         keep i4 j2 x `xi'
193.         greshape wide x, i(i4) j(j2) string `opts'
194.         l
195.     restore, preserve
196.         keep i4 j2 x p `xi'
197.         greshape wide x p, i(i4) j(j2) string `opts'
198.         l
199.     restore, preserve
200.         * 1.3 mix xij
.         keep i4 j2 x z `xi'
201.         greshape wide x z, i(i4) j(j2) string `opts'
202.         l
203.     restore, preserve
204.         drop i1-i3 j1
205.         greshape wide p w x y z, i(i4) j(j2) string `opts'
206.         l
207.     restore
208. 
. disp as err "    set 7 `xi'"
209.     * 4. Multiple str i
.     preserve
210.         * 1.1 num xij
.         keep i3 i4 j1 z `xi'
211.         greshape wide z, i(i?) j(j1) `opts'
212.         l
213.     restore, preserve
214.         keep i3 i4 j1 z `xi'
215.         greshape wide z, i(i?) j(j1) `opts'
216.         l
217.     restore, preserve
218.         keep i3 i4 j1 w z `xi'
219.         greshape wide w z, i(i?) j(j1) `opts'
220.         l
221.     restore, preserve
222.         * 1.2 str xij
.         keep i3 i4 j1 x `xi'
223.         greshape wide x, i(i?) j(j1) string `opts'
224.         l
225.     restore, preserve
226.         keep i3 i4 j1 x p `xi'
227.         greshape wide x p, i(i?) j(j1) string `opts'
228.         l
229.     restore, preserve
230.         * 1.3 mix xij
.         keep i3 i4 j1 x z `xi'
231.         greshape wide x z, i(i?) j(j1) string `opts'
232.         l
233.     restore, preserve
234.         drop i1 i2 j2
235.         greshape wide p w x y z, i(i?) j(j1) string `opts'
236.         l
237.     restore
238. 
. disp as err "    set 8 `xi'"
239.     preserve
240.         * 1.1 num xij
.         keep i3 i4 j2 z `xi'
241.         greshape wide z, i(i?) j(j2) `opts'
242.         l
243.     restore, preserve
244.         keep i3 i4 j2 z `xi'
245.         greshape wide z, i(i?) j(j2) `opts'
246.         l
247.     restore, preserve
248.         keep i3 i4 j2 w z `xi'
249.         greshape wide w z, i(i?) j(j2) `opts'
250.         l
251.     restore, preserve
252.         * 1.2 str xij
.         keep i3 i4 j2 x `xi'
253.         greshape wide x, i(i?) j(j2) string `opts'
254.         l
255.     restore, preserve
256.         keep i3 i4 j2 x p `xi'
257.         greshape wide x p, i(i?) j(j2) string `opts'
258.         l
259.     restore, preserve
260.         * 1.3 mix xij
.         keep i3 i4 j2 x z `xi'
261.         greshape wide x z, i(i?) j(j2) string `opts'
262.         l
263.     restore, preserve
264.         drop i1 i2 j1
265.         greshape wide p w x y z, i(i?) j(j2) string `opts'
266.         l
267.     restore
268. 
. disp as err "    set 9 `xi'"
269.     * 5. Mixed str i
.     preserve
270.         * 1.1 num xij
.         keep i? j1 z `xi'
271.         greshape wide z, i(i?) j(j1) `opts'
272.         l
273.     restore, preserve
274.         keep i? j1 z `xi'
275.         greshape wide z, i(i?) j(j1) `opts'
276.         l
277.     restore, preserve
278.         keep i? j1 w z `xi'
279.         greshape wide w z, i(i?) j(j1) `opts'
280.         l
281.     restore, preserve
282.         * 1.1 str xij
.         keep i? j1 x `xi'
283.         greshape wide x, i(i?) j(j1) string `opts'
284.         l
285.     restore, preserve
286.         keep i? j1 x p `xi'
287.         greshape wide x p, i(i?) j(j1) string `opts'
288.         l
289.     restore, preserve
290.         * 1.3 mix xij
.         keep i? j1 x z `xi'
291.         greshape wide x z, i(i?) j(j1) string `opts'
292.         l
293.     restore, preserve
294.         drop j2
295.         greshape wide p w x y z, i(i?) j(j1) string `opts'
296.         l
297.     restore
298. 
. disp as err "    set 10 `xi'"
299.     preserve
300.         * 1.1 num xij
.         keep i? j2 z `xi'
301.         greshape wide z, i(i?) j(j2) `opts'
302.         l
303.     restore, preserve
304.         keep i? j2 z `xi'
305.         greshape wide z, i(i?) j(j2) `opts'
306.         l
307.     restore, preserve
308.         keep i? j2 w z `xi'
309.         greshape wide w z, i(i?) j(j2) `opts'
310.         l
311.     restore, preserve
312.         * 1.2 str xij
.         keep i? j2 x `xi'
313.         greshape wide x, i(i?) j(j2) string `opts'
314.         l
315.     restore, preserve
316.         keep i? j2 x p `xi'
317.         greshape wide x p, i(i?) j(j2) string `opts'
318.         l
319.     restore, preserve
320.         * 1.3 mix xij
.         keep i? j2 x z `xi'
321.         greshape wide x z, i(i?) j(j2) string `opts'
322.         l
323.     restore, preserve
324.         drop j1
325.         greshape wide p w x y z, i(i?) j(j2) string `opts'
326.         l
327.     restore
328. end

. 
. capture program drop checks_inner_greshape_long

. program checks_inner_greshape_long
  1.     args opts extras
  2. 
.     clear
  3.     set obs 5
  4.     gen i1 = _n
  5.     gen i2 = -_n
  6.     gen i3 = "why?" + string(mod(_n, 3))
  7.     gen i4 = "hey" + string(-_n) + "thisIsLongRight?"
  8.     gen ca = "constant | " + string(_n) + " | group "
  9.     gen cb = int(20 * runiform())
 10.     gen str5   xa  = "some"
 11.     gen str8   xb  = "whenever"
 12.     gen str10  xd  = "wherever"
 13.     gen str20  pa  = "another long one" + string(mod(_n, 4))
 14.     gen str8   pb  = "this b"
 15.     gen str10  pd  = "this c"
 16.     gen long   z1  = _n
 17.     gen float  z2  = runiform()
 18.     gen float  zd  = runiform()
 19.     gen float  w1  = _n * 3.14
 20.     gen double w5  = rnormal()
 21.     gen int    y2  = _n
 22.     gen float  y7  = int(10 * runiform())
 23. 
.     if ( `"`extras'"' != "" ) local xi ca cb
 24.     else drop ca cb
 25. 
. disp as err "    set 1 `xi'"
 26.     * 1. Single num i
.     preserve
 27.         * 1.1 num xij
.         keep i1 z1 z2 `xi'
 28.         greshape long z, i(i1) j(j) `opts'
 29.         l
 30.     restore, preserve
 31.         keep i1 z1 z2 `xi'
 32.         greshape long z, i(i1) j(j) `opts' dropmiss
 33.         l
 34.     restore, preserve
 35.         keep i1 w* z* `xi'
 36.         greshape long w z, i(i1) j(j) `opts'
 37.         l
 38.     restore, preserve
 39.         keep i1 w* z* `xi'
 40.         greshape long w z, i(i1) j(j) `opts' dropmiss
 41.         l
 42.     restore, preserve
 43.         * 1.2 str xij
.         keep i1 x* `xi'
 44.         greshape long x, i(i1) j(j) string `opts'
 45.         l
 46.     restore, preserve
 47.         keep i1 x* `xi'
 48.         greshape long x, i(i1) j(j) string `opts' dropmiss
 49.         l
 50.     restore, preserve
 51.         keep i1 x* p* `xi'
 52.         greshape long x p, i(i1) j(j) string `opts'
 53.         l
 54.     restore, preserve
 55.         keep i1 x* p* `xi'
 56.         greshape long x p, i(i1) j(j) string `opts' dropmiss
 57.         l
 58.     restore, preserve
 59.         * 1.3 mix xij
.         keep i1 x* z* `xi'
 60.         greshape long x z, i(i1) j(j) string `opts'
 61.         l
 62.     restore, preserve
 63.         keep i1 x* z* `xi'
 64.         greshape long x z, i(i1) j(j) string `opts' dropmiss
 65.         l
 66.     restore, preserve
 67.         drop i2-i4
 68.         greshape long p w x y z, i(i1) j(j) string `opts'
 69.         l
 70.     restore, preserve
 71.         drop i2-i4
 72.         greshape long p w x y z, i(i1) j(j) string `opts' dropmiss
 73.         l
 74.     restore
 75. 
. disp as err "    set 2 `xi'"
 76.     * 2. Multiple num i
.     preserve
 77.         * 1.1 num xij
.         keep i1 i2 z1 z2 `xi'
 78.         greshape long z, i(i?) j(j) `opts'
 79.         l
 80.     restore, preserve
 81.         keep i1 i2 z1 z2 `xi'
 82.         greshape long z, i(i?) j(j) `opts' dropmiss
 83.         l
 84.     restore, preserve
 85.         keep i1 i2 w* z* `xi'
 86.         greshape long w z, i(i?) j(j) `opts'
 87.         l
 88.     restore, preserve
 89.         keep i1 i2 w* z* `xi'
 90.         greshape long w z, i(i?) j(j) `opts' dropmiss
 91.         l
 92.     restore, preserve
 93.         * 1.2 str xij
.         keep i1 i2 x* `xi'
 94.         greshape long x, i(i?) j(j) string `opts'
 95.         l
 96.     restore, preserve
 97.         keep i1 i2 x* `xi'
 98.         greshape long x, i(i?) j(j) string `opts' dropmiss
 99.         l
100.     restore, preserve
101.         keep i1 i2 x* p* `xi'
102.         greshape long x p, i(i?) j(j) string `opts'
103.         l
104.     restore, preserve
105.         keep i1 i2 x* p* `xi'
106.         greshape long x p, i(i?) j(j) string `opts' dropmiss
107.         l
108.     restore, preserve
109.         * 1.3 mix xij
.         keep i1 i2 x* z* `xi'
110.         greshape long x z, i(i?) j(j) string `opts'
111.         l
112.     restore, preserve
113.         keep i1 i2 x* z* `xi'
114.         greshape long x z, i(i?) j(j) string `opts' dropmiss
115.         l
116.     restore, preserve
117.         drop i3 i4
118.         greshape long p w x y z, i(i?) j(j) string `opts'
119.         l
120.     restore, preserve
121.         drop i3 i4
122.         greshape long p w x y z, i(i?) j(j) string `opts' dropmiss
123.         l
124.     restore
125. 
. disp as err "    set 3 `xi'"
126.     * 3. Single str i
.     preserve
127.         * 1.1 num xij
.         keep i4 z1 z2 `xi'
128.         greshape long z, i(i?) j(j) `opts'
129.         l
130.     restore, preserve
131.         keep i4 i2 z1 z2 `xi'
132.         greshape long z, i(i?) j(j) `opts' dropmiss
133.         l
134.     restore, preserve
135.         keep i4 i2 w* z* `xi'
136.         greshape long w z, i(i?) j(j) `opts'
137.         l
138.     restore, preserve
139.         keep i4 i2 w* z* `xi'
140.         greshape long w z, i(i?) j(j) `opts' dropmiss
141.         l
142.     restore, preserve
143.         * 1.2 str xij
.         keep i4 i2 x* `xi'
144.         greshape long x, i(i?) j(j) string `opts'
145.         l
146.     restore, preserve
147.         keep i4 i2 x* `xi'
148.         greshape long x, i(i?) j(j) string `opts' dropmiss
149.         l
150.     restore, preserve
151.         keep i4 i2 x* p* `xi'
152.         greshape long x p, i(i?) j(j) string `opts'
153.         l
154.     restore, preserve
155.         keep i4 i2 x* p* `xi'
156.         greshape long x p, i(i?) j(j) string `opts' dropmiss
157.         l
158.     restore, preserve
159.         * 1.3 mix xij
.         keep i4 i2 x* z* `xi'
160.         greshape long x z, i(i?) j(j) string `opts'
161.         l
162.     restore, preserve
163.         keep i4 i2 x* z* `xi'
164.         greshape long x z, i(i?) j(j) string `opts' dropmiss
165.         l
166.     restore, preserve
167.         drop i1 i2 i3
168.         greshape long p w x y z, i(i?) j(j) string `opts'
169.         l
170.     restore, preserve
171.         drop i1 i2 i3
172.         greshape long p w x y z, i(i?) j(j) string `opts' dropmiss
173.         l
174.     restore
175. 
. disp as err "    set 4 `xi'"
176.     * 4. Multiple str i
.     preserve
177.         * 1.1 num xij
.         keep i3 i4 z1 z2 `xi'
178.         greshape long z, i(i?) j(j) `opts'
179.         l
180.     restore, preserve
181.         keep i3 i4 i2 z1 z2 `xi'
182.         greshape long z, i(i?) j(j) `opts' dropmiss
183.         l
184.     restore, preserve
185.         keep i3 i4 i2 w* z* `xi'
186.         greshape long w z, i(i?) j(j) `opts'
187.         l
188.     restore, preserve
189.         keep i3 i4 i2 w* z* `xi'
190.         greshape long w z, i(i?) j(j) `opts' dropmiss
191.         l
192.     restore, preserve
193.         * 1.2 str xij
.         keep i3 i4 i2 x* `xi'
194.         greshape long x, i(i?) j(j) string `opts'
195.         l
196.     restore, preserve
197.         keep i3 i4 i2 x* `xi'
198.         greshape long x, i(i?) j(j) string `opts' dropmiss
199.         l
200.     restore, preserve
201.         keep i3 i4 i2 x* p* `xi'
202.         greshape long x p, i(i?) j(j) string `opts'
203.         l
204.     restore, preserve
205.         keep i3 i4 i2 x* p* `xi'
206.         greshape long x p, i(i?) j(j) string `opts' dropmiss
207.         l
208.     restore, preserve
209.         * 1.3 mix xij
.         keep i3 i4 i2 x* z* `xi'
210.         greshape long x z, i(i?) j(j) string `opts'
211.         l
212.     restore, preserve
213.         keep i3 i4 i2 x* z* `xi'
214.         greshape long x z, i(i?) j(j) string `opts' dropmiss
215.         l
216.     restore, preserve
217.         drop i1 i2
218.         greshape long p w x y z, i(i?) j(j) string `opts'
219.         l
220.     restore, preserve
221.         drop i1 i2
222.         greshape long p w x y z, i(i?) j(j) string `opts' dropmiss
223.         l
224.     restore
225. 
. disp as err "    set 5 `xi'"
226.     * 5. Mixed str i
.     preserve
227.         * 1.1 num xij
.         keep i? z1 z2 `xi'
228.         greshape long z, i(i?) j(j) `opts'
229.         l
230.     restore, preserve
231.         keep i? i2 z1 z2 `xi'
232.         greshape long z, i(i?) j(j) `opts' dropmiss
233.         l
234.     restore, preserve
235.         keep i? i2 w* z* `xi'
236.         greshape long w z, i(i?) j(j) `opts'
237.         l
238.     restore, preserve
239.         keep i? i2 w* z* `xi'
240.         greshape long w z, i(i?) j(j) `opts' dropmiss
241.         l
242.     restore, preserve
243.         * 1.2 str xij
.         keep i? i2 x* `xi'
244.         greshape long x, i(i?) j(j) string `opts'
245.         l
246.     restore, preserve
247.         keep i? i2 x* `xi'
248.         greshape long x, i(i?) j(j) string `opts' dropmiss
249.         l
250.     restore, preserve
251.         keep i? i2 x* p* `xi'
252.         greshape long x p, i(i?) j(j) string `opts'
253.         l
254.     restore, preserve
255.         keep i? i2 x* p* `xi'
256.         greshape long x p, i(i?) j(j) string `opts' dropmiss
257.         l
258.     restore, preserve
259.         * 1.3 mix xij
.         keep i? i2 x* z* `xi'
260.         greshape long x z, i(i?) j(j) string `opts'
261.         l
262.     restore, preserve
263.         keep i? i2 x* z* `xi'
264.         greshape long x z, i(i?) j(j) string `opts' dropmiss
265.         l
266.     restore, preserve
267.         greshape long p w x y z, i(i?) j(j) string `opts'
268.         l
269.     restore, preserve
270.         greshape long p w x y z, i(i?) j(j) string `opts' dropmiss
271.         l
272.     restore
273. end

. 
. ***********************************************************************
. *                             Benchmarks                              *
. ***********************************************************************
. 
. capture program drop bench_greshape

. program bench_greshape
  1.     syntax, [tol(real 1e-6) bench(real 1) n(int 500) NOIsily *]
  2. 
.     qui gen_data, n(`n')
  3.     qui expand `=100 * `bench''
  4.     qui `noisily' random_draws, random(2) double
  5.     qui hashsort random1
  6.     gen long   ix_num = _n
  7.     gen str    ix_str = "str" + string(_n)
  8.     gen double ix_dbl = _pi + _n
  9.     cap drop strL*
 10. 
.     local N = trim("`: di %15.0gc _N'")
 11.     local J = trim("`: di %15.0gc `n''")
 12. 
.     di as txt _n(1)
 13.     di as txt "Benchmark vs reshape, obs = `N', J = `J' (in seconds)"
 14.     di as txt " reshape | greshape | ratio (c/g) | varlist"
 15.     di as txt " ------- | -------- | ----------- | -------"
 16. 
.     rename double? dbl?
 17.     rename int?    num?
 18. 
.     versus_greshape dbl random,      j(_j) i(ix_num num1)
 19.     versus_greshape dbl random,      j(_j) i(ix_num num1 num2)
 20.     versus_greshape dbl random str_, j(_j) i(ix_num num1 num2 num3) string
 21. 
.     versus_greshape num random,      j(_j) i(ix_dbl dbl1)
 22.     versus_greshape num random str_, j(_j) i(ix_dbl dbl1 dbl2 dbl3) string
 23. 
.     versus_greshape dbl num random, j(_j) i(ix_str str_32)
 24.     versus_greshape dbl num random, j(_j) i(ix_str str_32 str_12 str_4) string
 25. 
.     di _n(1) "{hline 80}" _n(1) "bench_greshape, `options'" _n(1) "{hline 80}" _n(1)
 26. end

. 
. capture program drop versus_greshape

. program versus_greshape, rclass
  1.     syntax [anything], [i(str) j(str) *]
  2. 
.     preserve
  3.         timer clear
  4.         timer on 42
  5.         qui reshape long `anything', i(`i') j(`j') `options'
  6.         timer off 42
  7.         qui timer list
  8.         local time_long = r(t42)
  9.         tempfile a
 10.         qui save `"`a'"'
 11. 
.         timer clear
 12.         timer on 42
 13.         qui reshape wide `anything', i(`i') j(`j') `options'
 14.         timer off 42
 15.         qui timer list
 16.         local time_wide = r(t42)
 17.         tempfile b
 18.         qui save `"`b'"'
 19.     restore
 20. 
.     preserve
 21.         timer clear
 22.         timer on 43
 23.         qui greshape long `anything', i(`i') j(`j') `options' check(2)
 24.         timer off 43
 25.         qui timer list
 26.         local time_glong = r(t43)
 27.         cf * using `"`a'"'
 28. 
.         timer clear
 29.         timer on 43
 30.         qui greshape wide `anything', i(`i') j(`j') `options' check(2)
 31.         timer off 43
 32.         qui timer list
 33.         local time_gwide = r(t43)
 34.         cf * using `"`b'"'
 35.     restore
 36. 
.     local rs = `time_long'  / `time_glong'
 37.     di as txt " `:di %7.3g `time_long'' | `:di %8.3g `time_glong'' | `:di %11.4g `rs'' | long `anything', i(`i')"
 38.     local rs = `time_wide'  / `time_gwide'
 39.     di as txt " `:di %7.3g `time_wide'' | `:di %8.3g `time_gwide'' | `:di %11.4g `rs'' | wide `anything', i(`i')"
 40. end

. 
. ***********************************************************************
. *                               Testing                               *
. ***********************************************************************
. capture program drop checks_gregress

. program checks_gregress
  1.     basic_gregress
  2.     coll_gregress
  3. end

. 
. capture program drop basic_gregress

. program basic_gregress
  1.     local tol 1e-8
  2. 
. disp ""
  3. disp "----------------------"
  4. disp "Comparison Test 1: OLS"
  5. disp "----------------------"
  6. disp ""
  7. 
.     sysuse auto, clear
  8.     qui gen w = _n
  9.     qui gegen headcode = group(headroom)
 10.     qui gen z1 = 0
 11.     qui gen z2 = 0
 12. 
.     foreach v in v1 v2 v5 v7 {
 13.         local w
 14.         local r
 15. 
.         if ( "`v'" == "v2" ) local w [fw = w]
 16.         if ( "`v'" == "v4" ) local w [fw = w]
 17. 
.         if ( "`v'" == "v5" ) local w [aw = w]
 18.         if ( "`v'" == "v6" ) local w [aw = w]
 19. 
.         if ( "`v'" == "v7" ) local w [pw = w]
 20.         if ( "`v'" == "v8" ) local w [pw = w]
 21. 
.         disp "greg checks `v': `w'"
 22. 
.         qui greg price mpg `w', by(foreign) `r'
 23.             qui reg price mpg if foreign == 0 `w'
 24.             mata: assert(all(abs(st_matrix("r(table)")[1 ,.] :- GtoolsRegress.b[1, .]) :< `tol'))
 25.             mata: assert(all(abs(st_matrix("r(table)")[2 ,.] :- GtoolsRegress.se[1, .]) :< `tol'))
 26.             qui reg price mpg if foreign == 1 `w'
 27.             mata: assert(all((abs(st_matrix("r(table)")[1 ,.] :- GtoolsRegress.b[2, .])) :< `tol'))
 28.             mata: assert(all((abs(st_matrix("r(table)")[2 ,.] :- GtoolsRegress.se[2, .])) :< `tol'))
 29.         qui greg price mpg `w', by(foreign) robust `r'
 30.             qui reg price mpg if foreign == 0 `w', robust
 31.             mata: assert(all(abs(st_matrix("r(table)")[1 ,.] :- GtoolsRegress.b[1, .]) :< `tol'))
 32.             mata: assert(all(abs(st_matrix("r(table)")[2 ,.] :- GtoolsRegress.se[1, .]) :< `tol'))
 33.             qui reg price mpg if foreign == 1 `w', robust
 34.             mata: assert(all(abs(st_matrix("r(table)")[1 ,.] :- GtoolsRegress.b[2, .]) :< `tol'))
 35.             mata: assert(all(abs(st_matrix("r(table)")[2 ,.] :- GtoolsRegress.se[2, .]) :< `tol'))
 36.         qui greg price mpg `w', by(foreign) cluster(headroom) `r'
 37.             qui reg price mpg if foreign == 0 `w', cluster(headcode)
 38.             mata: assert(all(abs(st_matrix("r(table)")[1 ,.] :- GtoolsRegress.b[1, .]) :< `tol'))
 39.             mata: assert(all(abs(st_matrix("r(table)")[2 ,.] :- GtoolsRegress.se[1, .]) :< `tol'))
 40.             qui reg price mpg if foreign == 1 `w', cluster(headcode)
 41.             mata: assert(all(abs(st_matrix("r(table)")[1 ,.] :- GtoolsRegress.b[2, .]) :< `tol'))
 42.             mata: assert(all(abs(st_matrix("r(table)")[2 ,.] :- GtoolsRegress.se[2, .]) :< `tol'))
 43. 
.         qui greg price mpg `w', absorb(rep78)
 44.             qui areg price mpg `w', absorb(rep78)
 45.             mata: assert(all(abs(st_matrix("r(table)")[1, 1] :- GtoolsRegress.b[1, 1]) :< `tol'))
 46.             mata: assert(all(abs(st_matrix("r(table)")[2, 1] :- GtoolsRegress.se[1, 1]) :< `tol'))
 47.         qui greg price mpg `w', absorb(rep78) robust
 48.             qui areg price mpg `w', absorb(rep78) robust
 49.             mata: assert(all(abs(st_matrix("r(table)")[1, 1] :- GtoolsRegress.b[1, 1]) :< `tol'))
 50.             mata: assert(all(abs(st_matrix("r(table)")[2, 1] :- GtoolsRegress.se[1, 1]) :< `tol'))
 51.         qui greg price mpg `w', absorb(rep78) cluster(headroom)
 52.             qui areg price mpg `w', absorb(rep78) cluster(headroom)
 53.             mata: assert(all(abs(st_matrix("r(table)")[1, 1] :- GtoolsRegress.b[1, 1]) :< `tol'))
 54.             mata: assert(all(abs(st_matrix("r(table)")[2, 1] :- GtoolsRegress.se[1, 1]) :< `tol'))
 55. 
.         qui greg price mpg `w', by(foreign) absorb(rep78)
 56.             qui areg price mpg if foreign == 0 `w', absorb(rep78)
 57.             mata: assert(all(abs(`=_b[mpg]' :- GtoolsRegress.b[1, 1]) :< `tol'))
 58.             mata: assert(all(abs(`=_se[mpg]' :- GtoolsRegress.se[1, 1]) :< `tol'))
 59.             qui areg price mpg if foreign == 1 `w', absorb(rep78)
 60.             mata: assert(all(abs(`=_b[mpg]' :- GtoolsRegress.b[2, 1]) :< `tol'))
 61.             mata: assert(all(abs(`=_se[mpg]' :- GtoolsRegress.se[2, 1]) :< `tol'))
 62.         qui greg price mpg `w', by(foreign) absorb(rep78) robust
 63.             qui areg price mpg if foreign == 0 `w', absorb(rep78) robust
 64.             mata: assert(all(abs(`=_b[mpg]' :- GtoolsRegress.b[1, 1]) :< `tol'))
 65.             mata: assert(all(abs(`=_se[mpg]' :- GtoolsRegress.se[1, 1]) :< `tol'))
 66.             qui areg price mpg if foreign == 1 `w', absorb(rep78) robust
 67.             mata: assert(all(abs(`=_b[mpg]' :- GtoolsRegress.b[2, 1]) :< `tol'))
 68.             mata: assert(all(abs(`=_se[mpg]' :- GtoolsRegress.se[2, 1]) :< `tol'))
 69.         qui greg price mpg `w', by(foreign) absorb(rep78) cluster(headroom)
 70.             qui areg price mpg if foreign == 0 `w', absorb(rep78) cluster(headroom)
 71.             mata: assert(all(abs(`=_b[mpg]' :- GtoolsRegress.b[1, 1]) :< `tol'))
 72.             mata: assert(all(abs(`=_se[mpg]' :- GtoolsRegress.se[1, 1]) :< `tol'))
 73.             qui areg price mpg if foreign == 1 `w', absorb(rep78) cluster(headroom)
 74.             mata: assert(all(abs(`=_b[mpg]' :- GtoolsRegress.b[2, 1]) :< `tol'))
 75.             mata: assert(all(abs(`=_se[mpg]' :- GtoolsRegress.se[2, 1]) :< `tol'))
 76. 
.         qui greg price mpg `w', absorb(rep78 headroom)
 77.             qui reg price mpg i.rep78 i.headcode `w'
 78.             mata: assert(all(abs(`=_b[mpg]' :- GtoolsRegress.b[1, 1]) :< `tol'))
 79.             mata: assert(all(abs(`=_se[mpg]' :- GtoolsRegress.se[1, 1]) :< `tol'))
 80.         qui greg price mpg `w', absorb(rep78 headroom) robust
 81.             qui reg price mpg i.rep78 i.headcode `w', robust
 82.             mata: assert(all(abs(`=_b[mpg]' :- GtoolsRegress.b[1, 1]) :< `tol'))
 83.             mata: assert(all(abs(`=_se[mpg]' :- GtoolsRegress.se[1, 1]) :< `tol'))
 84.         qui greg price mpg `w', absorb(rep78 headroom) cluster(headroom)
 85.             qui reg price mpg i.rep78 i.headcode `w', vce(cluster headcode)
 86.             mata: assert(all(abs(`=_b[mpg]' :- GtoolsRegress.b[1, 1]) :< `tol'))
 87.             mata: assert(all(abs(`=_se[mpg]' :- GtoolsRegress.se[1, 1]) :< `tol'))
 88. 
.         qui greg price mpg `w', by(foreign) absorb(rep78 headroom)
 89.             qui reg price mpg i.rep78 i.headcode if foreign == 0 `w'
 90.             mata: assert(all(reldif(`=_b[mpg]', GtoolsRegress.b[1, 1]) :< `tol'))
 91.             mata: assert(all(reldif(`=_se[mpg]', GtoolsRegress.se[1, 1]) :< `tol'))
 92.             qui reg price mpg i.rep78 i.headcode if foreign == 1 `w'
 93.             mata: assert(all(reldif(`=_b[mpg]', GtoolsRegress.b[2, 1]) :< `tol'))
 94.             mata: assert(all(reldif(`=_se[mpg]', GtoolsRegress.se[2, 1]) :< `tol'))
 95.         qui greg price mpg `w', by(foreign) absorb(rep78 headroom) robust
 96.             qui reg price mpg i.rep78 i.headcode if foreign == 0 `w', robust
 97.             mata: assert(all(reldif(`=_b[mpg]', GtoolsRegress.b[1, 1]) :< `tol'))
 98.             mata: assert(all(reldif(`=_se[mpg]', GtoolsRegress.se[1, 1]) :< `tol'))
 99.             qui reg price mpg i.rep78 i.headcode if foreign == 1 `w', robust
100.             mata: assert(all(reldif(`=_b[mpg]', GtoolsRegress.b[2, 1]) :< `tol'))
101.             mata: assert(all(reldif(`=_se[mpg]', GtoolsRegress.se[2, 1]) :< `tol'))
102.         qui greg price mpg `w', by(foreign) absorb(rep78 headroom) cluster(headroom)
103.             qui reg price mpg i.rep78 i.headcode if foreign == 0 `w', cluster(headroom)
104.             mata: assert(all(reldif(`=_b[mpg]', GtoolsRegress.b[1, 1]) :< `tol'))
105.             mata: assert(all(reldif(`=_se[mpg]', GtoolsRegress.se[1, 1]) :< `tol'))
106.             qui reg price mpg i.rep78 i.headcode if foreign == 1 `w', cluster(headroom)
107.             mata: assert(all(reldif(`=_b[mpg]', GtoolsRegress.b[2, 1]) :< `tol'))
108.             mata: assert(all(reldif(`=_se[mpg]', GtoolsRegress.se[2, 1]) :< `tol'))
109.     }
110. 
.     * ------------------------------------------------------------------------
.     * ------------------------------------------------------------------------
. 
. disp ""
111. disp "---------------------"
112. disp "Comparison Test 2: IV"
113. disp "---------------------"
114. disp ""
115. 
.     local tol 1e-6
116.     sysuse auto, clear
117.     gen w = _n
118.     gegen headcode = group(headroom)
119. 
.     local v
120.     local w
121.     foreach v in v1 v2 v3 v4 {
122.         local w
123.         if ( "`v'" == "v2" ) local w [fw = w]
124.         if ( "`v'" == "v3" ) local w [aw = w]
125.         if ( "`v'" == "v4" ) local w [pw = w]
126.         disp "iv checks `v': `w'"
127. 
.         foreach av in v1 v2 v3 {
128.             if ( `"`av'"' == "v1" ) local avars
129.             if ( `"`av'"' == "v2" ) local avars i.rep78
130.             if ( `"`av'"' == "v3" ) local avars i.rep78 i.headcode
131. 
.             if ( `"`av'"' == "v1" ) local absorb
132.             if ( `"`av'"' == "v2" ) local absorb absorb(rep78)
133.             if ( `"`av'"' == "v3" ) local absorb absorb(rep78 headcode)
134. 
.             foreach vce in small robust cluster(headcode) {
135.                 local gvce  = cond(`"`vce'"' == "small", "", `"`vce'"')
136.                 local small = cond(`"`vce'"' == "small", "", `"small"')
137.                 disp _skip(4) "basic checks: `vce' `small' `absorb'"
138.                 qui givregress price (mpg = gear_ratio) weight turn                            `w' , `gvce' `absorb'
139.                     qui ivregress 2sls price (mpg = gear_ratio) weight turn `avars'      `w' , `vce' `small'
140.                     mata: assert(all(reldif(st_matrix("r(table)")[1, 1..GtoolsIV.kx], GtoolsIV.b[1, .])  :< `tol'))
141.                     mata: assert(all(reldif(st_matrix("r(table)")[2, 1..GtoolsIV.kx], GtoolsIV.se[1, .]) :< `tol'))
142. disp _skip(8) "check 1"
143.                 qui givregress price (mpg = gear_ratio) weight                                 `w' , `gvce' `absorb'
144.                     qui ivregress 2sls price (mpg = gear_ratio) weight      `avars'      `w' , `vce' `small'
145.                     mata: assert(all(reldif(st_matrix("r(table)")[1, 1..GtoolsIV.kx], GtoolsIV.b[1, .])  :< `tol'))
146.                     mata: assert(all(reldif(st_matrix("r(table)")[2, 1..GtoolsIV.kx], GtoolsIV.se[1, .]) :< `tol'))
147. disp _skip(8) "check 2"
148.                 qui givregress price (mpg = gear_ratio)                                        `w' , `gvce' `absorb'
149.                     qui ivregress 2sls price (mpg = gear_ratio)             `avars'      `w' , `vce' `small'
150.                     mata: assert(all(reldif(st_matrix("r(table)")[1, 1..GtoolsIV.kx], GtoolsIV.b[1, .])  :< `tol'))
151.                     mata: assert(all(reldif(st_matrix("r(table)")[2, 1..GtoolsIV.kx], GtoolsIV.se[1, .]) :< `tol'))
152. disp _skip(8) "check 3"
153.                 if ( "`av'" == "v1" ) {
154.                 qui givregress price (mpg = gear_ratio) weight                                 `w' , `gvce' `absorb' noc
155.                     qui ivregress 2sls price (mpg = gear_ratio) weight      `avars'      `w' , `vce' noc `small'
156.                     mata: assert(all(reldif(st_matrix("r(table)")[1, 1..GtoolsIV.kx], GtoolsIV.b[1, .])  :< `tol'))
157.                     mata: assert(all(reldif(st_matrix("r(table)")[2, 1..GtoolsIV.kx], GtoolsIV.se[1, .]) :< `tol'))
158. disp _skip(8) "check 4"
159.                 }
160.                 qui givregress price (mpg = gear_ratio turn displacement) weight               `w' , `gvce' `absorb'
161.                     qui ivregress 2sls price (mpg = gear_ratio turn displacement) weight `avars' `w' , `vce' `small'
162.                     mata: assert(all(reldif(st_matrix("r(table)")[1, 1..GtoolsIV.kx], GtoolsIV.b[1, .])  :< `tol'))
163.                     mata: assert(all(reldif(st_matrix("r(table)")[2, 1..GtoolsIV.kx], GtoolsIV.se[1, .]) :< `tol'))
164. disp _skip(8) "check 5"
165.                 qui givregress price (mpg = gear_ratio turn) weight                            `w' , `gvce' `absorb'
166.                     qui ivregress 2sls price (mpg = gear_ratio turn) weight `avars'      `w' , `vce' `small'
167.                     mata: assert(all(reldif(st_matrix("r(table)")[1, 1..GtoolsIV.kx], GtoolsIV.b[1, .])  :< `tol'))
168.                     mata: assert(all(reldif(st_matrix("r(table)")[2, 1..GtoolsIV.kx], GtoolsIV.se[1, .]) :< `tol'))
169. disp _skip(8) "check 6"
170.                 qui givregress price (mpg weight = gear_ratio turn)                            `w' , `gvce' `absorb'
171.                     qui ivregress 2sls price (mpg weight = gear_ratio turn) `avars'      `w' , `vce' `small'
172.                     mata: assert(all(reldif(st_matrix("r(table)")[1, 1..GtoolsIV.kx], GtoolsIV.b[1, .])  :< `tol'))
173.                     mata: assert(all(reldif(st_matrix("r(table)")[2, 1..GtoolsIV.kx], GtoolsIV.se[1, .]) :< `tol'))
174. disp _skip(8) "check 7"
175.                 qui givregress price (mpg weight = gear_ratio turn) displacement               `w' , `gvce' `absorb'
176.                     qui ivregress 2sls price (mpg weight = gear_ratio turn) displacement `avars' `w' , `vce' `small'
177.                     mata: assert(all(reldif(st_matrix("r(table)")[1, 1..GtoolsIV.kx], GtoolsIV.b[1, .])  :< `tol'))
178.                     mata: assert(all(reldif(st_matrix("r(table)")[2, 1..GtoolsIV.kx], GtoolsIV.se[1, .]) :< `tol'))
179. disp _skip(8) "check 8"
180.                 qui givregress price (mpg weight = gear_ratio turn displacement)               `w' , `gvce' `absorb'
181.                     qui ivregress 2sls price (mpg weight = gear_ratio turn displacement) `avars' `w' , `vce' `small'
182.                     mata: assert(all(reldif(st_matrix("r(table)")[1, 1..GtoolsIV.kx], GtoolsIV.b[1, .])  :< `tol'))
183.                     mata: assert(all(reldif(st_matrix("r(table)")[2, 1..GtoolsIV.kx], GtoolsIV.se[1, .]) :< `tol'))
184. disp _skip(8) "check 9"
185.             }
186.         }
187. 
.         * expand 10
.         * gen _by = mod(_n, 2)
.         * local by by(_by)
.         local by by(foreign)
188.         local if1 if foreign == 0
189.         local if2 if foreign == 1
190.         foreach av in v1 v2 v3 {
191.             if ( `"`av'"' == "v1" ) local avars
192.             if ( `"`av'"' == "v2" ) local avars i.rep78
193.             if ( `"`av'"' == "v3" ) local avars i.rep78 i.headcode
194. 
.             if ( `"`av'"' == "v1" ) local absorb
195.             if ( `"`av'"' == "v2" ) local absorb absorb(rep78)
196.             if ( `"`av'"' == "v3" ) local absorb absorb(rep78 headcode)
197. 
.             foreach vce in small robust cluster(headcode) {
198.                 local gvce  = cond(`"`vce'"' == "small", "", `"`vce'"')
199.                 local small = cond(`"`vce'"' == "small", "", `"small"')
200.                 disp _skip(4) "`by' checks: `vce' `small' `absorb'"
201.                 qui givregress price (mpg = gear_ratio) weight turn                            `w' , `gvce' `absorb' `by'
202.                     qui ivregress 2sls price (mpg = gear_ratio) weight turn `avars' `if1' `w' , `vce' `small'
203.                     mata: assert(all(reldif(st_matrix("r(table)")[1, 1..GtoolsIV.kx], GtoolsIV.b[1, .])  :< `tol'))
204.                     mata: assert(all(reldif(st_matrix("r(table)")[2, 1..GtoolsIV.kx], GtoolsIV.se[1, .]) :< `tol'))
205.                     qui ivregress 2sls price (mpg = gear_ratio) weight turn `avars' `if2' `w' , `vce' `small'
206.                     mata: assert(all(reldif(st_matrix("r(table)")[1, 1..GtoolsIV.kx], GtoolsIV.b[2, .])  :< `tol'))
207.                     mata: assert(all(reldif(st_matrix("r(table)")[2, 1..GtoolsIV.kx], GtoolsIV.se[2, .]) :< `tol'))
208. disp _skip(8) "check 1"
209.                 qui givregress price (mpg = gear_ratio) weight                                 `w' , `gvce' `absorb' `by'
210.                     qui ivregress 2sls price (mpg = gear_ratio) weight      `avars' `if1' `w' , `vce' `small'
211.                     mata: assert(all(reldif(st_matrix("r(table)")[1, 1..GtoolsIV.kx], GtoolsIV.b[1, .])  :< `tol'))
212.                     mata: assert(all(reldif(st_matrix("r(table)")[2, 1..GtoolsIV.kx], GtoolsIV.se[1, .]) :< `tol'))
213.                     qui ivregress 2sls price (mpg = gear_ratio) weight      `avars' `if2' `w' , `vce' `small'
214.                     mata: assert(all(reldif(st_matrix("r(table)")[1, 1..GtoolsIV.kx], GtoolsIV.b[2, .])  :< `tol'))
215.                     mata: assert(all(reldif(st_matrix("r(table)")[2, 1..GtoolsIV.kx], GtoolsIV.se[2, .]) :< `tol'))
216. disp _skip(8) "check 2"
217.                 qui givregress price (mpg = gear_ratio)                                        `w' , `gvce' `absorb' `by'
218.                     qui ivregress 2sls price (mpg = gear_ratio)             `avars' `if1' `w' , `vce' `small'
219.                     mata: assert(all(reldif(st_matrix("r(table)")[1, 1..GtoolsIV.kx], GtoolsIV.b[1, .])  :< `tol'))
220.                     mata: assert(all(reldif(st_matrix("r(table)")[2, 1..GtoolsIV.kx], GtoolsIV.se[1, .]) :< `tol'))
221.                     qui ivregress 2sls price (mpg = gear_ratio)             `avars' `if2' `w' , `vce' `small'
222.                     mata: assert(all(reldif(st_matrix("r(table)")[1, 1..GtoolsIV.kx], GtoolsIV.b[2, .])  :< `tol'))
223.                     mata: assert(all(reldif(st_matrix("r(table)")[2, 1..GtoolsIV.kx], GtoolsIV.se[2, .]) :< `tol'))
224. disp _skip(8) "check 3"
225.                 if ( "`av'" == "v1" ) {
226.                 qui givregress price (mpg = gear_ratio) weight                                 `w' , `gvce' `absorb' noc `by'
227.                     qui ivregress 2sls price (mpg = gear_ratio) weight      `avars' `if1' `w' , `vce' noc `small'
228.                     mata: assert(all(reldif(st_matrix("r(table)")[1, 1..GtoolsIV.kx], GtoolsIV.b[1, .])  :< `tol'))
229.                     mata: assert(all(reldif(st_matrix("r(table)")[2, 1..GtoolsIV.kx], GtoolsIV.se[1, .]) :< `tol'))
230.                     qui ivregress 2sls price (mpg = gear_ratio) weight      `avars' `if2' `w' , `vce' noc `small'
231.                     mata: assert(all(reldif(st_matrix("r(table)")[1, 1..GtoolsIV.kx], GtoolsIV.b[2, .])  :< `tol'))
232.                     mata: assert(all(reldif(st_matrix("r(table)")[2, 1..GtoolsIV.kx], GtoolsIV.se[2, .]) :< `tol'))
233. disp _skip(8) "check 4"
234.                 }
235.                 qui givregress price (mpg = gear_ratio turn displacement) weight               `w' , `gvce' `absorb' `by'
236.                     qui ivregress 2sls price (mpg = gear_ratio turn displacement) weight `avars' `if1' `w' , `vce' `small'
237.                     mata: assert(all(reldif(st_matrix("r(table)")[1, 1..GtoolsIV.kx], GtoolsIV.b[1, .])  :< `tol'))
238.                     mata: assert(all(reldif(st_matrix("r(table)")[2, 1..GtoolsIV.kx], GtoolsIV.se[1, .]) :< `tol'))
239.                     qui ivregress 2sls price (mpg = gear_ratio turn displacement) weight `avars' `if2' `w' , `vce' `small'
240.                     mata: assert(all(reldif(st_matrix("r(table)")[1, 1..GtoolsIV.kx], GtoolsIV.b[2, .])  :< `tol'))
241.                     mata: assert(all(reldif(st_matrix("r(table)")[2, 1..GtoolsIV.kx], GtoolsIV.se[2, .]) :< `tol'))
242. disp _skip(8) "check 5"
243.                 qui givregress price (mpg = gear_ratio turn) weight                            `w' , `gvce' `absorb' `by'
244.                     qui ivregress 2sls price (mpg = gear_ratio turn) weight `avars' `if1' `w' , `vce' `small'
245.                     mata: assert(all(reldif(st_matrix("r(table)")[1, 1..GtoolsIV.kx], GtoolsIV.b[1, .])  :< `tol'))
246.                     mata: assert(all(reldif(st_matrix("r(table)")[2, 1..GtoolsIV.kx], GtoolsIV.se[1, .]) :< `tol'))
247.                     qui ivregress 2sls price (mpg = gear_ratio turn) weight `avars' `if2' `w' , `vce' `small'
248.                     mata: assert(all(reldif(st_matrix("r(table)")[1, 1..GtoolsIV.kx], GtoolsIV.b[2, .])  :< `tol'))
249.                     mata: assert(all(reldif(st_matrix("r(table)")[2, 1..GtoolsIV.kx], GtoolsIV.se[2, .]) :< `tol'))
250. disp _skip(8) "check 6"
251.                 qui givregress price (mpg weight = gear_ratio turn)                            `w' , `gvce' `absorb' `by'
252.                     qui ivregress 2sls price (mpg weight = gear_ratio turn) `avars' `if1' `w' , `vce' `small'
253.                     mata: assert(all(reldif(st_matrix("r(table)")[1, 1..GtoolsIV.kx], GtoolsIV.b[1, .])  :< `tol'))
254.                     mata: assert(all(reldif(st_matrix("r(table)")[2, 1..GtoolsIV.kx], GtoolsIV.se[1, .]) :< `tol'))
255.                     qui ivregress 2sls price (mpg weight = gear_ratio turn) `avars' `if2' `w' , `vce' `small'
256.                     mata: assert(all(reldif(st_matrix("r(table)")[1, 1..GtoolsIV.kx], GtoolsIV.b[2, .])  :< `tol'))
257.                     mata: assert(all(reldif(st_matrix("r(table)")[2, 1..GtoolsIV.kx], GtoolsIV.se[2, .]) :< `tol'))
258. disp _skip(8) "check 7"
259.                 qui givregress price (mpg weight = gear_ratio turn) displacement               `w' , `gvce' `absorb' `by'
260.                     qui ivregress 2sls price (mpg weight = gear_ratio turn) displacement `avars' `if1' `w' , `vce' `small'
261.                     mata: assert(all(reldif(st_matrix("r(table)")[1, 1..GtoolsIV.kx], GtoolsIV.b[1, .])  :< `tol'))
262.                     mata: assert(all(reldif(st_matrix("r(table)")[2, 1..GtoolsIV.kx], GtoolsIV.se[1, .]) :< `tol'))
263.                     qui ivregress 2sls price (mpg weight = gear_ratio turn) displacement `avars' `if2' `w' , `vce' `small'
264.                     mata: assert(all(reldif(st_matrix("r(table)")[1, 1..GtoolsIV.kx], GtoolsIV.b[2, .])  :< `tol'))
265.                     mata: assert(all(reldif(st_matrix("r(table)")[2, 1..GtoolsIV.kx], GtoolsIV.se[2, .]) :< `tol'))
266. disp _skip(8) "check 8"
267.                 qui givregress price (mpg weight = gear_ratio turn displacement)               `w' , `gvce' `absorb' `by'
268.                     qui ivregress 2sls price (mpg weight = gear_ratio turn displacement) `avars' `if1' `w' , `vce' `small'
269.                     mata: assert(all(reldif(st_matrix("r(table)")[1, 1..GtoolsIV.kx], GtoolsIV.b[1, .])  :< `tol'))
270.                     mata: assert(all(reldif(st_matrix("r(table)")[2, 1..GtoolsIV.kx], GtoolsIV.se[1, .]) :< `tol'))
271.                     qui ivregress 2sls price (mpg weight = gear_ratio turn displacement) `avars' `if2' `w' , `vce' `small'
272.                     mata: assert(all(reldif(st_matrix("r(table)")[1, 1..GtoolsIV.kx], GtoolsIV.b[2, .])  :< `tol'))
273.                     mata: assert(all(reldif(st_matrix("r(table)")[2, 1..GtoolsIV.kx], GtoolsIV.se[2, .]) :< `tol'))
274. disp _skip(8) "check 9"
275.             }
276.         }
277.     }
278. 
.     * ------------------------------------------------------------------------
.     * ------------------------------------------------------------------------
. 
. disp ""
279. disp "--------------------------"
280. disp "Comparison Test 3: Poisson"
281. disp "--------------------------"
282. disp ""
283. 
.     local tol 1e-4
284.     webuse ships, clear
285.     * use /tmp/ships, clear
.     qui expand 2
286.     qui gen by = 1.5 - (_n < _N / 2)
287.     qui gen w = _n
288.     foreach v in v1 v2 v5 {
289.         disp "poisson checks `v'"
290.         local w
291.         local r
292. 
.         if ( "`v'" == "v2" ) local w [fw = w]
293.         if ( "`v'" == "v4" ) local w [fw = w]
294. 
.         if ( "`v'" == "v5" ) local w [pw = w]
295.         if ( "`v'" == "v6" ) local w [pw = w]
296. 
.         qui gpoisson accident op_75_79 co_65_69 co_70_74 co_75_79 `w', robust `r'
297.         qui poisson accident op_75_79 co_65_69 co_70_74 co_75_79 `w', r
298.             mata t  = st_matrix("r(table)")
299.             mata b  = t[1, 1::4], t[1, cols(t)]
300.             mata se = t[2, 1::4], t[2, cols(t)]
301.             mata assert(max(reldif(b, GtoolsPoisson.b)) < `tol')
302.             mata assert(max(reldif(se, GtoolsPoisson.se)) < `tol')
303. disp _skip(8) "check 1"
304.         qui gpoisson accident op_75_79 co_65_69 co_70_74 co_75_79 `w', cluster(ship) `r'
305.         qui poisson accident op_75_79 co_65_69 co_70_74 co_75_79 `w', cluster(ship)
306.             mata t  = st_matrix("r(table)")
307.             mata b  = t[1, 1::4], t[1, cols(t)]
308.             mata se = t[2, 1::4], t[2, cols(t)]
309.             mata assert(max(reldif(b, GtoolsPoisson.b)) < `tol')
310.             mata assert(max(reldif(se, GtoolsPoisson.se)) < `tol')
311. disp _skip(8) "check 2"
312.         qui gpoisson accident op_75_79 co_65_69 co_70_74 co_75_79 `w', by(by) robust `r'
313.         qui poisson accident op_75_79 co_65_69 co_70_74 co_75_79 `w' if by == 0.5, r
314.             mata t  = st_matrix("r(table)")
315.             mata b  = t[1, 1::4], t[1, cols(t)]
316.             mata se = t[2, 1::4], t[2, cols(t)]
317.             mata assert(max(reldif(b, GtoolsPoisson.b[1, .])) < `tol')
318.             mata assert(max(reldif(se, GtoolsPoisson.se[1, .])) < `tol')
319.         qui poisson accident op_75_79 co_65_69 co_70_74 co_75_79 `w' if by == 1.5, r
320.             mata t  = st_matrix("r(table)")
321.             mata b  = t[1, 1::4], t[1, cols(t)]
322.             mata se = t[2, 1::4], t[2, cols(t)]
323.             mata assert(max(reldif(b, GtoolsPoisson.b[2, .])) < `tol')
324.             mata assert(max(reldif(se, GtoolsPoisson.se[2, .])) < `tol')
325. disp _skip(8) "check 3"
326.         qui gpoisson accident op_75_79 co_65_69 co_70_74 co_75_79 `w', by(by) cluster(ship) `r'
327.         qui poisson accident op_75_79 co_65_69 co_70_74 co_75_79 `w' if by == 0.5, cluster(ship)
328.             mata t  = st_matrix("r(table)")
329.             mata b  = t[1, 1::4], t[1, cols(t)]
330.             mata se = t[2, 1::4], t[2, cols(t)]
331.             mata assert(max(reldif(b, GtoolsPoisson.b[1, .])) < `tol')
332.             mata assert(max(reldif(se, GtoolsPoisson.se[1, .])) < `tol')
333.         qui poisson accident op_75_79 co_65_69 co_70_74 co_75_79 `w' if by == 1.5, cluster(ship)
334.             mata t  = st_matrix("r(table)")
335.             mata b  = t[1, 1::4], t[1, cols(t)]
336.             mata se = t[2, 1::4], t[2, cols(t)]
337.             mata assert(max(reldif(b, GtoolsPoisson.b[2, .])) < `tol')
338.             mata assert(max(reldif(se, GtoolsPoisson.se[2, .])) < `tol')
339. disp _skip(8) "check 4"
340.         qui gpoisson accident op_75_79 co_65_69 co_70_74 co_75_79 `w', absorb(ship) r
341.         qui poisson accident op_75_79 co_65_69 co_70_74 co_75_79 i.ship `w', r
342.             mata t  = st_matrix("r(table)")
343.             mata b  = t[1, 1::4]
344.             mata se = t[2, 1::4]
345.             mata assert(max(reldif(b, GtoolsPoisson.b)) < `tol')
346.             mata assert(max(reldif(se, GtoolsPoisson.se)) < `tol')
347. disp _skip(8) "check 5"
348.         qui gpoisson accident op_75_79 co_65_69 co_70_74 co_75_79 `w', absorb(ship) cluster(ship)
349.         qui poisson accident op_75_79 co_65_69 co_70_74 co_75_79 i.ship `w', cluster(ship)
350.             mata t  = st_matrix("r(table)")
351.             mata b  = t[1, 1::4]
352.             mata se = t[2, 1::4]
353.             mata assert(max(reldif(b, GtoolsPoisson.b)) < `tol')
354.             mata assert(max(reldif(se, GtoolsPoisson.se)) < `tol')
355. disp _skip(8) "check 6"
356.         qui gpoisson accident op_75_79 co_65_69 co_70_74 co_75_79 `w', by(by) absorb(ship) robust
357.         qui poisson accident op_75_79 co_65_69 co_70_74 co_75_79 i.ship `w' if by == 0.5, r
358.             mata t  = st_matrix("r(table)")
359.             mata b  = t[1, 1::4]
360.             mata se = t[2, 1::4]
361.             mata assert(max(reldif(b, GtoolsPoisson.b[1, .])) < `tol')
362.             mata assert(max(reldif(se, GtoolsPoisson.se[1, .])) < `tol')
363.         qui poisson accident op_75_79 co_65_69 co_70_74 co_75_79 i.ship `w' if by == 1.5, r
364.             mata t  = st_matrix("r(table)")
365.             mata b  = t[1, 1::4]
366.             mata se = t[2, 1::4]
367.             mata assert(max(reldif(b, GtoolsPoisson.b[2, .])) < `tol')
368.             mata assert(max(reldif(se, GtoolsPoisson.se[2, .])) < `tol')
369. disp _skip(8) "check 7"
370.         qui gpoisson accident op_75_79 co_65_69 co_70_74 co_75_79 `w', by(by) absorb(ship) cluster(ship)
371.         qui poisson accident op_75_79 co_65_69 co_70_74 co_75_79 i.ship `w' if by == 0.5, cluster(ship)
372.             mata t  = st_matrix("r(table)")
373.             mata b  = t[1, 1::4]
374.             mata se = t[2, 1::4]
375.             mata assert(max(reldif(b, GtoolsPoisson.b[1, .])) < `tol')
376.             mata assert(max(reldif(se, GtoolsPoisson.se[1, .])) < `tol')
377.         qui poisson accident op_75_79 co_65_69 co_70_74 co_75_79 i.ship `w' if by == 1.5, cluster(ship)
378.             mata t  = st_matrix("r(table)")
379.             mata b  = t[1, 1::4]
380.             mata se = t[2, 1::4]
381.             mata assert(max(reldif(b, GtoolsPoisson.b[2, .])) < `tol')
382.             mata assert(max(reldif(se, GtoolsPoisson.se[2, .])) < `tol')
383. disp _skip(8) "check 8"
384.     }
385. 
.     * ------------------------------------------------------------------------
.     * ------------------------------------------------------------------------
. 
. disp ""
386. disp "--------------------------"
387. disp "Stress Test 1: Consistency"
388. disp "--------------------------"
389. disp ""
390.     qui {
391.         clear
392.         set obs 10000
393.         gen e = rnormal() * 50
394.         gen g = ceil(runiform()*100)
395.         forvalues i = 1 / 4 {
396.             gen x`i' = rnormal() * `i' + `i'
397.         }
398.         gen byte ones = 1
399.         gen y = 5 - 4 * x1 + 3 * x2 - 2 * x3 + x4 + g + e
400.         gen w = int(50 * runiform())
401.         areg y x1 x2 x3 x4, absorb(g)
402.         greg y x1 x2 x3 x4, absorb(g) mata(coefs)
403.         greg y x1 x2 x3 x4, absorb(g) prefix(hdfe(_hdfe_)) mata(coefs)
404.         greg y x1 x2 x3 x4, absorb(g) prefix(hdfe(_hdfe_)) replace
405.         greg y x1 x2 x3 x4, absorb(g) prefix(b(_b_))
406.         greg y x1 x2 x3 x4, absorb(g) prefix(se(_se_))
407.         greg y x1 x2 x3 x4, absorb(g) gen(b(_bx1 _bx2 _bx3 _bx4))
408.         greg y x1 x2 x3 x4, absorb(g) gen(hdfe(_hy _hx1 _hx2 _hx3 _hx4)) mata(levels, nob nose)
409.         greg y x1 x2 x3 x4, absorb(g) gen(se(_sex1 _sex2 _sex3 _sex4))
410.         assert (_hdfe_y == _hy)
411.         foreach var in x1 x2 x3 x4 {
412.             assert (_hdfe_`var' == _h`var')
413.             assert (_b_`var' == _b`var')
414.             assert (_se_`var' == _se`var')
415.         }
416. 
.         drop _*
417.         areg y x1 x2 x3 x4 [fw = w], absorb(g)
418.         greg y x1 x2 x3 x4 [fw = w], absorb(g) mata(coefs)
419.         greg y x1 x2 x3 x4 [fw = w], absorb(g) prefix(hdfe(_hdfe_)) mata(coefs)
420.         greg y x1 x2 x3 x4 [fw = w], absorb(g) prefix(hdfe(_hdfe_)) replace
421.         greg y x1 x2 x3 x4 [fw = w], absorb(g) prefix(b(_b_))
422.         greg y x1 x2 x3 x4 [fw = w], absorb(g) prefix(se(_se_))
423.         greg y x1 x2 x3 x4 [fw = w], absorb(g) gen(b(_bx1 _bx2 _bx3 _bx4))
424.         greg y x1 x2 x3 x4 [fw = w], absorb(g) gen(hdfe(_hy _hx1 _hx2 _hx3 _hx4)) mata(levels, nob nose)
425.         greg y x1 x2 x3 x4 [fw = w], absorb(g) gen(se(_sex1 _sex2 _sex3 _sex4))
426.         assert (_hdfe_y == _hy)
427.         foreach var in x1 x2 x3 x4 {
428.             assert (_hdfe_`var' == _h`var')
429.             assert (_b_`var' == _b`var')
430.             assert (_se_`var' == _se`var')
431.         }
432.     }
433. 
.     * ------------------------------------------------------------------------
.     * ------------------------------------------------------------------------
. 
. disp ""
434. disp "-----------------------------------"
435. disp "Stress Test 2: 'Large' observations"
436. disp "-----------------------------------"
437. disp ""
438.     qui {
439.         clear
440.         set obs 10000000
441.         gen e = rnormal() * 20
442.         gen g = ceil(runiform()*100)
443.         forvalues i = 1 / 4 {
444.             gen x`i' = rnormal() * `i' + `i'
445.         }
446.         gen byte ones = 1
447.         gen y = 5 - 4 * x1 + 3 * x2 - 2 * x3 + x4 + e
448.         gen w = int(50 * runiform())
449. 
.         greg y x1 x2 x3 x4, mata(r1)
450.         reg  y x1 x2 x3 x4
451.             mata: check_gregress_consistency(`tol', 1, 1::r1.kx, r1)
452.         greg y x1 x2 x3 x4, r mata(r1)
453.         reg  y x1 x2 x3 x4, r
454.             mata: check_gregress_consistency(`tol', 1, 1::r1.kx, r1)
455.         greg y x1 x2 x3 x4, cluster(g) mata(r1)
456.         reg  y x1 x2 x3 x4, vce(cluster g)
457.             mata: check_gregress_consistency(`tol', 1, 1::r1.kx, r1)
458.         greg y x1 x2 x3 x4, absorb(g) mata(r1)
459.         areg y x1 x2 x3 x4, absorb(g)
460.             mata: check_gregress_consistency(`tol', 1, 1::r1.kx, r1)
461. 
.         greg y x1 x2 x3 x4 [fw = w], mata(r1)
462.         reg  y x1 x2 x3 x4 [fw = w]
463.             mata: check_gregress_consistency(`tol', 1, 1::r1.kx, r1)
464.         greg y x1 x2 x3 x4 [fw = w], mata(r1) r
465.         reg  y x1 x2 x3 x4 [fw = w], r
466.             mata: check_gregress_consistency(`tol', 1, 1::r1.kx, r1)
467.         greg y x1 x2 x3 x4 [fw = w], mata(r1) cluster(g)
468.         reg  y x1 x2 x3 x4 [fw = w], vce(cluster g)
469.             mata: check_gregress_consistency(`tol', 1, 1::r1.kx, r1)
470.         greg y x1 x2 x3 x4 [fw = w], mata(r1) absorb(g)
471.         areg y x1 x2 x3 x4 [fw = w], absorb(g)
472.             mata: check_gregress_consistency(`tol', 1, 1::r1.kx, r1)
473.     }
474. 
.     * ------------------------------------------------------------------------
.     * ------------------------------------------------------------------------
. 
.     if ( `c(MP)' ) {
475. disp ""
476. disp "---------------------------"
477. disp "Stress Test 3: 'Wide' model"
478. disp "---------------------------"
479. disp ""
480.         qui {
481.             clear
482.             clear matrix
483.             set matsize 10000
484.             set obs 50000
485.             gen g = ceil(runiform()*10)
486.             gen e = rnormal() * 5
487.             forvalues i = 1 / 500 {
488.                 gen x`i' = rnormal() * `i' + `i'
489.             }
490.             gen y = - 4 * x1 + 3 * x2 - 2 * x3 + x4 + e
491. 
.             * Slower with all the vars, but no longer unreasonably so
.             greg y x*, mata(r1) v bench(3)
492.             reg  y x*
493.                 mata: check_gregress_consistency(`tol', 1, 1::r1.kx, r1)
494.             greg y x*, mata(r1) v bench(3) cluster(g)
495.             reg  y x*, vce(cluster g)
496.                 mata: check_gregress_consistency(`tol', 1, 1::r1.kx, r1)
497.         }
498.     }
499. 
.     * ------------------------------------------------------------------------
.     * ------------------------------------------------------------------------
. 
.     * clear
.     * local N 1000000
.     * local G 10000
.     * set rmsg on
.     * set obs `N'
.     * gen g1 = int(runiform() * `G')
.     * gen g2 = int(runiform() * `G')
.     * gen g3 = int(runiform() * `G')
.     * gen g4 = int(runiform() * `G')
.     * gen x1 = runiform()
.     * gen x2 = runiform()
.     * gen y  = 0.25 * x1 - 0.75 * x2 + g1 + g2 + g3 + 20 * rnormal()
.     * gen w  = int(50 * runiform())
.     *
.     * reghdfe y x1 x2, absorb(g1 g2 g3)
.     * greg y x1 x2, absorb(g1 g2 g3) mata(greg)
.     * mata greg.print()
.     *
.     * reghdfe y x1 x2, absorb(g1 g2 g3) vce(robust)
.     * greg y x1 x2, absorb(g1 g2 g3) mata(greg) r
.     * mata greg.print()
.     *
.     * reghdfe y x1 x2, absorb(g1 g2 g3) vce(cluster g4)
.     * greg y x1 x2, absorb(g1 g2 g3) cluster(g4) mata(greg)
.     * mata greg.print()
.     *
.     * reghdfe y x1 x2 [fw = w], absorb(g1 g2 g3)
.     * greg y x1 x2 [fw = w], absorb(g1 g2 g3) mata(greg)
.     * mata greg.print()
.     *
.     * reghdfe y x1 x2 [fw = w], absorb(g1 g2 g3) vce(robust)
.     * greg y x1 x2 [fw = w], absorb(g1 g2 g3) mata(greg) r
.     * mata greg.print()
.     *
.     * reghdfe y x1 x2 [fw = w], absorb(g1 g2 g3) vce(cluster g4)
.     * greg y x1 x2 [fw = w], absorb(g1 g2 g3) cluster(g4) mata(greg)
.     * mata greg.print()
.     *
.     * reghdfe y x1 x2 [aw = w], absorb(g1 g2 g3)
.     * greg y x1 x2 [aw = w], absorb(g1 g2 g3) mata(greg)
.     * mata greg.print()
.     *
.     * reghdfe y x1 x2 [aw = w], absorb(g1 g2 g3) vce(robust)
.     * greg y x1 x2 [aw = w], absorb(g1 g2 g3) mata(greg) r
.     * mata greg.print()
.     *
.     * reghdfe y x1 x2 [aw = w], absorb(g1 g2 g3) vce(cluster g4)
.     * greg y x1 x2 [aw = w], absorb(g1 g2 g3) cluster(g4) mata(greg)
.     * mata greg.print()
. 
.     * ------------------------------------------------------------------------
.     * ------------------------------------------------------------------------
. 
.     * Well, there is an issue when the number of absorbed effects are
.     * close to the number of observations ):
. end

. 
. capture program drop coll_gregress

. program coll_gregress
  1.     local tol 1e-8
  2. 
. disp ""
  3. disp "------------------------"
  4. disp "Collinearity Test 1: OLS"
  5. disp "------------------------"
  6. disp ""
  7. 
.     sysuse auto, clear
  8.     qui gen w = _n
  9.     qui gegen headcode = group(headroom)
 10.     qui gen z1 = 0
 11.     qui gen z2 = 0
 12.     qui tab headcode, gen(_h)
 13. 
.     foreach v in v1 v2 v5 v7 {
 14.         local w
 15.         local r
 16. 
.         if ( "`v'" == "v2" ) local w [fw = w]
 17.         if ( "`v'" == "v4" ) local w [fw = w]
 18. 
.         if ( "`v'" == "v5" ) local w [aw = w]
 19.         if ( "`v'" == "v6" ) local w [aw = w]
 20. 
.         if ( "`v'" == "v7" ) local w [pw = w]
 21.         if ( "`v'" == "v8" ) local w [pw = w]
 22. 
.         disp "greg checks `v': `w'"
 23. 
.         qui greg price mpg mpg `w', by(foreign) `r'
 24.             qui reg price mpg mpg if foreign == 0 `w'
 25.             mata: check_gregress_consistency(`tol', 1, ., GtoolsRegress)
 26.             qui reg price mpg mpg if foreign == 1 `w'
 27.             mata: check_gregress_consistency(`tol', 2, ., GtoolsRegress)
 28.         qui greg price mpg mpg mpg `w', by(foreign) robust `r'
 29.             qui reg price mpg mpg mpg if foreign == 0 `w', robust
 30.             mata: check_gregress_consistency(`tol', 1, ., GtoolsRegress)
 31.             qui reg price mpg mpg mpg if foreign == 1 `w', robust
 32.             mata: check_gregress_consistency(`tol', 2, ., GtoolsRegress)
 33.         qui greg price mpg mpg `w', by(foreign) cluster(headroom) `r'
 34.             qui reg price mpg mpg if foreign == 0 `w', cluster(headcode)
 35.             mata: check_gregress_consistency(`tol', 1, ., GtoolsRegress)
 36.             qui reg price mpg mpg if foreign == 1 `w', cluster(headcode)
 37.             mata: check_gregress_consistency(`tol', 2, ., GtoolsRegress)
 38. 
.         qui greg price mpg mpg `w', absorb(rep78)
 39.             qui areg price mpg mpg `w', absorb(rep78)
 40.             mata: check_gregress_consistency(`tol', 1, 1::2, GtoolsRegress)
 41.         qui greg price mpg mpg `w', absorb(rep78) robust
 42.             qui areg price mpg mpg `w', absorb(rep78) robust
 43.             mata: check_gregress_consistency(`tol', 1, 1::2, GtoolsRegress)
 44.         qui greg price mpg mpg `w', absorb(rep78) cluster(headroom)
 45.             qui areg price mpg mpg `w', absorb(rep78) cluster(headroom)
 46.             mata: check_gregress_consistency(`tol', 1, 1::2, GtoolsRegress)
 47. 
.         qui greg price mpg mpg `w', by(foreign) absorb(rep78)
 48.             qui areg price mpg mpg if foreign == 0 `w', absorb(rep78)
 49.             mata: check_gregress_consistency(`tol', 1, 1::2, GtoolsRegress)
 50.             qui areg price mpg mpg if foreign == 1 `w', absorb(rep78)
 51.             mata: check_gregress_consistency(`tol', 2, 1::2, GtoolsRegress)
 52.         qui greg price mpg mpg `w', by(foreign) absorb(rep78) robust
 53.             qui areg price mpg mpg if foreign == 0 `w', absorb(rep78) robust
 54.             mata: check_gregress_consistency(`tol', 1, 1::2, GtoolsRegress)
 55.             qui areg price mpg mpg if foreign == 1 `w', absorb(rep78) robust
 56.             mata: check_gregress_consistency(`tol', 2, 1::2, GtoolsRegress)
 57.         qui greg price mpg mpg `w', by(foreign) absorb(rep78) cluster(headroom)
 58.             qui areg price mpg mpg if foreign == 0 `w', absorb(rep78) cluster(headroom)
 59.             mata: check_gregress_consistency(`tol', 1, 1::2, GtoolsRegress)
 60.             qui areg price mpg mpg if foreign == 1 `w', absorb(rep78) cluster(headroom)
 61.             mata: check_gregress_consistency(`tol', 2, 1::2, GtoolsRegress)
 62. 
.         cap drop _*
 63.         qui tab headroom, gen(_h)
 64.         qui greg price mpg mpg _h* `w', absorb(rep78 headroom)
 65.             qui reg price mpg mpg i.rep78 i.headcode `w'
 66.             mata: check_gregress_consistency(`tol', 1, 1::2, GtoolsRegress)
 67.         qui greg price mpg mpg _h* `w', absorb(rep78 headroom) robust
 68.             qui reg price mpg mpg i.rep78 i.headcode `w', robust
 69.             mata: check_gregress_consistency(`tol', 1, 1::2, GtoolsRegress)
 70.         qui greg price mpg mpg _h* `w', absorb(rep78 headroom) cluster(headroom)
 71.             qui reg price mpg mpg i.rep78 i.headcode `w', vce(cluster headcode)
 72.             mata: check_gregress_consistency(`tol', 1, 1::2, GtoolsRegress)
 73. 
.         qui greg price mpg mpg _h* `w', by(foreign) absorb(rep78 headroom)
 74.             qui reg price mpg mpg i.rep78 i.headcode if foreign == 0 `w'
 75.             mata: check_gregress_consistency(`tol', 1, 1::2, GtoolsRegress)
 76.             qui reg price mpg mpg i.rep78 i.headcode if foreign == 1 `w'
 77.             mata: check_gregress_consistency(`tol', 2, 1::2, GtoolsRegress)
 78.         qui greg price mpg mpg _h* `w', by(foreign) absorb(rep78 headroom) robust
 79.             qui reg price mpg mpg i.rep78 i.headcode if foreign == 0 `w', robust
 80.             mata: check_gregress_consistency(`tol', 1, 1::2, GtoolsRegress)
 81.             qui reg price mpg mpg i.rep78 i.headcode if foreign == 1 `w', robust
 82.             mata: check_gregress_consistency(`tol', 2, 1::2, GtoolsRegress)
 83.         qui greg price mpg mpg _h* `w', by(foreign) absorb(rep78 headroom) cluster(headroom)
 84.             qui reg price mpg mpg i.rep78 i.headcode if foreign == 0 `w', cluster(headroom)
 85.             mata: check_gregress_consistency(`tol', 1, 1::2, GtoolsRegress)
 86.             qui reg price mpg mpg i.rep78 i.headcode if foreign == 1 `w', cluster(headroom)
 87.             mata: check_gregress_consistency(`tol', 2, 1::2, GtoolsRegress)
 88. 
.         qui greg price z1 z2 `w', `r' noc
 89.             mata assert(all(GtoolsRegress.b  :== .))
 90.             mata assert(all(GtoolsRegress.se :== .))
 91. 
.         qui greg price _h* `w', `r' absorb(headroom) noc
 92.             mata assert(all(GtoolsRegress.b  :== .))
 93.             mata assert(all(GtoolsRegress.se :== .))
 94.     }
 95. 
.     * ------------------------------------------------------------------------
.     * ------------------------------------------------------------------------
. 
. disp ""
 96. disp "-----------------------"
 97. disp "Collinearity Test 2: IV"
 98. disp "-----------------------"
 99. disp ""
100. 
.     local tol 1e-6
101.     sysuse auto, clear
102.     gen w = _n
103.     gegen headcode = group(headroom)
104.     cap drop _*
105.     qui tab headcode, gen(_h)
106.     qui tab rep78,    gen(_r)
107.     qui gen _mpg          = mpg
108.     qui gen _mpg2         = mpg
109.     qui gen _mpg3         = mpg
110.     qui gen _price        = price
111.     qui gen _price2       = price
112.     qui gen _gear_ratio   = gear_ratio
113.     qui gen _weight       = weight
114.     qui gen _turn         = turn
115.     qui gen _displacement = displacement
116.     qui gen z1 = 0
117.     qui gen z2 = 0
118. 
.     * Colinearity foo
.     *
.     * 1. Within
.     *     - instrumented
.     *     - instrument
.     *     - exogenous
.     *
.     * 2. Across
.     *     - (!) dependenet variable _and_ instrumented
.     *     - (!) dependenet variable _and_ instrument
.     *     - (!) dependenet variable _and_ exogenous
.     *     - instrumented _and_ instrument
.     *     - instrumented _and_ exogenous
.     *     - instrument _and_ exogenous
.     *
.     * 3. Mixed Across
.     *
.     *     - dependenet _and_ instrumented _and_ instrument
.     *     - dependenet _and_ instrumented _and_ exogenous
.     *     - dependenet _and_ instrument _and_ exogenous
.     *     - instrumented _and_ instrument _and_ exogenous
. 
.     local v
119.     local w
120.     foreach v in v1 v2 v3 v4 {
121.         local w
122.         if ( "`v'" == "v2" ) local w [fw = w]
123.         if ( "`v'" == "v3" ) local w [aw = w]
124.         if ( "`v'" == "v4" ) local w [pw = w]
125.         disp "iv checks `v': `w'"
126. 
.         foreach av in v1 v2 v3 {
127.             if ( `"`av'"' == "v1" ) local avars
128.             if ( `"`av'"' == "v2" ) local avars ibn.rep78
129.             if ( `"`av'"' == "v3" ) local avars ibn.rep78 ibn.headcode
130. 
.             if ( `"`av'"' == "v1" ) local absorb
131.             if ( `"`av'"' == "v2" ) local absorb absorb(rep78)
132.             if ( `"`av'"' == "v3" ) local absorb absorb(rep78 headcode)
133. 
.             if ( `"`av'"' == "v1" ) local dvars
134.             if ( `"`av'"' == "v2" ) unab  dvars: _r*
135.             if ( `"`av'"' == "v3" ) unab  dvars: _r* _h*
136. 
.             foreach vce in small robust cluster(headcode) {
137.                 local gvce  = cond(`"`vce'"' == "small", "", `"`vce'"')
138.                 local small = cond(`"`vce'"' == "small", "", `"small"')
139.                 disp _skip(4) "basic checks: `vce' `small' `absorb'"
140. 
.                 qui givregress price (mpg = gear_ratio _gear_ratio) weight turn                       `w' , `gvce' `absorb'
141.                     qui ivregress 2sls price (mpg = gear_ratio _gear_ratio) weight turn       `avars' `w' , `vce' `small'
142.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
143.                 qui givregress price (mpg _mpg = gear_ratio displacement) weight turn                 `w' , `gvce' `absorb'
144.                     qui ivregress 2sls price (mpg _mpg = gear_ratio displacement) weight turn `avars' `w' , `vce' `small'
145.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
146.                 qui givregress price (mpg = gear_ratio) weight _weight turn                           `w' , `gvce' `absorb'
147.                     qui ivregress 2sls price (mpg = gear_ratio) weight _weight turn           `avars' `w' , `vce' `small'
148.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
149.                 qui givregress price (_price = gear_ratio) weight turn                                `w' , `gvce' `absorb'
150.                 qui givregress price (mpg = gear_ratio  _price) weight turn                           `w' , `gvce' `absorb'
151.                     qui ivregress 2sls price (mpg = gear_ratio _price) weight turn            `avars' `w' , `vce' `small'
152.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
153.                 qui givregress price (mpg = gear_ratio) _price weight turn                            `w' , `gvce' `absorb'
154.                 qui givregress price (mpg = _mpg) weight turn                                         `w' , `gvce' `absorb'
155.                     mata assert(all(GtoolsIV.b  :== .))
156.                     mata assert(all(GtoolsIV.se :== .))
157.                 qui givregress price (mpg = gear_ratio _mpg) weight turn                              `w' , `gvce' `absorb'
158.                     qui ivregress 2sls price (mpg = gear_ratio _mpg) weight turn              `avars' `w' , `vce' `small'
159.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
160.                 qui givregress price (mpg = gear_ratio) _mpg weight turn                              `w' , `gvce' `absorb'
161.                     qui ivregress 2sls price (mpg = gear_ratio) _mpg weight turn              `avars' `w' , `vce' `small'
162.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
163.                 qui givregress price (mpg = gear_ratio) _gear_ratio weight turn                       `w' , `gvce' `absorb'
164.                     mata assert(all(GtoolsIV.b  :== .))
165.                     mata assert(all(GtoolsIV.se :== .))
166.                 qui givregress price (mpg = gear_ratio displacement) _gear_ratio weight turn                 `w' , `gvce' `absorb'
167.                     qui ivregress 2sls price (mpg = gear_ratio displacement) _gear_ratio weight turn `avars' `w' , `vce' `small'
168.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
169.                 qui givregress price (mpg _price = gear_ratio displacement _price2) weight turn       `w' , `gvce' `absorb'
170.                 qui givregress price (mpg _price = gear_ratio displacement) _price2 weight turn       `w' , `gvce' `absorb'
171.                 qui givregress price (mpg = _price gear_ratio displacement) _price2 weight turn       `w' , `gvce' `absorb'
172.                 qui givregress price (mpg _mpg = _mpg2 gear_ratio) _mpg3 weight turn                  `w' , `gvce' `absorb'
173.                     qui ivregress 2sls price (mpg _mpg = _mpg2 gear_ratio) _mpg3 weight turn  `avars' `w' , `vce' `small'
174.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
175. disp _skip(8) "check 1"
176. 
.                 qui givregress price (mpg = gear_ratio _gear_ratio) weight                            `w' , `gvce' `absorb'
177.                     qui ivregress 2sls price (mpg = gear_ratio _gear_ratio) weight            `avars' `w' , `vce' `small'
178.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
179.                 qui givregress price (mpg _mpg = gear_ratio displacement) weight                      `w' , `gvce' `absorb'
180.                     qui ivregress 2sls price (mpg _mpg = gear_ratio displacement) weight      `avars' `w' , `vce' `small'
181.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
182.                 qui givregress price (mpg = gear_ratio) weight _weight                                `w' , `gvce' `absorb'
183.                     qui ivregress 2sls price (mpg = gear_ratio) weight _weight                `avars' `w' , `vce' `small'
184.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
185.                 qui givregress price (_price = gear_ratio) weight                                     `w' , `gvce' `absorb'
186.                 qui givregress price (mpg = gear_ratio  _price) weight                                `w' , `gvce' `absorb'
187.                     qui ivregress 2sls price (mpg = gear_ratio _price) weight                 `avars' `w' , `vce' `small'
188.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
189.                 qui givregress price (mpg = gear_ratio) _price weight                                 `w' , `gvce' `absorb'
190.                 qui givregress price (mpg = _mpg) weight                                              `w' , `gvce' `absorb'
191.                     mata assert(all(GtoolsIV.b  :== .))
192.                     mata assert(all(GtoolsIV.se :== .))
193.                 qui givregress price (mpg = gear_ratio _mpg) weight                                   `w' , `gvce' `absorb'
194.                     qui ivregress 2sls price (mpg = gear_ratio _mpg) weight                   `avars' `w' , `vce' `small'
195.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
196.                 qui givregress price (mpg = gear_ratio) _mpg weight                                   `w' , `gvce' `absorb'
197.                     qui ivregress 2sls price (mpg = gear_ratio) _mpg weight                   `avars' `w' , `vce' `small'
198.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
199.                 qui givregress price (mpg = gear_ratio) _gear_ratio weight                            `w' , `gvce' `absorb'
200.                     mata assert(all(GtoolsIV.b  :== .))
201.                     mata assert(all(GtoolsIV.se :== .))
202.                 qui givregress price (mpg = gear_ratio displacement) _gear_ratio weight                      `w' , `gvce' `absorb'
203.                     qui ivregress 2sls price (mpg = gear_ratio displacement) _gear_ratio weight      `avars' `w' , `vce' `small'
204.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
205.                 qui givregress price (mpg _price = gear_ratio displacement _price2) weight            `w' , `gvce' `absorb'
206.                 qui givregress price (mpg _price = gear_ratio displacement) _price2 weight            `w' , `gvce' `absorb'
207.                 qui givregress price (mpg = _price gear_ratio displacement) _price2 weight            `w' , `gvce' `absorb'
208.                 qui givregress price (mpg _mpg = _mpg2 gear_ratio) _mpg3 weight                       `w' , `gvce' `absorb'
209.                     qui ivregress 2sls price (mpg _mpg = _mpg2 gear_ratio) _mpg3 weight       `avars' `w' , `vce' `small'
210.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
211. disp _skip(8) "check 2"
212. 
.                 qui givregress price (mpg = gear_ratio _gear_ratio)                                   `w' , `gvce' `absorb'
213.                     qui ivregress 2sls price (mpg = gear_ratio _gear_ratio)                   `avars' `w' , `vce' `small'
214.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
215.                 qui givregress price (mpg _mpg = gear_ratio displacement)                             `w' , `gvce' `absorb'
216.                     qui ivregress 2sls price (mpg _mpg = gear_ratio displacement)             `avars' `w' , `vce' `small'
217.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
218.                 qui givregress price (mpg = gear_ratio)                                               `w' , `gvce' `absorb'
219.                     qui ivregress 2sls price (mpg = gear_ratio)                               `avars' `w' , `vce' `small'
220.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
221.                 qui givregress price (_price = gear_ratio)                                            `w' , `gvce' `absorb'
222.                 qui givregress price (mpg = gear_ratio  _price)                                       `w' , `gvce' `absorb'
223.                     qui ivregress 2sls price (mpg = gear_ratio _price)                        `avars' `w' , `vce' `small'
224.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
225.                 qui givregress price (mpg = gear_ratio) _price                                        `w' , `gvce' `absorb'
226.                 qui givregress price (mpg = _mpg)                                                     `w' , `gvce' `absorb'
227.                     mata assert(all(GtoolsIV.b  :== .))
228.                     mata assert(all(GtoolsIV.se :== .))
229.                 qui givregress price (mpg = gear_ratio _mpg)                                          `w' , `gvce' `absorb'
230.                     qui ivregress 2sls price (mpg = gear_ratio _mpg)                          `avars' `w' , `vce' `small'
231.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
232.                 qui givregress price (mpg = gear_ratio) _mpg                                          `w' , `gvce' `absorb'
233.                     qui ivregress 2sls price (mpg = gear_ratio) _mpg                          `avars' `w' , `vce' `small'
234.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
235.                 qui givregress price (mpg = gear_ratio) _gear_ratio                                   `w' , `gvce' `absorb'
236.                     mata assert(all(GtoolsIV.b  :== .))
237.                     mata assert(all(GtoolsIV.se :== .))
238.                 qui givregress price (mpg = gear_ratio displacement) _gear_ratio                             `w' , `gvce' `absorb'
239.                     qui ivregress 2sls price (mpg = gear_ratio displacement) _gear_ratio             `avars' `w' , `vce' `small'
240.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
241.                 qui givregress price (mpg _price = gear_ratio displacement _price2)                   `w' , `gvce' `absorb'
242.                 qui givregress price (mpg _price = gear_ratio displacement) _price2                   `w' , `gvce' `absorb'
243.                 qui givregress price (mpg = _price gear_ratio displacement) _price2                   `w' , `gvce' `absorb'
244.                 qui givregress price (mpg _mpg = _mpg2 gear_ratio) _mpg3                              `w' , `gvce' `absorb'
245.                     qui ivregress 2sls price (mpg _mpg = _mpg2 gear_ratio) _mpg3              `avars' `w' , `vce' `small'
246.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
247. disp _skip(8) "check 3"
248. 
.                 if ( "`av'" == "v1" ) {
249.                 qui givregress price (mpg = gear_ratio _gear_ratio) weight                            `w' , `gvce' `absorb' noc
250.                     qui ivregress 2sls price (mpg = gear_ratio _gear_ratio) weight            `avars' `w' , `vce' `small'   noc
251.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
252.                 qui givregress price (mpg _mpg = gear_ratio displacement) weight                      `w' , `gvce' `absorb' noc
253.                     qui ivregress 2sls price (mpg _mpg = gear_ratio displacement) weight      `avars' `w' , `vce' `small'   noc
254.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
255.                 qui givregress price (mpg = gear_ratio) weight _weight                                `w' , `gvce' `absorb' noc
256.                     qui ivregress 2sls price (mpg = gear_ratio) weight _weight                `avars' `w' , `vce' `small'   noc
257.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
258.                 qui givregress price (_price = gear_ratio) weight                                     `w' , `gvce' `absorb' noc
259.                 qui givregress price (mpg = gear_ratio  _price) weight                                `w' , `gvce' `absorb' noc
260.                     qui ivregress 2sls price (mpg = gear_ratio _price) weight                 `avars' `w' , `vce' `small'   noc
261.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
262.                 qui givregress price (mpg = gear_ratio) _price weight                                 `w' , `gvce' `absorb' noc
263.                 qui givregress price (mpg = _mpg) weight                                              `w' , `gvce' `absorb' noc
264.                     mata assert(all(GtoolsIV.b  :== .))
265.                     mata assert(all(GtoolsIV.se :== .))
266.                 qui givregress price (mpg = gear_ratio _mpg) weight                                   `w' , `gvce' `absorb' noc
267.                     qui ivregress 2sls price (mpg = gear_ratio _mpg) weight                   `avars' `w' , `vce' `small'   noc
268.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
269.                 qui givregress price (mpg = gear_ratio) _mpg weight                                   `w' , `gvce' `absorb' noc
270.                     qui ivregress 2sls price (mpg = gear_ratio) _mpg weight                   `avars' `w' , `vce' `small'   noc
271.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
272.                 qui givregress price (mpg = gear_ratio) _gear_ratio weight                            `w' , `gvce' `absorb' noc
273.                     mata assert(all(GtoolsIV.b  :== .))
274.                     mata assert(all(GtoolsIV.se :== .))
275.                 qui givregress price (mpg = gear_ratio displacement) _gear_ratio weight                      `w' , `gvce' `absorb' noc
276.                     qui ivregress 2sls price (mpg = gear_ratio displacement) _gear_ratio weight      `avars' `w' , `vce' `small'   noc
277.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
278.                 qui givregress price (mpg _price = gear_ratio displacement _price2) weight            `w' , `gvce' `absorb' noc
279.                 qui givregress price (mpg _price = gear_ratio displacement) _price2 weight            `w' , `gvce' `absorb' noc
280.                 qui givregress price (mpg = _price gear_ratio displacement) _price2 weight            `w' , `gvce' `absorb' noc
281.                 qui givregress price (mpg _mpg = _mpg2 gear_ratio) _mpg3 weight                       `w' , `gvce' `absorb' noc
282.                     qui ivregress 2sls price (mpg _mpg = _mpg2 gear_ratio) _mpg3 weight       `avars' `w' , `vce' `small'   noc
283.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
284. disp _skip(8) "check 4"
285.                 }
286. 
.                 qui givregress price (mpg = gear_ratio turn _gear_ratio length) weight                            `w' , `gvce' `absorb'
287.                     qui ivregress 2sls price (mpg = gear_ratio turn _gear_ratio length) weight            `avars' `w' , `vce' `small'
288.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
289.                 qui givregress price (mpg _mpg = gear_ratio turn length displacement) weight                      `w' , `gvce' `absorb'
290.                     qui ivregress 2sls price (mpg _mpg = gear_ratio turn length displacement) weight      `avars' `w' , `vce' `small'
291.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
292.                 qui givregress price (mpg = gear_ratio turn length) weight _weight                                `w' , `gvce' `absorb'
293.                     qui ivregress 2sls price (mpg = gear_ratio turn length) weight _weight                `avars' `w' , `vce' `small'
294.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
295.                 qui givregress price (_price = gear_ratio turn length) weight                                     `w' , `gvce' `absorb'
296.                 qui givregress price (mpg = gear_ratio turn length  _price) weight                                `w' , `gvce' `absorb'
297.                     qui ivregress 2sls price (mpg = gear_ratio turn length _price) weight                 `avars' `w' , `vce' `small'
298.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
299.                 qui givregress price (mpg = gear_ratio turn length) _price weight                                 `w' , `gvce' `absorb'
300.                 qui givregress price (mpg = _mpg) weight                                              `w' , `gvce' `absorb'
301.                     mata assert(all(GtoolsIV.b  :== .))
302.                     mata assert(all(GtoolsIV.se :== .))
303.                 qui givregress price (mpg = gear_ratio turn length _mpg) weight                                   `w' , `gvce' `absorb'
304.                     qui ivregress 2sls price (mpg = gear_ratio turn length _mpg) weight                   `avars' `w' , `vce' `small'
305.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
306.                 qui givregress price (mpg = gear_ratio turn length) _mpg weight                                   `w' , `gvce' `absorb'
307.                     qui ivregress 2sls price (mpg = gear_ratio turn length) _mpg weight                   `avars' `w' , `vce' `small'
308.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
309.                 qui givregress price (mpg = gear_ratio turn) _turn _gear_ratio weight                             `w' , `gvce' `absorb'
310.                     mata assert(all(GtoolsIV.b  :== .))
311.                     mata assert(all(GtoolsIV.se :== .))
312.                 qui givregress price (mpg = gear_ratio turn length displacement) _gear_ratio weight                      `w' , `gvce' `absorb'
313.                     qui ivregress 2sls price (mpg = gear_ratio turn length displacement) _gear_ratio weight      `avars' `w' , `vce' `small'
314.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
315.                 qui givregress price (mpg _price = gear_ratio turn length displacement _price2) weight            `w' , `gvce' `absorb'
316.                 qui givregress price (mpg _price = gear_ratio turn length displacement) _price2 weight            `w' , `gvce' `absorb'
317.                 qui givregress price (mpg = _price gear_ratio turn length displacement) _price2 weight            `w' , `gvce' `absorb'
318.                 qui givregress price (mpg _mpg = _mpg2 gear_ratio turn length) _mpg3 weight                       `w' , `gvce' `absorb'
319.                     qui ivregress 2sls price (mpg _mpg = _mpg2 gear_ratio turn length) _mpg3 weight       `avars' `w' , `vce' `small'
320.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
321. disp _skip(8) "check 5"
322. 
.                 qui givregress price (mpg length = gear_ratio _gear_ratio turn) weight                            `w' , `gvce' `absorb'
323.                     qui ivregress 2sls price (mpg length = gear_ratio _gear_ratio turn) weight            `avars' `w' , `vce' `small'
324.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
325.                 qui givregress price (mpg length _mpg = gear_ratio displacement turn) weight                      `w' , `gvce' `absorb'
326.                     qui ivregress 2sls price (mpg length _mpg = gear_ratio displacement turn) weight      `avars' `w' , `vce' `small'
327.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
328.                 qui givregress price (mpg length = gear_ratio turn) weight _weight                                `w' , `gvce' `absorb'
329.                     qui ivregress 2sls price (mpg length = gear_ratio turn) weight _weight                `avars' `w' , `vce' `small'
330.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
331.                 qui givregress price (_price = gear_ratio turn) weight                                     `w' , `gvce' `absorb'
332.                 qui givregress price (mpg length = gear_ratio  _price turn) weight                                `w' , `gvce' `absorb'
333.                     qui ivregress 2sls price (mpg length = gear_ratio _price turn) weight                 `avars' `w' , `vce' `small'
334.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
335.                 qui givregress price (mpg length = gear_ratio turn) _price weight                                 `w' , `gvce' `absorb'
336.                 qui givregress price (mpg _turn = _mpg turn) weight                                              `w' , `gvce' `absorb'
337.                     mata assert(all(GtoolsIV.b  :== .))
338.                     mata assert(all(GtoolsIV.se :== .))
339.                 qui givregress price (mpg length = gear_ratio _mpg turn) weight                                   `w' , `gvce' `absorb'
340.                     qui ivregress 2sls price (mpg length = gear_ratio _mpg turn) weight                   `avars' `w' , `vce' `small'
341.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
342.                 qui givregress price (mpg length = gear_ratio turn) _mpg weight                                   `w' , `gvce' `absorb'
343.                     qui ivregress 2sls price (mpg length = gear_ratio turn) _mpg weight                   `avars' `w' , `vce' `small'
344.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
345.                 qui givregress price (mpg length = gear_ratio turn) _gear_ratio weight                            `w' , `gvce' `absorb'
346.                     mata assert(all(GtoolsIV.b  :== .))
347.                     mata assert(all(GtoolsIV.se :== .))
348.                 qui givregress price (mpg length = gear_ratio displacement turn) _gear_ratio weight                      `w' , `gvce' `absorb'
349.                     qui ivregress 2sls price (mpg length = gear_ratio displacement turn) _gear_ratio weight      `avars' `w' , `vce' `small'
350.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
351.                 qui givregress price (mpg length _price = gear_ratio displacement _price2 turn) weight            `w' , `gvce' `absorb'
352.                 qui givregress price (mpg length _price = gear_ratio displacement turn) _price2 weight            `w' , `gvce' `absorb'
353.                 qui givregress price (mpg length = _price gear_ratio displacement turn) _price2 weight            `w' , `gvce' `absorb'
354.                 qui givregress price (mpg length _mpg = _mpg2 gear_ratio turn) _mpg3 weight                       `w' , `gvce' `absorb'
355.                     qui ivregress 2sls price (mpg length _mpg = _mpg2 gear_ratio turn) _mpg3 weight       `avars' `w' , `vce' `small'
356.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
357. disp _skip(8) "check 7"
358. 
.                 qui givregress price (mpg length = gear_ratio _gear_ratio turn) _displacement weight                            `w' , `gvce' `absorb'
359.                     qui ivregress 2sls price (mpg length = gear_ratio _gear_ratio turn) _displacement weight            `avars' `w' , `vce' `small'
360.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
361.                 qui givregress price (mpg length _mpg = gear_ratio displacement turn) _displacement weight                      `w' , `gvce' `absorb'
362.                     qui ivregress 2sls price (mpg length _mpg = gear_ratio displacement turn) _displacement weight      `avars' `w' , `vce' `small'
363.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
364.                 qui givregress price (mpg length = gear_ratio turn) _displacement weight _weight                                `w' , `gvce' `absorb'
365.                     qui ivregress 2sls price (mpg length = gear_ratio turn) _displacement weight _weight                `avars' `w' , `vce' `small'
366.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
367.                 qui givregress price (_price = gear_ratio turn) weight                                     `w' , `gvce' `absorb'
368.                 qui givregress price (mpg length = gear_ratio  _price turn) _displacement weight                                `w' , `gvce' `absorb'
369.                     qui ivregress 2sls price (mpg length = gear_ratio _price turn) _displacement weight                 `avars' `w' , `vce' `small'
370.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
371.                 qui givregress price (mpg length = gear_ratio turn) _displacement _price weight                                 `w' , `gvce' `absorb'
372.                 qui givregress price (mpg _turn = _mpg turn) _displacement weight                                              `w' , `gvce' `absorb'
373.                     mata assert(all(GtoolsIV.b  :== .))
374.                     mata assert(all(GtoolsIV.se :== .))
375.                 qui givregress price (mpg length = gear_ratio _mpg turn) _displacement weight                                   `w' , `gvce' `absorb'
376.                     qui ivregress 2sls price (mpg length = gear_ratio _mpg turn) _displacement weight                   `avars' `w' , `vce' `small'
377.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
378.                 qui givregress price (mpg length = gear_ratio turn) _displacement _mpg weight                                   `w' , `gvce' `absorb'
379.                     qui ivregress 2sls price (mpg length = gear_ratio turn) _displacement _mpg weight                   `avars' `w' , `vce' `small'
380.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
381.                 qui givregress price (mpg length = gear_ratio turn) _displacement _gear_ratio weight                            `w' , `gvce' `absorb'
382.                     mata assert(all(GtoolsIV.b  :== .))
383.                     mata assert(all(GtoolsIV.se :== .))
384.                 qui givregress price (mpg length = gear_ratio turn displacement trunk) _displacement _gear_ratio weight                      `w' , `gvce' `absorb'
385.                     qui ivregress 2sls price (mpg length = gear_ratio turn displacement trunk) _displacement _gear_ratio weight      `avars' `w' , `vce' `small'
386.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
387.                 qui givregress price (mpg length _price = gear_ratio displacement _price2 turn) _displacement weight            `w' , `gvce' `absorb'
388.                 qui givregress price (mpg length _price = gear_ratio displacement turn) _displacement _price2 weight            `w' , `gvce' `absorb'
389.                 qui givregress price (mpg length = _price gear_ratio displacement turn) _displacement _price2 weight            `w' , `gvce' `absorb'
390.                 qui givregress price (mpg length _mpg = _mpg2 gear_ratio turn) _mpg3 weight                       `w' , `gvce' `absorb'
391.                     qui ivregress 2sls price (mpg length _mpg = _mpg2 gear_ratio turn) _mpg3 weight       `avars' `w' , `vce' `small'
392.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
393. disp _skip(8) "check 8"
394. 
.                 if ( inlist(`"`av'"', "v2", "v3") ) {
395.                 qui givregress price (mpg length = gear_ratio _gear_ratio turn) _displacement `dvars' weight                        `w' , `gvce' `absorb'
396.                     qui ivregress 2sls price (mpg length = gear_ratio _gear_ratio turn) _displacement `dvars' weight        `avars' `w' , `vce' `small'
397.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV, 4::`=3 + `:list sizeof dvars'')
398.                 qui givregress price (mpg length _mpg = gear_ratio displacement turn) _displacement `dvars' weight                  `w' , `gvce' `absorb'
399.                     qui ivregress 2sls price (mpg length _mpg = gear_ratio displacement turn) _displacement `dvars' weight  `avars' `w' , `vce' `small'
400.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV, 5::`=4 + `:list sizeof dvars'')
401.                 qui givregress price (mpg length = gear_ratio turn) _displacement `dvars' weight _weight                            `w' , `gvce' `absorb'
402.                     qui ivregress 2sls price (mpg length = gear_ratio turn) _displacement `dvars' weight _weight            `avars' `w' , `vce' `small'
403.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV, 4::`=3 + `:list sizeof dvars'')
404.                 qui givregress price (_price = gear_ratio turn) weight                                                          `w' , `gvce' `absorb'
405.                 qui givregress price (mpg length = gear_ratio  _price turn) _displacement `dvars' weight                            `w' , `gvce' `absorb'
406.                     qui ivregress 2sls price (mpg length = gear_ratio _price turn) _displacement `dvars' weight             `avars' `w' , `vce' `small'
407.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV, 4::`=3 + `:list sizeof dvars'')
408.                 qui givregress price (mpg length = gear_ratio turn) _displacement _price `dvars' weight                         `w' , `gvce' `absorb'
409.                 qui givregress price (mpg _turn = _mpg turn) _displacement weight                                               `w' , `gvce' `absorb'
410.                     mata assert(all(GtoolsIV.b  :== .))
411.                     mata assert(all(GtoolsIV.se :== .))
412.                 qui givregress price (mpg length = gear_ratio _mpg turn) _displacement `dvars' weight                               `w' , `gvce' `absorb'
413.                     qui ivregress 2sls price (mpg length = gear_ratio _mpg turn) _displacement `dvars' weight               `avars' `w' , `vce' `small'
414.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV, 4::`=3 + `:list sizeof dvars'')
415.                 qui givregress price (mpg length = gear_ratio turn) _displacement _mpg `dvars' weight                               `w' , `gvce' `absorb'
416.                     qui ivregress 2sls price (mpg length = gear_ratio turn) _displacement `dvars' _mpg weight               `avars' `w' , `vce' `small'
417.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV, 4::`=3 + `:list sizeof dvars'')
418.                 qui givregress price (mpg length = gear_ratio turn) _displacement _gear_ratio `dvars' weight                        `w' , `gvce' `absorb'
419.                     mata assert(all(GtoolsIV.b  :== .))
420.                     mata assert(all(GtoolsIV.se :== .))
421.                 qui givregress price (mpg length = gear_ratio turn displacement trunk) _displacement `dvars' _gear_ratio weight                 `w' , `gvce' `absorb'
422.                     qui ivregress 2sls price (mpg length = gear_ratio turn displacement trunk) _displacement `dvars' _gear_ratio weight `avars' `w' , `vce' `small'
423.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV, 4::`=3 + `:list sizeof dvars'')
424.                 qui givregress price (mpg length _price = gear_ratio displacement _price2 turn) _displacement `dvars' weight        `w' , `gvce' `absorb'
425.                 qui givregress price (mpg length _price = gear_ratio displacement turn) _displacement `dvars' _price2 weight        `w' , `gvce' `absorb'
426.                 qui givregress price (mpg length = _price gear_ratio displacement turn) _displacement `dvars' _price2 weight        `w' , `gvce' `absorb'
427.                 qui givregress price (mpg length _mpg = _mpg2 gear_ratio turn) _mpg3 `dvars' weight                                 `w' , `gvce' `absorb'
428.                     qui ivregress 2sls price (mpg length _mpg = _mpg2 gear_ratio turn) _mpg3 `dvars' weight                 `avars' `w' , `vce' `small'
429.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV, 5::`=4 + `:list sizeof dvars'')
430. disp _skip(8) "check 10"
431.                 }
432. 
.                 qui givregress price (z1 = gear_ratio _gear_ratio) weight turn    `w' , `gvce' `absorb'
433.                     mata assert(all(GtoolsIV.b  :== .))
434.                     mata assert(all(GtoolsIV.se :== .))
435.                 qui givregress price (z1 z2 = gear_ratio _gear_ratio) weight turn `w' , `gvce' `absorb'
436.                     mata assert(all(GtoolsIV.b  :== .))
437.                     mata assert(all(GtoolsIV.se :== .))
438.                 qui givregress price (mpg = z1 z2) weight turn                    `w' , `gvce' `absorb'
439.                     mata assert(all(GtoolsIV.b  :== .))                           
440.                     mata assert(all(GtoolsIV.se :== .))                           
441.                 qui givregress price (z1 = z2) weight turn                        `w' , `gvce' `absorb'
442.                     mata assert(all(GtoolsIV.b  :== .))
443.                     mata assert(all(GtoolsIV.se :== .))
444.                 qui givregress price (mpg = gear_ratio) z1 z2                     `w' , `gvce' `absorb' noc
445.                     qui ivregress 2sls price (mpg = gear_ratio) z1 z2     `avars' `w' , `vce' `small' noc
446.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
447. disp _skip(8) "check 11"
448.             }
449.         }
450. 
.         * expand 10
.         * gen _by = mod(_n, 2)
.         * local by by(_by)
.         qui expand 2, gen(_expand)
451.         local by by(foreign)
452.         local if1 if foreign == 0
453.         local if2 if foreign == 1
454.         foreach av in v1 v2 v3 {
455.             if ( `"`av'"' == "v1" ) local avars
456.             if ( `"`av'"' == "v2" ) local avars ibn.rep78
457.             if ( `"`av'"' == "v3" ) local avars ibn.rep78 ibn.headcode
458. 
.             if ( `"`av'"' == "v1" ) local absorb
459.             if ( `"`av'"' == "v2" ) local absorb absorb(rep78)
460.             if ( `"`av'"' == "v3" ) local absorb absorb(rep78 headcode)
461. 
.             if ( `"`av'"' == "v1" ) local dvars
462.             if ( `"`av'"' == "v2" ) unab  dvars: _r*
463.             if ( `"`av'"' == "v3" ) unab  dvars: _r* _h*
464. 
.             foreach vce in small robust cluster(headcode) {
465.                 local gvce  = cond(`"`vce'"' == "small", "", `"`vce'"')
466.                 local small = cond(`"`vce'"' == "small", "", `"small"')
467.                 disp _skip(4) "`by' checks: `vce' `small' `absorb'"
468. 
.                 qui givregress price (mpg = gear_ratio _gear_ratio) weight turn                       `w' , `by' `gvce' `absorb'
469.                     qui ivregress 2sls price (mpg = gear_ratio _gear_ratio) weight turn       `avars' `w' `if1', `vce' `small'
470.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
471.                     qui ivregress 2sls price (mpg = gear_ratio _gear_ratio) weight turn       `avars' `w' `if2', `vce' `small'
472.                     mata: check_gregress_consistency(`tol', 2, 1::GtoolsIV.kx, GtoolsIV)
473.                 qui givregress price (mpg _mpg = gear_ratio displacement) weight turn                 `w' , `by' `gvce' `absorb'
474.                     qui ivregress 2sls price (mpg _mpg = gear_ratio displacement) weight turn `avars' `w' `if1', `vce' `small'
475.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
476.                     qui ivregress 2sls price (mpg _mpg = gear_ratio displacement) weight turn `avars' `w' `if2', `vce' `small'
477.                     mata: check_gregress_consistency(`tol', 2, 1::GtoolsIV.kx, GtoolsIV)
478.                 qui givregress price (mpg = gear_ratio) weight _weight turn                           `w' , `by' `gvce' `absorb'
479.                     qui ivregress 2sls price (mpg = gear_ratio) weight _weight turn           `avars' `w' `if1', `vce' `small'
480.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
481.                     qui ivregress 2sls price (mpg = gear_ratio) weight _weight turn           `avars' `w' `if2', `vce' `small'
482.                     mata: check_gregress_consistency(`tol', 2, 1::GtoolsIV.kx, GtoolsIV)
483.                 qui givregress price (_price = gear_ratio) weight turn                                `w' , `by' `gvce' `absorb'
484.                 qui givregress price (mpg = gear_ratio  _price) weight turn                           `w' , `by' `gvce' `absorb'
485.                     qui ivregress 2sls price (mpg = gear_ratio _price) weight turn            `avars' `w' `if1', `vce' `small'
486.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
487.                     qui ivregress 2sls price (mpg = gear_ratio _price) weight turn            `avars' `w' `if2', `vce' `small'
488.                     mata: check_gregress_consistency(`tol', 2, 1::GtoolsIV.kx, GtoolsIV)
489.                 qui givregress price (mpg = gear_ratio) _price weight turn                            `w' , `by' `gvce' `absorb'
490.                 qui givregress price (mpg = _mpg) weight turn                                         `w' , `by' `gvce' `absorb'
491.                     mata assert(all(GtoolsIV.b  :== .))
492.                     mata assert(all(GtoolsIV.se :== .))
493.                 qui givregress price (mpg = gear_ratio _mpg) weight turn                              `w' , `by' `gvce' `absorb'
494.                     qui ivregress 2sls price (mpg = gear_ratio _mpg) weight turn              `avars' `w' `if1', `vce' `small'
495.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
496.                     qui ivregress 2sls price (mpg = gear_ratio _mpg) weight turn              `avars' `w' `if2', `vce' `small'
497.                     mata: check_gregress_consistency(`tol', 2, 1::GtoolsIV.kx, GtoolsIV)
498.                 qui givregress price (mpg = gear_ratio) _mpg weight turn                              `w' , `by' `gvce' `absorb'
499.                     qui ivregress 2sls price (mpg = gear_ratio) _mpg weight turn              `avars' `w' `if1', `vce' `small'
500.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
501.                     qui ivregress 2sls price (mpg = gear_ratio) _mpg weight turn              `avars' `w' `if2', `vce' `small'
502.                     mata: check_gregress_consistency(`tol', 2, 1::GtoolsIV.kx, GtoolsIV)
503.                 qui givregress price (mpg = gear_ratio) _gear_ratio weight turn                       `w' , `by' `gvce' `absorb'
504.                     mata assert(all(GtoolsIV.b  :== .))
505.                     mata assert(all(GtoolsIV.se :== .))
506.                 qui givregress price (mpg = gear_ratio displacement) _gear_ratio weight turn                 `w' , `by' `gvce' `absorb'
507.                     qui ivregress 2sls price (mpg = gear_ratio displacement) _gear_ratio weight turn `avars' `w' `if1', `vce' `small'
508.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
509.                     qui ivregress 2sls price (mpg = gear_ratio displacement) _gear_ratio weight turn `avars' `w' `if2', `vce' `small'
510.                     mata: check_gregress_consistency(`tol', 2, 1::GtoolsIV.kx, GtoolsIV)
511.                 qui givregress price (mpg _price = gear_ratio displacement _price2) weight turn       `w' , `by' `gvce' `absorb'
512.                 qui givregress price (mpg _price = gear_ratio displacement) _price2 weight turn       `w' , `by' `gvce' `absorb'
513.                 qui givregress price (mpg = _price gear_ratio displacement) _price2 weight turn       `w' , `by' `gvce' `absorb'
514.                 qui givregress price (mpg _mpg = _mpg2 gear_ratio) _mpg3 weight turn                  `w' , `by' `gvce' `absorb'
515.                     qui ivregress 2sls price (mpg _mpg = _mpg2 gear_ratio) _mpg3 weight turn  `avars' `w' `if1', `vce' `small'
516.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
517.                     qui ivregress 2sls price (mpg _mpg = _mpg2 gear_ratio) _mpg3 weight turn  `avars' `w' `if2', `vce' `small'
518.                     mata: check_gregress_consistency(`tol', 2, 1::GtoolsIV.kx, GtoolsIV)
519. disp _skip(8) "check 1"
520. 
.                 qui givregress price (mpg = gear_ratio _gear_ratio) weight                            `w' , `by' `gvce' `absorb'
521.                     qui ivregress 2sls price (mpg = gear_ratio _gear_ratio) weight            `avars' `w' `if1', `vce' `small'
522.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
523.                     qui ivregress 2sls price (mpg = gear_ratio _gear_ratio) weight            `avars' `w' `if2', `vce' `small'
524.                     mata: check_gregress_consistency(`tol', 2, 1::GtoolsIV.kx, GtoolsIV)
525.                 qui givregress price (mpg _mpg = gear_ratio displacement) weight                      `w' , `by' `gvce' `absorb'
526.                     qui ivregress 2sls price (mpg _mpg = gear_ratio displacement) weight      `avars' `w' `if1', `vce' `small'
527.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
528.                     qui ivregress 2sls price (mpg _mpg = gear_ratio displacement) weight      `avars' `w' `if2', `vce' `small'
529.                     mata: check_gregress_consistency(`tol', 2, 1::GtoolsIV.kx, GtoolsIV)
530.                 qui givregress price (mpg = gear_ratio) weight _weight                                `w' , `by' `gvce' `absorb'
531.                     qui ivregress 2sls price (mpg = gear_ratio) weight _weight                `avars' `w' `if1', `vce' `small'
532.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
533.                     qui ivregress 2sls price (mpg = gear_ratio) weight _weight                `avars' `w' `if2', `vce' `small'
534.                     mata: check_gregress_consistency(`tol', 2, 1::GtoolsIV.kx, GtoolsIV)
535.                 qui givregress price (_price = gear_ratio) weight                                     `w' , `by' `gvce' `absorb'
536.                 qui givregress price (mpg = gear_ratio  _price) weight                                `w' , `by' `gvce' `absorb'
537.                     qui ivregress 2sls price (mpg = gear_ratio _price) weight                 `avars' `w' `if1', `vce' `small'
538.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
539.                     qui ivregress 2sls price (mpg = gear_ratio _price) weight                 `avars' `w' `if2', `vce' `small'
540.                     mata: check_gregress_consistency(`tol', 2, 1::GtoolsIV.kx, GtoolsIV)
541.                 qui givregress price (mpg = gear_ratio) _price weight                                 `w' , `by' `gvce' `absorb'
542.                 qui givregress price (mpg = _mpg) weight                                              `w' , `by' `gvce' `absorb'
543.                     mata assert(all(GtoolsIV.b  :== .))
544.                     mata assert(all(GtoolsIV.se :== .))
545.                 qui givregress price (mpg = gear_ratio _mpg) weight                                   `w' , `by' `gvce' `absorb'
546.                     qui ivregress 2sls price (mpg = gear_ratio _mpg) weight                   `avars' `w' `if1', `vce' `small'
547.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
548.                     qui ivregress 2sls price (mpg = gear_ratio _mpg) weight                   `avars' `w' `if2', `vce' `small'
549.                     mata: check_gregress_consistency(`tol', 2, 1::GtoolsIV.kx, GtoolsIV)
550.                 qui givregress price (mpg = gear_ratio) _mpg weight                                   `w' , `by' `gvce' `absorb'
551.                     qui ivregress 2sls price (mpg = gear_ratio) _mpg weight                   `avars' `w' `if1', `vce' `small'
552.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
553.                     qui ivregress 2sls price (mpg = gear_ratio) _mpg weight                   `avars' `w' `if2', `vce' `small'
554.                     mata: check_gregress_consistency(`tol', 2, 1::GtoolsIV.kx, GtoolsIV)
555.                 qui givregress price (mpg = gear_ratio) _gear_ratio weight                            `w' , `by' `gvce' `absorb'
556.                     mata assert(all(GtoolsIV.b  :== .))
557.                     mata assert(all(GtoolsIV.se :== .))
558.                 qui givregress price (mpg = gear_ratio displacement) _gear_ratio weight                      `w' , `by' `gvce' `absorb'
559.                     qui ivregress 2sls price (mpg = gear_ratio displacement) _gear_ratio weight      `avars' `w' `if1', `vce' `small'
560.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
561.                     qui ivregress 2sls price (mpg = gear_ratio displacement) _gear_ratio weight      `avars' `w' `if2', `vce' `small'
562.                     mata: check_gregress_consistency(`tol', 2, 1::GtoolsIV.kx, GtoolsIV)
563.                 qui givregress price (mpg _price = gear_ratio displacement _price2) weight            `w' , `by' `gvce' `absorb'
564.                 qui givregress price (mpg _price = gear_ratio displacement) _price2 weight            `w' , `by' `gvce' `absorb'
565.                 qui givregress price (mpg = _price gear_ratio displacement) _price2 weight            `w' , `by' `gvce' `absorb'
566.                 qui givregress price (mpg _mpg = _mpg2 gear_ratio) _mpg3 weight                       `w' , `by' `gvce' `absorb'
567.                     qui ivregress 2sls price (mpg _mpg = _mpg2 gear_ratio) _mpg3 weight       `avars' `w' `if1', `vce' `small'
568.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
569.                     qui ivregress 2sls price (mpg _mpg = _mpg2 gear_ratio) _mpg3 weight       `avars' `w' `if2', `vce' `small'
570.                     mata: check_gregress_consistency(`tol', 2, 1::GtoolsIV.kx, GtoolsIV)
571. disp _skip(8) "check 2"
572. 
.                 qui givregress price (mpg = gear_ratio _gear_ratio)                                   `w' , `by' `gvce' `absorb'
573.                     qui ivregress 2sls price (mpg = gear_ratio _gear_ratio)                   `avars' `w' `if1', `vce' `small'
574.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
575.                     qui ivregress 2sls price (mpg = gear_ratio _gear_ratio)                   `avars' `w' `if2', `vce' `small'
576.                     mata: check_gregress_consistency(`tol', 2, 1::GtoolsIV.kx, GtoolsIV)
577.                 qui givregress price (mpg _mpg = gear_ratio displacement)                             `w' , `by' `gvce' `absorb'
578.                     qui ivregress 2sls price (mpg _mpg = gear_ratio displacement)             `avars' `w' `if1', `vce' `small'
579.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
580.                     qui ivregress 2sls price (mpg _mpg = gear_ratio displacement)             `avars' `w' `if2', `vce' `small'
581.                     mata: check_gregress_consistency(`tol', 2, 1::GtoolsIV.kx, GtoolsIV)
582.                 qui givregress price (mpg = gear_ratio)                                               `w' , `by' `gvce' `absorb'
583.                     qui ivregress 2sls price (mpg = gear_ratio)                               `avars' `w' `if1', `vce' `small'
584.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
585.                     qui ivregress 2sls price (mpg = gear_ratio)                               `avars' `w' `if2', `vce' `small'
586.                     mata: check_gregress_consistency(`tol', 2, 1::GtoolsIV.kx, GtoolsIV)
587.                 qui givregress price (_price = gear_ratio)                                            `w' , `by' `gvce' `absorb'
588.                 qui givregress price (mpg = gear_ratio  _price)                                       `w' , `by' `gvce' `absorb'
589.                     qui ivregress 2sls price (mpg = gear_ratio _price)                        `avars' `w' `if1', `vce' `small'
590.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
591.                     qui ivregress 2sls price (mpg = gear_ratio _price)                        `avars' `w' `if2', `vce' `small'
592.                     mata: check_gregress_consistency(`tol', 2, 1::GtoolsIV.kx, GtoolsIV)
593.                 qui givregress price (mpg = gear_ratio) _price                                        `w' , `by' `gvce' `absorb'
594.                 qui givregress price (mpg = _mpg)                                                     `w' , `by' `gvce' `absorb'
595.                     mata assert(all(GtoolsIV.b  :== .))
596.                     mata assert(all(GtoolsIV.se :== .))
597.                 qui givregress price (mpg = gear_ratio _mpg)                                          `w' , `by' `gvce' `absorb'
598.                     qui ivregress 2sls price (mpg = gear_ratio _mpg)                          `avars' `w' `if1', `vce' `small'
599.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
600.                     qui ivregress 2sls price (mpg = gear_ratio _mpg)                          `avars' `w' `if2', `vce' `small'
601.                     mata: check_gregress_consistency(`tol', 2, 1::GtoolsIV.kx, GtoolsIV)
602.                 qui givregress price (mpg = gear_ratio) _mpg                                          `w' , `by' `gvce' `absorb'
603.                     qui ivregress 2sls price (mpg = gear_ratio) _mpg                          `avars' `w' `if1', `vce' `small'
604.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
605.                     qui ivregress 2sls price (mpg = gear_ratio) _mpg                          `avars' `w' `if2', `vce' `small'
606.                     mata: check_gregress_consistency(`tol', 2, 1::GtoolsIV.kx, GtoolsIV)
607.                 qui givregress price (mpg = gear_ratio) _gear_ratio                                   `w' , `by' `gvce' `absorb'
608.                     mata assert(all(GtoolsIV.b  :== .))
609.                     mata assert(all(GtoolsIV.se :== .))
610.                 qui givregress price (mpg = gear_ratio displacement) _gear_ratio                             `w' , `by' `gvce' `absorb'
611.                     qui ivregress 2sls price (mpg = gear_ratio displacement) _gear_ratio             `avars' `w' `if1', `vce' `small'
612.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
613.                     qui ivregress 2sls price (mpg = gear_ratio displacement) _gear_ratio             `avars' `w' `if2', `vce' `small'
614.                     mata: check_gregress_consistency(`tol', 2, 1::GtoolsIV.kx, GtoolsIV)
615.                 qui givregress price (mpg _price = gear_ratio displacement _price2)                   `w' , `by' `gvce' `absorb'
616.                 qui givregress price (mpg _price = gear_ratio displacement) _price2                   `w' , `by' `gvce' `absorb'
617.                 qui givregress price (mpg = _price gear_ratio displacement) _price2                   `w' , `by' `gvce' `absorb'
618.                 qui givregress price (mpg _mpg = _mpg2 gear_ratio) _mpg3                              `w' , `by' `gvce' `absorb'
619.                     qui ivregress 2sls price (mpg _mpg = _mpg2 gear_ratio) _mpg3              `avars' `w' `if1', `vce' `small'
620.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
621.                     qui ivregress 2sls price (mpg _mpg = _mpg2 gear_ratio) _mpg3              `avars' `w' `if2', `vce' `small'
622.                     mata: check_gregress_consistency(`tol', 2, 1::GtoolsIV.kx, GtoolsIV)
623. disp _skip(8) "check 3"
624. 
.                 if ( "`av'" == "v1" ) {
625.                 qui givregress price (mpg = gear_ratio _gear_ratio) weight                            `w' , `by' `gvce' `absorb' noc
626.                     qui ivregress 2sls price (mpg = gear_ratio _gear_ratio) weight            `avars' `w' `if1', `vce' `small'   noc
627.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
628.                     qui ivregress 2sls price (mpg = gear_ratio _gear_ratio) weight            `avars' `w' `if2', `vce' `small'   noc
629.                     mata: check_gregress_consistency(`tol', 2, 1::GtoolsIV.kx, GtoolsIV)
630.                 qui givregress price (mpg _mpg = gear_ratio displacement) weight                      `w' , `by' `gvce' `absorb' noc
631.                     qui ivregress 2sls price (mpg _mpg = gear_ratio displacement) weight      `avars' `w' `if1', `vce' `small'   noc
632.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
633.                     qui ivregress 2sls price (mpg _mpg = gear_ratio displacement) weight      `avars' `w' `if2', `vce' `small'   noc
634.                     mata: check_gregress_consistency(`tol', 2, 1::GtoolsIV.kx, GtoolsIV)
635.                 qui givregress price (mpg = gear_ratio) weight _weight                                `w' , `by' `gvce' `absorb' noc
636.                     qui ivregress 2sls price (mpg = gear_ratio) weight _weight                `avars' `w' `if1', `vce' `small'   noc
637.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
638.                     qui ivregress 2sls price (mpg = gear_ratio) weight _weight                `avars' `w' `if2', `vce' `small'   noc
639.                     mata: check_gregress_consistency(`tol', 2, 1::GtoolsIV.kx, GtoolsIV)
640.                 qui givregress price (_price = gear_ratio) weight                                     `w' , `by' `gvce' `absorb' noc
641.                 qui givregress price (mpg = gear_ratio  _price) weight                                `w' , `by' `gvce' `absorb' noc
642.                     qui ivregress 2sls price (mpg = gear_ratio _price) weight                 `avars' `w' `if1', `vce' `small'   noc
643.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
644.                     qui ivregress 2sls price (mpg = gear_ratio _price) weight                 `avars' `w' `if2', `vce' `small'   noc
645.                     mata: check_gregress_consistency(`tol', 2, 1::GtoolsIV.kx, GtoolsIV)
646.                 qui givregress price (mpg = gear_ratio) _price weight                                 `w' , `by' `gvce' `absorb' noc
647.                 qui givregress price (mpg = _mpg) weight                                              `w' , `by' `gvce' `absorb' noc
648.                     mata assert(all(GtoolsIV.b  :== .))
649.                     mata assert(all(GtoolsIV.se :== .))
650.                 qui givregress price (mpg = gear_ratio _mpg) weight                                   `w' , `by' `gvce' `absorb' noc
651.                     qui ivregress 2sls price (mpg = gear_ratio _mpg) weight                   `avars' `w' `if1', `vce' `small'   noc
652.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
653.                     qui ivregress 2sls price (mpg = gear_ratio _mpg) weight                   `avars' `w' `if2', `vce' `small'   noc
654.                     mata: check_gregress_consistency(`tol', 2, 1::GtoolsIV.kx, GtoolsIV)
655.                 qui givregress price (mpg = gear_ratio) _mpg weight                                   `w' , `by' `gvce' `absorb' noc
656.                     qui ivregress 2sls price (mpg = gear_ratio) _mpg weight                   `avars' `w' `if1', `vce' `small'   noc
657.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
658.                     qui ivregress 2sls price (mpg = gear_ratio) _mpg weight                   `avars' `w' `if2', `vce' `small'   noc
659.                     mata: check_gregress_consistency(`tol', 2, 1::GtoolsIV.kx, GtoolsIV)
660.                 qui givregress price (mpg = gear_ratio) _gear_ratio weight                            `w' , `by' `gvce' `absorb' noc
661.                     mata assert(all(GtoolsIV.b  :== .))
662.                     mata assert(all(GtoolsIV.se :== .))
663.                 qui givregress price (mpg = gear_ratio displacement) _gear_ratio weight                      `w' , `by' `gvce' `absorb' noc
664.                     qui ivregress 2sls price (mpg = gear_ratio displacement) _gear_ratio weight      `avars' `w' `if1', `vce' `small'   noc
665.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
666.                     qui ivregress 2sls price (mpg = gear_ratio displacement) _gear_ratio weight      `avars' `w' `if2', `vce' `small'   noc
667.                     mata: check_gregress_consistency(`tol', 2, 1::GtoolsIV.kx, GtoolsIV)
668.                 qui givregress price (mpg _price = gear_ratio displacement _price2) weight            `w' , `by' `gvce' `absorb' noc
669.                 qui givregress price (mpg _price = gear_ratio displacement) _price2 weight            `w' , `by' `gvce' `absorb' noc
670.                 qui givregress price (mpg = _price gear_ratio displacement) _price2 weight            `w' , `by' `gvce' `absorb' noc
671.                 qui givregress price (mpg _mpg = _mpg2 gear_ratio) _mpg3 weight                       `w' , `by' `gvce' `absorb' noc
672.                     qui ivregress 2sls price (mpg _mpg = _mpg2 gear_ratio) _mpg3 weight       `avars' `w' `if1', `vce' `small'   noc
673.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
674.                     qui ivregress 2sls price (mpg _mpg = _mpg2 gear_ratio) _mpg3 weight       `avars' `w' `if2', `vce' `small'   noc
675.                     mata: check_gregress_consistency(`tol', 2, 1::GtoolsIV.kx, GtoolsIV)
676. disp _skip(8) "check 4"
677.                 }
678. 
.                 qui givregress price (mpg = gear_ratio turn _gear_ratio length) weight                            `w' , `by' `gvce' `absorb'
679.                     qui ivregress 2sls price (mpg = gear_ratio turn _gear_ratio length) weight            `avars' `w' `if1', `vce' `small'
680.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
681.                     qui ivregress 2sls price (mpg = gear_ratio turn _gear_ratio length) weight            `avars' `w' `if2', `vce' `small'
682.                     mata: check_gregress_consistency(`tol', 2, 1::GtoolsIV.kx, GtoolsIV)
683.                 qui givregress price (mpg _mpg = gear_ratio turn length displacement) weight                      `w' , `by' `gvce' `absorb'
684.                     qui ivregress 2sls price (mpg _mpg = gear_ratio turn length displacement) weight      `avars' `w' `if1', `vce' `small'
685.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
686.                     qui ivregress 2sls price (mpg _mpg = gear_ratio turn length displacement) weight      `avars' `w' `if2', `vce' `small'
687.                     mata: check_gregress_consistency(`tol', 2, 1::GtoolsIV.kx, GtoolsIV)
688.                 qui givregress price (mpg = gear_ratio turn length) weight _weight                                `w' , `by' `gvce' `absorb'
689.                     qui ivregress 2sls price (mpg = gear_ratio turn length) weight _weight                `avars' `w' `if1', `vce' `small'
690.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
691.                     qui ivregress 2sls price (mpg = gear_ratio turn length) weight _weight                `avars' `w' `if2', `vce' `small'
692.                     mata: check_gregress_consistency(`tol', 2, 1::GtoolsIV.kx, GtoolsIV)
693.                 qui givregress price (_price = gear_ratio turn length) weight                                     `w' , `by' `gvce' `absorb'
694.                 qui givregress price (mpg = gear_ratio turn length  _price) weight                                `w' , `by' `gvce' `absorb'
695.                     qui ivregress 2sls price (mpg = gear_ratio turn length _price) weight                 `avars' `w' `if1', `vce' `small'
696.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
697.                     qui ivregress 2sls price (mpg = gear_ratio turn length _price) weight                 `avars' `w' `if2', `vce' `small'
698.                     mata: check_gregress_consistency(`tol', 2, 1::GtoolsIV.kx, GtoolsIV)
699.                 qui givregress price (mpg = gear_ratio turn length) _price weight                                 `w' , `by' `gvce' `absorb'
700.                 qui givregress price (mpg = _mpg) weight                                              `w' , `by' `gvce' `absorb'
701.                     mata assert(all(GtoolsIV.b  :== .))
702.                     mata assert(all(GtoolsIV.se :== .))
703.                 qui givregress price (mpg = gear_ratio turn length _mpg) weight                                   `w' , `by' `gvce' `absorb'
704.                     qui ivregress 2sls price (mpg = gear_ratio turn length _mpg) weight                   `avars' `w' `if1', `vce' `small'
705.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
706.                     qui ivregress 2sls price (mpg = gear_ratio turn length _mpg) weight                   `avars' `w' `if2', `vce' `small'
707.                     mata: check_gregress_consistency(`tol', 2, 1::GtoolsIV.kx, GtoolsIV)
708.                 qui givregress price (mpg = gear_ratio turn length) _mpg weight                                   `w' , `by' `gvce' `absorb'
709.                     qui ivregress 2sls price (mpg = gear_ratio turn length) _mpg weight                   `avars' `w' `if1', `vce' `small'
710.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
711.                     qui ivregress 2sls price (mpg = gear_ratio turn length) _mpg weight                   `avars' `w' `if2', `vce' `small'
712.                     mata: check_gregress_consistency(`tol', 2, 1::GtoolsIV.kx, GtoolsIV)
713.                 qui givregress price (mpg = gear_ratio turn) _turn _gear_ratio weight                             `w' , `by' `gvce' `absorb'
714.                     mata assert(all(GtoolsIV.b  :== .))
715.                     mata assert(all(GtoolsIV.se :== .))
716.                 qui givregress price (mpg = gear_ratio turn length displacement) _gear_ratio weight                      `w' , `by' `gvce' `absorb'
717.                     qui ivregress 2sls price (mpg = gear_ratio turn length displacement) _gear_ratio weight      `avars' `w' `if1', `vce' `small'
718.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
719.                     qui ivregress 2sls price (mpg = gear_ratio turn length displacement) _gear_ratio weight      `avars' `w' `if2', `vce' `small'
720.                     mata: check_gregress_consistency(`tol', 2, 1::GtoolsIV.kx, GtoolsIV)
721.                 qui givregress price (mpg _price = gear_ratio turn length displacement _price2) weight            `w' , `by' `gvce' `absorb'
722.                 qui givregress price (mpg _price = gear_ratio turn length displacement) _price2 weight            `w' , `by' `gvce' `absorb'
723.                 qui givregress price (mpg = _price gear_ratio turn length displacement) _price2 weight            `w' , `by' `gvce' `absorb'
724.                 qui givregress price (mpg _mpg = _mpg2 gear_ratio turn length) _mpg3 weight                       `w' , `by' `gvce' `absorb'
725.                     qui ivregress 2sls price (mpg _mpg = _mpg2 gear_ratio turn length) _mpg3 weight       `avars' `w' `if1', `vce' `small'
726.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
727.                     qui ivregress 2sls price (mpg _mpg = _mpg2 gear_ratio turn length) _mpg3 weight       `avars' `w' `if2', `vce' `small'
728.                     mata: check_gregress_consistency(`tol', 2, 1::GtoolsIV.kx, GtoolsIV)
729. disp _skip(8) "check 5"
730. 
.                 qui givregress price (mpg length = gear_ratio _gear_ratio turn) weight                            `w' , `by' `gvce' `absorb'
731.                     qui ivregress 2sls price (mpg length = gear_ratio _gear_ratio turn) weight            `avars' `w' `if1', `vce' `small'
732.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
733.                     qui ivregress 2sls price (mpg length = gear_ratio _gear_ratio turn) weight            `avars' `w' `if2', `vce' `small'
734.                     mata: check_gregress_consistency(`tol', 2, 1::GtoolsIV.kx, GtoolsIV)
735.                 qui givregress price (mpg length _mpg = gear_ratio displacement turn) weight                      `w' , `by' `gvce' `absorb'
736.                     qui ivregress 2sls price (mpg length _mpg = gear_ratio displacement turn) weight      `avars' `w' `if1', `vce' `small'
737.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
738.                     qui ivregress 2sls price (mpg length _mpg = gear_ratio displacement turn) weight      `avars' `w' `if2', `vce' `small'
739.                     mata: check_gregress_consistency(`tol', 2, 1::GtoolsIV.kx, GtoolsIV)
740.                 qui givregress price (mpg length = gear_ratio turn) weight _weight                                `w' , `by' `gvce' `absorb'
741.                     qui ivregress 2sls price (mpg length = gear_ratio turn) weight _weight                `avars' `w' `if1', `vce' `small'
742.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
743.                     qui ivregress 2sls price (mpg length = gear_ratio turn) weight _weight                `avars' `w' `if2', `vce' `small'
744.                     mata: check_gregress_consistency(`tol', 2, 1::GtoolsIV.kx, GtoolsIV)
745.                 qui givregress price (_price = gear_ratio turn) weight                                     `w' , `by' `gvce' `absorb'
746.                 qui givregress price (mpg length = gear_ratio  _price turn) weight                                `w' , `by' `gvce' `absorb'
747.                     qui ivregress 2sls price (mpg length = gear_ratio _price turn) weight                 `avars' `w' `if1', `vce' `small'
748.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
749.                     qui ivregress 2sls price (mpg length = gear_ratio _price turn) weight                 `avars' `w' `if2', `vce' `small'
750.                     mata: check_gregress_consistency(`tol', 2, 1::GtoolsIV.kx, GtoolsIV)
751.                 qui givregress price (mpg length = gear_ratio turn) _price weight                                 `w' , `by' `gvce' `absorb'
752.                 qui givregress price (mpg _turn = _mpg turn) weight                                              `w' , `by' `gvce' `absorb'
753.                     mata assert(all(GtoolsIV.b  :== .))
754.                     mata assert(all(GtoolsIV.se :== .))
755.                 qui givregress price (mpg length = gear_ratio _mpg turn) weight                                   `w' , `by' `gvce' `absorb'
756.                     qui ivregress 2sls price (mpg length = gear_ratio _mpg turn) weight                   `avars' `w' `if1', `vce' `small'
757.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
758.                     qui ivregress 2sls price (mpg length = gear_ratio _mpg turn) weight                   `avars' `w' `if2', `vce' `small'
759.                     mata: check_gregress_consistency(`tol', 2, 1::GtoolsIV.kx, GtoolsIV)
760.                 qui givregress price (mpg length = gear_ratio turn) _mpg weight                                   `w' , `by' `gvce' `absorb'
761.                     qui ivregress 2sls price (mpg length = gear_ratio turn) _mpg weight                   `avars' `w' `if1', `vce' `small'
762.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
763.                     qui ivregress 2sls price (mpg length = gear_ratio turn) _mpg weight                   `avars' `w' `if2', `vce' `small'
764.                     mata: check_gregress_consistency(`tol', 2, 1::GtoolsIV.kx, GtoolsIV)
765.                 qui givregress price (mpg length = gear_ratio turn) _gear_ratio weight                            `w' , `by' `gvce' `absorb'
766.                     mata assert(all(GtoolsIV.b  :== .))
767.                     mata assert(all(GtoolsIV.se :== .))
768.                 qui givregress price (mpg length = gear_ratio displacement turn) _gear_ratio weight                      `w' , `by' `gvce' `absorb'
769.                     qui ivregress 2sls price (mpg length = gear_ratio displacement turn) _gear_ratio weight      `avars' `w' `if1', `vce' `small'
770.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
771.                     qui ivregress 2sls price (mpg length = gear_ratio displacement turn) _gear_ratio weight      `avars' `w' `if2', `vce' `small'
772.                     mata: check_gregress_consistency(`tol', 2, 1::GtoolsIV.kx, GtoolsIV)
773.                 qui givregress price (mpg length _price = gear_ratio displacement _price2 turn) weight            `w' , `by' `gvce' `absorb'
774.                 qui givregress price (mpg length _price = gear_ratio displacement turn) _price2 weight            `w' , `by' `gvce' `absorb'
775.                 qui givregress price (mpg length = _price gear_ratio displacement turn) _price2 weight            `w' , `by' `gvce' `absorb'
776.                 qui givregress price (mpg length _mpg = _mpg2 gear_ratio turn) _mpg3 weight                       `w' , `by' `gvce' `absorb'
777.                     qui ivregress 2sls price (mpg length _mpg = _mpg2 gear_ratio turn) _mpg3 weight       `avars' `w' `if1', `vce' `small'
778.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
779.                     qui ivregress 2sls price (mpg length _mpg = _mpg2 gear_ratio turn) _mpg3 weight       `avars' `w' `if2', `vce' `small'
780.                     mata: check_gregress_consistency(`tol', 2, 1::GtoolsIV.kx, GtoolsIV)
781. disp _skip(8) "check 7"
782. 
.                 qui givregress price (mpg length = gear_ratio _gear_ratio turn) _displacement weight                            `w' , `by' `gvce' `absorb'
783.                     qui ivregress 2sls price (mpg length = gear_ratio _gear_ratio turn) _displacement weight            `avars' `w' `if1', `vce' `small'
784.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
785.                     qui ivregress 2sls price (mpg length = gear_ratio _gear_ratio turn) _displacement weight            `avars' `w' `if2', `vce' `small'
786.                     mata: check_gregress_consistency(`tol', 2, 1::GtoolsIV.kx, GtoolsIV)
787.                 qui givregress price (mpg length _mpg = gear_ratio displacement turn) _displacement weight                      `w' , `by' `gvce' `absorb'
788.                     qui ivregress 2sls price (mpg length _mpg = gear_ratio displacement turn) _displacement weight      `avars' `w' `if1', `vce' `small'
789.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
790.                     qui ivregress 2sls price (mpg length _mpg = gear_ratio displacement turn) _displacement weight      `avars' `w' `if2', `vce' `small'
791.                     mata: check_gregress_consistency(`tol', 2, 1::GtoolsIV.kx, GtoolsIV)
792.                 qui givregress price (mpg length = gear_ratio turn) _displacement weight _weight                                `w' , `by' `gvce' `absorb'
793.                     qui ivregress 2sls price (mpg length = gear_ratio turn) _displacement weight _weight                `avars' `w' `if1', `vce' `small'
794.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
795.                     qui ivregress 2sls price (mpg length = gear_ratio turn) _displacement weight _weight                `avars' `w' `if2', `vce' `small'
796.                     mata: check_gregress_consistency(`tol', 2, 1::GtoolsIV.kx, GtoolsIV)
797.                 qui givregress price (_price = gear_ratio turn) weight                                     `w' , `by' `gvce' `absorb'
798.                 qui givregress price (mpg length = gear_ratio  _price turn) _displacement weight                                `w' , `by' `gvce' `absorb'
799.                     qui ivregress 2sls price (mpg length = gear_ratio _price turn) _displacement weight                 `avars' `w' `if1', `vce' `small'
800.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
801.                     qui ivregress 2sls price (mpg length = gear_ratio _price turn) _displacement weight                 `avars' `w' `if2', `vce' `small'
802.                     mata: check_gregress_consistency(`tol', 2, 1::GtoolsIV.kx, GtoolsIV)
803.                 qui givregress price (mpg length = gear_ratio turn) _displacement _price weight                                 `w' , `by' `gvce' `absorb'
804.                 qui givregress price (mpg _turn = _mpg turn) _displacement weight                                              `w' , `by' `gvce' `absorb'
805.                     mata assert(all(GtoolsIV.b  :== .))
806.                     mata assert(all(GtoolsIV.se :== .))
807.                 qui givregress price (mpg length = gear_ratio _mpg turn) _displacement weight                                   `w' , `by' `gvce' `absorb'
808.                     qui ivregress 2sls price (mpg length = gear_ratio _mpg turn) _displacement weight                   `avars' `w' `if1', `vce' `small'
809.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
810.                     qui ivregress 2sls price (mpg length = gear_ratio _mpg turn) _displacement weight                   `avars' `w' `if2', `vce' `small'
811.                     mata: check_gregress_consistency(`tol', 2, 1::GtoolsIV.kx, GtoolsIV)
812.                 qui givregress price (mpg length = gear_ratio turn) _displacement _mpg weight                                   `w' , `by' `gvce' `absorb'
813.                     qui ivregress 2sls price (mpg length = gear_ratio turn) _displacement _mpg weight                   `avars' `w' `if1', `vce' `small'
814.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
815.                     qui ivregress 2sls price (mpg length = gear_ratio turn) _displacement _mpg weight                   `avars' `w' `if2', `vce' `small'
816.                     mata: check_gregress_consistency(`tol', 2, 1::GtoolsIV.kx, GtoolsIV)
817.                 qui givregress price (mpg length = gear_ratio turn) _displacement _gear_ratio weight                            `w' , `by' `gvce' `absorb'
818.                     mata assert(all(GtoolsIV.b  :== .))
819.                     mata assert(all(GtoolsIV.se :== .))
820.                 qui givregress price (mpg length = gear_ratio turn displacement trunk) _displacement _gear_ratio weight                      `w' , `by' `gvce' `absorb'
821.                     qui ivregress 2sls price (mpg length = gear_ratio turn displacement trunk) _displacement _gear_ratio weight      `avars' `w' `if1', `vce' `small'
822.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
823.                     qui ivregress 2sls price (mpg length = gear_ratio turn displacement trunk) _displacement _gear_ratio weight      `avars' `w' `if2', `vce' `small'
824.                     mata: check_gregress_consistency(`tol', 2, 1::GtoolsIV.kx, GtoolsIV)
825.                 qui givregress price (mpg length _price = gear_ratio displacement _price2 turn) _displacement weight            `w' , `by' `gvce' `absorb'
826.                 qui givregress price (mpg length _price = gear_ratio displacement turn) _displacement _price2 weight            `w' , `by' `gvce' `absorb'
827.                 qui givregress price (mpg length = _price gear_ratio displacement turn) _displacement _price2 weight            `w' , `by' `gvce' `absorb'
828.                 qui givregress price (mpg length _mpg = _mpg2 gear_ratio turn) _mpg3 weight                       `w' , `by' `gvce' `absorb'
829.                     qui ivregress 2sls price (mpg length _mpg = _mpg2 gear_ratio turn) _mpg3 weight       `avars' `w' `if1', `vce' `small'
830.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
831.                     qui ivregress 2sls price (mpg length _mpg = _mpg2 gear_ratio turn) _mpg3 weight       `avars' `w' `if2', `vce' `small'
832.                     mata: check_gregress_consistency(`tol', 2, 1::GtoolsIV.kx, GtoolsIV)
833. disp _skip(8) "check 8"
834. 
.                 if ( inlist(`"`av'"', "v2", "v3") ) {
835.                 qui givregress price (mpg length = gear_ratio _gear_ratio turn) _displacement `dvars' weight                        `w' , `by' `gvce' `absorb'
836.                     qui ivregress 2sls price (mpg length = gear_ratio _gear_ratio turn) _displacement `dvars' weight        `avars' `w' `if1', `vce' `small'
837.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV, 4::`=3 + `:list sizeof dvars'')
838.                     qui ivregress 2sls price (mpg length = gear_ratio _gear_ratio turn) _displacement `dvars' weight        `avars' `w' `if2', `vce' `small'
839.                     mata: check_gregress_consistency(`tol', 2, 1::GtoolsIV.kx, GtoolsIV, 4::`=3 + `:list sizeof dvars'')
840.                 qui givregress price (mpg length _mpg = gear_ratio displacement turn) _displacement `dvars' weight                  `w' , `by' `gvce' `absorb'
841.                     qui ivregress 2sls price (mpg length _mpg = gear_ratio displacement turn) _displacement `dvars' weight  `avars' `w' `if1', `vce' `small'
842.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV, 5::`=4 + `:list sizeof dvars'')
843.                     qui ivregress 2sls price (mpg length _mpg = gear_ratio displacement turn) _displacement `dvars' weight  `avars' `w' `if2', `vce' `small'
844.                     mata: check_gregress_consistency(`tol', 2, 1::GtoolsIV.kx, GtoolsIV, 5::`=4 + `:list sizeof dvars'')
845.                 qui givregress price (mpg length = gear_ratio turn) _displacement `dvars' weight _weight                            `w' , `by' `gvce' `absorb'
846.                     qui ivregress 2sls price (mpg length = gear_ratio turn) _displacement `dvars' weight _weight            `avars' `w' `if1', `vce' `small'
847.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV, 4::`=3 + `:list sizeof dvars'')
848.                     qui ivregress 2sls price (mpg length = gear_ratio turn) _displacement `dvars' weight _weight            `avars' `w' `if2', `vce' `small'
849.                     mata: check_gregress_consistency(`tol', 2, 1::GtoolsIV.kx, GtoolsIV, 4::`=3 + `:list sizeof dvars'')
850.                 qui givregress price (_price = gear_ratio turn) weight                                                          `w' , `by' `gvce' `absorb'
851.                 qui givregress price (mpg length = gear_ratio  _price turn) _displacement `dvars' weight                            `w' , `by' `gvce' `absorb'
852.                     qui ivregress 2sls price (mpg length = gear_ratio _price turn) _displacement `dvars' weight             `avars' `w' `if1', `vce' `small'
853.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV, 4::`=3 + `:list sizeof dvars'')
854.                     qui ivregress 2sls price (mpg length = gear_ratio _price turn) _displacement `dvars' weight             `avars' `w' `if2', `vce' `small'
855.                     mata: check_gregress_consistency(`tol', 2, 1::GtoolsIV.kx, GtoolsIV, 4::`=3 + `:list sizeof dvars'')
856.                 qui givregress price (mpg length = gear_ratio turn) _displacement _price `dvars' weight                         `w' , `by' `gvce' `absorb'
857.                 qui givregress price (mpg _turn = _mpg turn) _displacement weight                                               `w' , `by' `gvce' `absorb'
858.                     mata assert(all(GtoolsIV.b  :== .))
859.                     mata assert(all(GtoolsIV.se :== .))
860.                 qui givregress price (mpg length = gear_ratio _mpg turn) _displacement `dvars' weight                               `w' , `by' `gvce' `absorb'
861.                     qui ivregress 2sls price (mpg length = gear_ratio _mpg turn) _displacement `dvars' weight               `avars' `w' `if1', `vce' `small'
862.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV, 4::`=3 + `:list sizeof dvars'')
863.                     qui ivregress 2sls price (mpg length = gear_ratio _mpg turn) _displacement `dvars' weight               `avars' `w' `if2', `vce' `small'
864.                     mata: check_gregress_consistency(`tol', 2, 1::GtoolsIV.kx, GtoolsIV, 4::`=3 + `:list sizeof dvars'')
865.                 qui givregress price (mpg length = gear_ratio turn) _displacement _mpg `dvars' weight                               `w' , `by' `gvce' `absorb'
866.                     qui ivregress 2sls price (mpg length = gear_ratio turn) _displacement `dvars' _mpg weight               `avars' `w' `if1', `vce' `small'
867.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV, 4::`=3 + `:list sizeof dvars'')
868.                     qui ivregress 2sls price (mpg length = gear_ratio turn) _displacement `dvars' _mpg weight               `avars' `w' `if2', `vce' `small'
869.                     mata: check_gregress_consistency(`tol', 2, 1::GtoolsIV.kx, GtoolsIV, 4::`=3 + `:list sizeof dvars'')
870.                 qui givregress price (mpg length = gear_ratio turn) _displacement _gear_ratio `dvars' weight                        `w' , `by' `gvce' `absorb'
871.                     mata assert(all(GtoolsIV.b  :== .))
872.                     mata assert(all(GtoolsIV.se :== .))
873.                 qui givregress price (mpg length = gear_ratio turn displacement trunk) _displacement `dvars' _gear_ratio weight                 `w' , `by' `gvce' `absorb'
874.                     qui ivregress 2sls price (mpg length = gear_ratio turn displacement trunk) _displacement `dvars' _gear_ratio weight `avars' `w' `if1', `vce' `small'
875.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV, 4::`=3 + `:list sizeof dvars'')
876.                     qui ivregress 2sls price (mpg length = gear_ratio turn displacement trunk) _displacement `dvars' _gear_ratio weight `avars' `w' `if2', `vce' `small'
877.                     mata: check_gregress_consistency(`tol', 2, 1::GtoolsIV.kx, GtoolsIV, 4::`=3 + `:list sizeof dvars'')
878.                 qui givregress price (mpg length _price = gear_ratio displacement _price2 turn) _displacement `dvars' weight        `w' , `by' `gvce' `absorb'
879.                 qui givregress price (mpg length _price = gear_ratio displacement turn) _displacement `dvars' _price2 weight        `w' , `by' `gvce' `absorb'
880.                 qui givregress price (mpg length = _price gear_ratio displacement turn) _displacement `dvars' _price2 weight        `w' , `by' `gvce' `absorb'
881.                 qui givregress price (mpg length _mpg = _mpg2 gear_ratio turn) _mpg3 `dvars' weight                                 `w' , `by' `gvce' `absorb'
882.                     qui ivregress 2sls price (mpg length _mpg = _mpg2 gear_ratio turn) _mpg3 `dvars' weight                 `avars' `w' `if1', `vce' `small'
883.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV, 5::`=4 + `:list sizeof dvars'')
884.                     qui ivregress 2sls price (mpg length _mpg = _mpg2 gear_ratio turn) _mpg3 `dvars' weight                 `avars' `w' `if2', `vce' `small'
885.                     mata: check_gregress_consistency(`tol', 2, 1::GtoolsIV.kx, GtoolsIV, 5::`=4 + `:list sizeof dvars'')
886. disp _skip(8) "check 10"
887.                 }
888. 
.                 qui givregress price (z1 = gear_ratio _gear_ratio) weight turn      `w' , `gvce' `absorb' `by'
889.                     mata assert(all(GtoolsIV.b  :== .))                             
890.                     mata assert(all(GtoolsIV.se :== .))                             
891.                 qui givregress price (z1 z2 = gear_ratio _gear_ratio) weight turn   `w' , `gvce' `absorb' `by'
892.                     mata assert(all(GtoolsIV.b  :== .))                             
893.                     mata assert(all(GtoolsIV.se :== .))                             
894.                 qui givregress price (mpg = z1 z2) weight turn                      `w' , `gvce' `absorb' `by'
895.                     mata assert(all(GtoolsIV.b  :== .))                             
896.                     mata assert(all(GtoolsIV.se :== .))                             
897.                 qui givregress price (z1 = z2) weight turn                          `w' , `gvce' `absorb' `by'
898.                     mata assert(all(GtoolsIV.b  :== .))                             
899.                     mata assert(all(GtoolsIV.se :== .))                             
900.                 qui givregress price (mpg = gear_ratio) z1 z2                       `w' , `gvce' `absorb' noc `by'
901.                     qui ivregress 2sls price (mpg = gear_ratio) z1 z2 `avars' `if1' `w' , `vce' `small'   noc
902.                     mata: check_gregress_consistency(`tol', 1, 1::GtoolsIV.kx, GtoolsIV)
903.                     qui ivregress 2sls price (mpg = gear_ratio) z1 z2 `avars' `if2' `w' , `vce' `small'   noc
904.                     mata: check_gregress_consistency(`tol', 2, 1::GtoolsIV.kx, GtoolsIV)
905. disp _skip(8) "check 11"
906.             }
907.         }
908.         qui drop if _expand
909.         qui drop _expand
910.     }
911. 
.     * ------------------------------------------------------------------------
.     * ------------------------------------------------------------------------
. 
. disp ""
912. disp "----------------------------"
913. disp "Collinearity Test 3: Poisson"
914. disp "----------------------------"
915. disp ""
916. 
.     local tol 1e-4
917.     webuse ships, clear
918.     * use /tmp/ships, clear
.     qui expand 2
919.     qui gen by = 1.5 - (_n < _N / 2)
920.     qui gen w = _n
921.     qui tab ship, gen(_s)
922.     unab svars: _s*
923.     qui gen z1 = 0
924.     qui gen z2 = 0
925. 
.     foreach v in v1 v2 v5 {
926.         disp "poisson checks `v'"
927.         local w
928.         local r
929. 
.         if ( "`v'" == "v2" ) local w [fw = w]
930.         if ( "`v'" == "v4" ) local w [fw = w]
931. 
.         if ( "`v'" == "v5" ) local w [pw = w]
932.         if ( "`v'" == "v6" ) local w [pw = w]
933. 
.         qui gpoisson accident op_75_79 co_75_79 co_65_69 co_70_74 co_75_79 co_70_74 `w', robust `r'
934.         qui  poisson accident op_75_79 co_75_79 co_65_69 co_70_74 co_75_79 co_70_74 `w', r
935.             mata: check_gregress_consistency(`tol', 1, 1::GtoolsPoisson.kx, GtoolsPoisson)
936. disp _skip(8) "check 1"
937.         qui gpoisson accident op_75_79 co_75_79 co_65_69 co_70_74 co_75_79 co_70_74 `w', cluster(ship) `r'
938.         qui  poisson accident op_75_79 co_75_79 co_65_69 co_70_74 co_75_79 co_70_74 `w', cluster(ship)
939.             mata: check_gregress_consistency(`tol', 1, 1::GtoolsPoisson.kx, GtoolsPoisson)
940. disp _skip(8) "check 2"
941.         qui gpoisson accident op_75_79 co_75_79 co_65_69 co_70_74 co_75_79 co_70_74 `w', by(by) robust `r'
942.         qui  poisson accident op_75_79 co_75_79 co_65_69 co_70_74 co_75_79 co_70_74 `w' if by == 0.5, r
943.             mata: check_gregress_consistency(`tol', 1, 1::GtoolsPoisson.kx, GtoolsPoisson)
944.         qui  poisson accident op_75_79 co_75_79 co_65_69 co_70_74 co_75_79 co_70_74 `w' if by == 1.5, r
945.             mata: check_gregress_consistency(`tol', 2, 1::GtoolsPoisson.kx, GtoolsPoisson)
946. disp _skip(8) "check 3"
947.         qui gpoisson accident op_75_79 co_75_79 co_65_69 co_70_74 co_75_79 co_70_74 `w', by(by) cluster(ship) `r'
948.         qui  poisson accident op_75_79 co_75_79 co_65_69 co_70_74 co_75_79 co_70_74 `w' if by == 0.5, cluster(ship)
949.             mata: check_gregress_consistency(`tol', 1, 1::GtoolsPoisson.kx, GtoolsPoisson)
950.         qui poisson accident op_75_79 co_75_79 co_65_69 co_70_74 co_75_79 co_70_74 `w' if by == 1.5, cluster(ship)
951.             mata: check_gregress_consistency(`tol', 2, 1::GtoolsPoisson.kx, GtoolsPoisson)
952. disp _skip(8) "check 4"
953.         qui gpoisson accident op_75_79 co_75_79 co_65_69 co_70_74 co_75_79 co_70_74 `svars'        `w', absorb(ship) r
954.         qui  poisson accident op_75_79 co_75_79 co_65_69 co_70_74 co_75_79 co_70_74 `svars' i.ship `w', r
955.             mata: check_gregress_consistency(`tol', 1, 1::GtoolsPoisson.kx, GtoolsPoisson, 7::`=6 + `:list sizeof svars'')
956. disp _skip(8) "check 5"
957.         qui gpoisson accident op_75_79 co_75_79 co_65_69 co_70_74 co_75_79 co_70_74 `svars'        `w', absorb(ship) cluster(ship)
958.         qui  poisson accident op_75_79 co_75_79 co_65_69 co_70_74 co_75_79 co_70_74 `svars' i.ship `w', cluster(ship)
959.             mata: check_gregress_consistency(`tol', 1, 1::GtoolsPoisson.kx, GtoolsPoisson, 7::`=6 + `:list sizeof svars'')
960. disp _skip(8) "check 6"
961.         qui gpoisson accident op_75_79 co_75_79 co_65_69 co_70_74 co_75_79 co_70_74 `svars'        `w', by(by) absorb(ship) robust
962.         qui  poisson accident op_75_79 co_75_79 co_65_69 co_70_74 co_75_79 co_70_74 `svars' i.ship `w' if by == 0.5, r
963.             mata: check_gregress_consistency(`tol', 1, 1::GtoolsPoisson.kx, GtoolsPoisson, 7::`=6 + `:list sizeof svars'')
964.         qui  poisson accident op_75_79 co_75_79 co_65_69 co_70_74 co_75_79 co_70_74 `svars' i.ship `w' if by == 1.5, r
965.             mata: check_gregress_consistency(`tol', 2, 1::GtoolsPoisson.kx, GtoolsPoisson, 7::`=6 + `:list sizeof svars'')
966. disp _skip(8) "check 7"
967.         qui gpoisson accident op_75_79 co_75_79 co_65_69 co_70_74 co_75_79 co_70_74 `svars'        `w', by(by) absorb(ship) cluster(ship)
968.         qui  poisson accident op_75_79 co_75_79 co_65_69 co_70_74 co_75_79 co_70_74 `svars' i.ship `w' if by == 0.5, cluster(ship)
969.             mata: check_gregress_consistency(`tol', 1, 1::GtoolsPoisson.kx, GtoolsPoisson, 7::`=6 + `:list sizeof svars'')
970.         qui  poisson accident op_75_79 co_75_79 co_65_69 co_70_74 co_75_79 co_70_74 `svars' i.ship `w' if by == 1.5, cluster(ship)
971.             mata: check_gregress_consistency(`tol', 2, 1::GtoolsPoisson.kx, GtoolsPoisson, 7::`=6 + `:list sizeof svars'')
972. disp _skip(8) "check 8"
973. 
.         qui gpoisson accident z1 z2 `w', robust noc
974.             mata assert(all(GtoolsPoisson.b  :== .))
975.             mata assert(all(GtoolsPoisson.se :== .))
976. disp _skip(8) "check 9"
977.     }
978. end

. 
. cap mata mata drop check_gregress_consistency()

. mata
------------------------------------------------- mata (type end to exit) -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
: void function check_gregress_consistency(
>     real scalar tol,
>     real scalar row,
>     real vector col,
>     class GtoolsRegressOutput scalar res,
>     | real colvector missok)
> {
>     real scalar missokb, missokse
>     real rowvector b, se, tolb, tolse, sameb, samese
> 
>     b  = st_matrix("r(table)")[1, col]
>     se = st_matrix("r(table)")[2, col]
> 
>     if ( args() > 4 ) {
>         missokb  = all(res.b[row, missok]  :== 0)
>         missokse = all(res.se[row, missok] :== .)
> 
>         b[missok]  = res.b[row, missok]
>         se[missok] = res.se[row, missok]
>     }
>     else {
>         missokb  = 1
>         missokse = 1
>     }
> 
>     tolb   = reldif(b,  res.b[row, col])  :< tol
>     tolse  = reldif(se, res.se[row, col]) :< tol
> 
>     sameb  = (b  :== res.b[row, col])
>     samese = (se :== res.se[row, col])
> 
>     assert(all(colmax(tolb  \ sameb))  & missokb)
>     assert(all(colmax(tolse \ samese)) & missokse)
> }

: end
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

. 
. ***********************************************************************
. *                               Testing                               *
. ***********************************************************************
. 
. * capture program drop simpleHDFE
. * program simpleHDFE
. *     syntax varlist, absorb(varlist) [tol(real 1e-8)]
. *     gettoken y x: varlist
. *     tempvar diff
. *
. *     local dmx
. *     foreach xvar of local x {
. *         tempvar `xvar'1
. *         tempvar `xvar'2
. *         local dmx `dmx' ``xvar'1'
. *     }
. *
. *     qui gen double `diff' = 0
. *     foreach xvar of local x {
. *         qui gen double ``xvar'1' = `xvar'
. *         qui gen double ``xvar'2' = `xvar'
. *     }
. *
. *     tempvar `y'1 `y'2
. *     qui gen double ``y'1' = `y'
. *     qui gen double ``y'2' = `y'
. *     local dmy ``y'1'
. *
. *     foreach avar of local absorb {
. *         gstats transform (demean) `dmy' `dmx', by(`avar') replace
. *     }
. *
. *     local supnorm = 1
. *     while ( `supnorm' > `tol' ) {
. *         foreach avar of local absorb {
. *             gstats transform (demean) `dmy' `dmx', by(`avar') replace
. *             qui replace `diff' = abs(``y'2' - ``y'1')
. *             qui replace ``y'2' = ``y'1'
. *             foreach xvar of local x {
. *                 qui replace `diff' = `diff' + abs(``xvar'2' - ``xvar'1')
. *                 qui replace ``xvar'2' = ``xvar'1'
. *             }
. *             sum `diff', meanonly
. *             local supnorm = `r(max)'
. *             if ( `supnorm' < `tol' ) break
. *             disp `supnorm'
. *         }
. *     }
. *
. *     reg `dmy' `dmx', noc
. * end
. 
. * Collinearity test
. * -----------------
. 
. * cap mata mata drop my_lu()
. * cap mata mata drop my_ldu()
. * cap mata mata drop my_qr()
. * cap mata mata drop my_householder()
. * cap mata mata drop my_dot()
. * cap mata mata drop my_norm()
. *
. * mata
. * void function my_ldu (real matrix A, real scalar N, real matrix L, real vector D)
. * {
. *     real scalar i, j, k
. *
. *     L = J(N, N, 0)
. *     for (j = 1; j <= N; j++) {
. *         L[j, j] = 1
. *     }
. *     D = J(N, 1, 0)
. *
. *     for (i = 1; i <= N; i++) {
. *         if ( i > 1 ) {
. *             D[i] = A[i, i] - (L[i, 1::(i - 1)]:^2) * D[1::(i - 1)]
. *         }
. *         else {
. *             D[i] = A[i, i]
. *         }
. *         for (j = i + 1; j <= N; j++) {
. *             if ( i > 1 ) {
. *                 L[j, i] = (A[j, i] - (L[j, 1::(i - 1)] :* L[i, 1::(i - 1)]) * D[1::(i - 1)]) / D[i]
. *             }
. *             else {
. *                 L[j, i] = A[j, i] / D[i]
. *             }
. *         }
. *     }
. * }
. *
. * void function my_lu (real matrix A, real scalar N)
. * {
. *     real scalar i, j, k
. *
. *     for (j = 1; j <= N; j++) {
. *         for (k = 1; k <= j - 1; k++) {
. *             for (i = j; i <= N; i++) {
. *                 A[i, j] = A[i, j] - A[i, k] * A[j, k]
. *             }
. *         }
. *         A[j, j] = sqrt(A[j, j])
. *         for (i = j + 1; i <= N; i++) {
. *             A[i, j] = A[i, j] / A[j, j]
. *         }
. *     }
. *
. *     for (j = 1; j <= N; j++) {
. *         for (i = 1; i < j; i++) {
. *             A[i, j] = 0
. *         }
. *     }
. * }
. *
. * void function my_qr (real matrix A, real scalar N, real matrix Q, real matrix H)
. * {
. *     real scalar i
. *
. *     Q = diag(J(1, N, 1))
. *     for (i = 1; i < N; i++) {
. *         H = diag(J(1, N, 1))
. *         H[i::N, i::N] = my_householder(A[i::N, i], N - i + 1, H[i::N, i::N])
. *         Q = Q * H
. *         A = H * A
. *     }
. * }
. *
. * real matrix function my_householder (real vector a, real scalar N, real matrix H)
. * {
. *     real scalar i, j
. *     real scalar anorm, adot
. *
. *     if ( a[1] < 0 ) {
. *         anorm = -my_norm(a, N)
. *     }
. *     else {
. *         anorm = my_norm(a, N)
. *     }
. *
. *     adot = 1;
. *     for (i = N; i > 1; i--) {
. *         a[i] = a[i] / (a[1] + anorm)
. *         adot = adot + a[i] * a[i];
. *     }
. *
. *     a[1] = 1
. *     adot = 2 / adot
. *     for (i = 1; i <= N; i++) {
. *         H[i, i] = 1 - adot * a[i] * a[i]
. *         for (j = i + 1; j <= N; j++) {
. *             H[i, j] = -adot * a[i] * a[j]
. *         }
. *     }
. *
. *     for (i = 1; i <= N; i++) {
. *         for (j = 1; j < i; j++) {
. *             H[i, j] = H[j, i]
. *         }
. *     }
. *
. *     return(H)
. * }
. *
. * real scalar function my_dot (real vector a, real scalar N)
. * {
. *     real scalar i
. *     real scalar dot
. *     dot = 0
. *     for (i = 1; i <= N; i++) {
. *         dot = dot + a[i] * a[i]
. *     }
. *     return (dot)
. * }
. *
. * real scalar function my_norm (real vector a, real scalar N)
. * {
. *     return (sqrt(my_dot(a, N)))
. * }
. * end
. 
. * IV via mata
. * -----------
. 
. * mata: w  = st_data(., "w")
. * mata: y  = st_data(., "price")
. * mata: X  = st_data(., "mpg")
. * mata: E  = st_data(., "weight turn ones")
. * mata: Z  = st_data(., "gear_ratio")
. * mata: ZZ = (E, Z)' * diag(w) * (E, Z)
. * mata: Zi = invsym(ZZ)
. * mata: PZ = (E, Z)' * diag(w) * X
. * mata: BZ = Zi * PZ
. * mata: PX = (E, Z) * BZ, E
. * mata: XX = PX' * diag(w) * PX
. * mata: Xi = invsym(XX)
. * mata: Xy = PX' * diag(w) * y
. * mata: b  = Xi * Xy
. * mata: e  = y :- (X, E) * b
. * mata: DD = PX' * diag(w :* e:^2) * PX
. * mata: V  = Xi * DD * Xi
. * mata: ZZ
. * mata: PZ
. * mata: BZ
. * mata: XX
. * mata: Xy
. * mata: b
. * mata: V
. 
. capture program drop checks_gstats

. program checks_gstats
  1.     checks_gstats_winsor
  2.     checks_gstats_summarize
  3.     checks_gstats_transform
  4.     checks_gstats_transform nogreedy
  5. end

. 
. capture program drop compare_gstats

. program compare_gstats
  1.     compare_gstats_winsor
  2.     compare_gstats_winsor, cuts(5 95)
  3.     compare_gstats_winsor, cuts(30 70)
  4. 
.     compare_gstats_transform
  5.     compare_gstats_transform, weights
  6.     compare_gstats_transform, nogreedy
  7.     compare_gstats_transform, nogreedy weights
  8. end

. 
. ***********************************************************************
. *                          Compare summarize                          *
. ***********************************************************************
. 
. capture program drop checks_gstats_summarize

. program checks_gstats_summarize
  1.     clear
  2.     set obs 10
  3.     gen x = string(_n) + "some"
  4.     gen y = mod(_n, 3)
  5.     gen w = string(mod(_n, 4)) + "Other That is Long"
  6.     gen v = -mod(_n, 7)
  7.     gen z = runiform()
  8.     gen z2 = rnormal()
  9.     if ( `c(stata_version)' >= 14.1 ) {
 10.     gen strL L = "This one is strL and what will hapennnnn!!!???" + string(mod(_n, 4))
 11.     }
 12.     else {
 13.     gen L = "This one is strL and what will hapennnnn!!!???" + string(mod(_n, 4))
 14.     }
 15.     gen a = "hey"
 16.     replace a = "" in 3 / 6
 17.     replace a = " " in 7 / 10
 18. 
.     gstats tab z
 19.     gstats tab z y
 20.     gstats tab z,   matasave
 21.     mata: GstatsOutput.desc()
 22.     gstats tab z y, matasave
 23.     mata: GstatsOutput.desc()
 24.     gstats tab z y, matasave by(x)
 25.     mata: GstatsOutput.desc()
 26.     mata: GstatsOutput.help()
 27. 
.     gstats tab z, by(y x) s(mean sd min max) matasave pretty
 28.     mata GstatsOutput.printOutput()
 29.     mata GstatsOutput.getf(1, 2, GstatsOutput.maxl)
 30.     mata GstatsOutput.getnum(1, 1)
 31.     mata GstatsOutput.getchar(1, 2)
 32.     cap noi mata assert(.  == GstatsOutput.getnum(1, 2))
 33.     cap noi mata assert("" == GstatsOutput.getchar(1, 1))
 34.     mata GstatsOutput.getOutputRow(1)
 35.     mata GstatsOutput.getOutputRow(5)
 36.     cap mata GstatsOutput.getOutputRow(999)
 37.     assert _rc == 3301
 38.     mata GstatsOutput.getOutputCol(1)
 39.     mata GstatsOutput.getOutputCol(4)
 40.     cap mata GstatsOutput.getOutputCol(999)
 41.     assert _rc == 3301
 42.     mata GstatsOutput.getOutputVar("z")
 43.     cap noi mata assert(J(1, 0, .) == GstatsOutput.getOutputVar("x"))
 44.     mata GstatsOutput.getOutputGroup(1)
 45.     mata GstatsOutput.getOutputGroup(5)
 46.     cap mata GstatsOutput.getOutputGroup(999)
 47.     assert _rc == 3301
 48. 
.     gstats tab z* , by(a x)       s(mean sd min max) pretty
 49.     gstats tab z  , by(w y v x L) s(mean sd min max) col(var)
 50.     gstats tab z  , by(L)         s(mean sd min max) col(var)
 51.     gstats tab z  , by(L x)       s(mean sd min max) col(var)
 52. 
. 
.     gstats tab z  , by(x)         s(mean sd min max) matasave pretty
 53.     gstats tab z  , by(a x)       s(mean sd min max) matasave pretty
 54.     gstats tab z  , by(y)         s(mean sd min max) matasave
 55.     gstats tab z  , by(x y)       s(mean sd min max) matasave
 56.     gstats tab z  , by(x v y w)   s(mean sd min max) matasave
 57.     gstats tab z  , by(w y v x)   s(mean sd min max) matasave pretty
 58.     gstats tab z  , by(w y v x L) s(mean sd min max) matasave pretty labelw(100)
 59. 
.     qui _checks_gstats_summarize
 60.     qui _checks_gstats_summarize, pool
 61.     qui _checks_gstats_summarize [fw = mpg]
 62.     qui _checks_gstats_summarize [aw = gear_ratio]
 63.     qui _checks_gstats_summarize [pw = gear_ratio / 4]
 64.     qui _checks_gstats_summarize if foreign
 65.     qui _checks_gstats_summarize if foreign, pool
 66.     qui _checks_gstats_summarize if foreign [fw = mpg]
 67.     qui _checks_gstats_summarize if foreign [aw = gear_ratio]
 68.     qui _checks_gstats_summarize if foreign [pw = gear_ratio / 4]
 69.     qui _checks_gstats_summarize in 23
 70.     qui _checks_gstats_summarize in 1 / 2
 71.     qui _checks_gstats_summarize in 23, pool
 72.     qui _checks_gstats_summarize in 1 / 2, pool
 73.     qui _checks_gstats_summarize in 1 / 2 [fw = mpg]
 74.     qui _checks_gstats_summarize in 1 / 2 [aw = gear_ratio]
 75.     qui _checks_gstats_summarize in 1 / 2 [pw = gear_ratio / 4]
 76. end

. 
. capture program drop _checks_gstats_summarize

. program _checks_gstats_summarize
  1.     if ( strpos(`"`0'"', ",") == 0 ) {
  2.         local 0 `0',
  3.     }
  4.     sysuse auto, clear
  5.     gstats sum price       `0'
  6.     gstats sum price       `0' f
  7.     gstats sum price       `0' nod
  8.     gstats sum price       `0' nod f
  9.     gstats sum price       `0' meanonly
 10.     gstats sum price mpg   `0'
 11.     gstats sum *           `0'
 12.     gstats sum price price `0'
 13.     gstats sum price mpg * `0' nod
 14.     gstats sum price mpg * `0' nod f
 15. 
.     gstats sum price       , tab
 16.     gstats sum price       , tab f
 17.     gstats sum price       , tab nod
 18.     gstats sum price       , tab nod f
 19.     gstats sum price       , tab meanonly
 20.     gstats sum price mpg   , tab
 21.     gstats sum *           , tab
 22.     gstats sum price price , tab
 23.     gstats sum price mpg * , tab nod
 24.     gstats sum price mpg * , tab nod f
 25. 
.     cap noi gstats tab price       , statistics(n) stats(n)
 26.     assert _rc == 198
 27.     cap noi gstats tab price       , nod
 28.     assert _rc == 198
 29.     cap noi gstats tab *
 30.     assert _rc == 7
 31.     cap noi gstats tab price       , meanonly
 32.     assert _rc == 198
 33. 
.     gstats tab price       ,
 34.     gstats tab price       , s(mean sd min max)
 35.     gstats tab price       , statistics(count n nmissing percent nunique)
 36.     gstats tab price       , stats(rawsum nansum rawnansum median p32.4 p50 p99)
 37.     gstats tab price       , stat(iqr q median sd variance cv geomean)
 38.     gstats tab price       ,
 39.     gstats tab price       , stat(min max range select2 select10 select-4 select-9)
 40.     cap gstats tab price   , stat(select0)
 41.     assert _rc == 110
 42.     cap gstats tab price   , stat(select-0)
 43.     assert _rc == 110
 44.     gstats tab price       , stat(first last firstnm lastnm semean sebinomial sepoisson)
 45.     gstats tab price mpg   , stat(skewness kurtosis)
 46.     gstats tab price price , stat()
 47. 
.     gstats sum price `0' tab
 48.     gstats sum price `0' tab pretty
 49.     gstats sum price `0' tab nod
 50.     gstats sum price `0' tab meanonly
 51.     gstats sum price `0' by(foreign) tab
 52.     gstats sum price `0' by(foreign) tab pretty
 53.     gstats sum price `0' by(foreign) tab nod
 54.     gstats sum price `0' by(foreign) tab meanonly pretty
 55.     gstats sum price `0' by(rep78)   tab
 56.     gstats sum price `0' by(rep78)   tab nod
 57.     gstats sum price `0' by(rep78)   tab meanonly
 58. 
.     gstats sum price `0' col(stat) tab
 59.     gstats sum price `0' col(var)  tab nod
 60.     gstats sum price `0' col(var)  tab meanonly
 61.     gstats sum price `0' by(foreign)  col(stat) tab
 62.     gstats sum price `0' by(foreign)  col(var)  tab nod
 63.     gstats sum price `0' by(foreign)  col(var)  tab meanonly
 64.     gstats sum price `0' by(rep78)    col(stat) tab
 65.     gstats sum price `0' by(rep78)    col(var)  tab nod
 66.     gstats sum price `0' by(rep78)    col(var)  tab meanonly
 67. 
.     gstats tab price         `0' col(var) s(mean sd min max)
 68.     gstats tabstat price     `0' col(var) s(mean sd min max) by(foreign)
 69.     gstats tabstat price mpg `0' col(var) s(mean sd min max) by(foreign)
 70.     gstats tabstat price     `0' col(var) s(mean sd min max) by(rep78)
 71.     gstats tabstat price mpg `0' col(var) s(mean sd min max) by(rep78)
 72.     gstats tabstat price mpg `0' col(var) s(mean sd min max) by(rep78)
 73. 
.     gstats tab price         `0' s(mean sd min max)
 74.     gstats tabstat price     `0' s(mean sd min max) by(foreign)
 75.     gstats tabstat price mpg `0' s(mean sd min max) by(foreign)
 76.     gstats tabstat price     `0' s(mean sd min max) by(rep78)
 77.     gstats tabstat price mpg `0' s(mean sd min max) by(rep78)
 78.     gstats tabstat price mpg `0' s(mean sd min max) by(rep78)
 79. 
.     gstats tab price         `0'
 80.     gstats tab price         `0' pretty
 81.     gstats tabstat price     `0' by(foreign)
 82.     gstats tabstat price mpg `0' by(foreign)
 83.     gstats tabstat price     `0' by(rep78)
 84.     gstats tabstat price mpg `0' by(rep78)
 85.     gstats tabstat price mpg `0' by(rep78)
 86. 
.     gstats tab price         `0' col(var)
 87.     gstats tabstat price     `0' col(var) by(foreign)
 88.     gstats tabstat price mpg `0' col(var) by(foreign)
 89.     gstats tabstat price     `0' col(var) by(rep78)
 90.     gstats tabstat price mpg `0' col(var) by(rep78)
 91.     gstats tabstat price mpg `0' col(var) by(rep78)
 92. end

. 
. ***********************************************************************
. *                           Compare winsor                            *
. ***********************************************************************
. 
. capture program drop checks_gstats_winsor

. program checks_gstats_winsor
  1.     * TODO: Pending
.     sysuse auto, clear
  2. 
.     cap noi gstats winsor price, by(foreign) cuts(10)
  3.     cap noi gstats winsor price, by(foreign) cuts(90)
  4.     cap noi gstats winsor price, by(foreign) cuts(. 90)
  5.     cap noi gstats winsor price, by(foreign) cuts(10 .)
  6.     cap noi gstats winsor price, by(foreign) cuts(-1 10)
  7.     cap noi gstats winsor price, by(foreign) cuts(10 101)
  8.     preserve
  9.         cap noi gstats winsor price, by(foreign) cuts(0 10) gen(x)
 10.         cap noi gstats winsor price, by(foreign) cuts(10 100) gen(y)
 11.         cap noi gstats winsor price, by(foreign) cuts(100 100) gen(zz)
 12.         cap noi gstats winsor price, by(foreign) cuts(0 0) gen(yy)
 13.     restore
 14.     gstats winsor price, by(foreign)
 15.     winsor2 price, by(foreign) replace
 16. 
.     winsor2 price mpg, by(foreign) cuts(10 90) s(_w2)
 17.     gstats winsor price mpg, by(foreign) cuts(10 90) s(_w2) replace
 18.     desc
 19. 
.     * gtools, upgrade branch(develop)
.     clear
 20.     set obs 500000
 21.     gen long id = int((_n-1) / 1000)
 22.     gunique id
 23.     gen double x = runiform()
 24.     gen double y = runiform()
 25.     set rmsg on
 26.     winsor2 x y, by(id) s(_w1)
 27.     gstats winsor x y, by(id) s(_w2)
 28.     gegen x_g3 = winsor(x), by(id)
 29.     gegen y_g3 = winsor(y), by(id)
 30. 
.     desc
 31.     assert abs(x_w1 - x_w2) < 1e-6
 32.     assert abs(y_w1 - y_w2) < 1e-6
 33.     assert abs(x_g3 - x_w2) < 1e-6
 34.     assert abs(y_g3 - y_w2) < 1e-6
 35. 
.     replace y = . if mod(_n, 123) == 0
 36.     replace x = . if mod(_n, 321) == 0
 37. 
.     gstats winsor x [w=y], by(id) s(_w3)
 38.     gstats winsor x [w=y], by(id) s(_w5) trim
 39. 
.     gegen x_g4 = winsor(x) [w=y], by(id)
 40.     gegen x_g5 = winsor(x) [w=y], by(id) trim
 41. 
.     gegen p1  = pctile(x) [aw = y], by(id) p(1)
 42.     gegen p99 = pctile(x) [aw = y], by(id) p(99)
 43. 
.     gen x_w4 = cond(x < p1, p1, cond(x > p99, p99, x))
 44. 
.     assert (abs(x_w3 - x_w4) < 1e-6 | mi(x_w3 - x_w4))
 45.     assert (abs(x_g4 - x_w3) < 1e-6 | mi(x_g4 - x_w3))
 46.     assert (abs(x_g5 - x_w5) < 1e-6 | mi(x_g5 - x_w5))
 47. end

. 
. capture program drop compare_gstats_winsor

. program compare_gstats_winsor
  1.     syntax, [*]
  2. 
.     qui `noisily' gen_data, n(500)
  3.     qui expand 100
  4.     qui `noisily' random_draws, random(2) double
  5.     gen long   ix  = _n
  6.     gen double ru  = runiform() * 500
  7.     qui replace ix = . if mod(_n, 500) == 0
  8.     qui replace ru = . if mod(_n, 500) == 0
  9.     qui sort random1
 10. 
.     local N = trim("`: di %15.0gc _N'")
 11.     di _n(1) "{hline 80}" _n(1) "compare_gstats_winsor, N = `N', `options'" _n(1) "{hline 80}" _n(1)
 12. 
.     compare_inner_gstats_winsor, `options'
 13.     disp
 14. 
.     compare_inner_gstats_winsor in 1 / 5, `options'
 15.     disp
 16. 
.     local in1 = ceil((0.00 + 0.25 * runiform()) * `=_N')
 17.     local in2 = ceil((0.75 + 0.25 * runiform()) * `=_N')
 18.     local from = cond(`in1' < `in2', `in1', `in2')
 19.     local to   = cond(`in1' > `in2', `in1', `in2')
 20.     compare_inner_gstats_winsor in `from' / `to', `options'
 21.     disp
 22. 
.     compare_inner_gstats_winsor if random2 > 0, `options'
 23.     disp
 24. 
.     local in1 = ceil((0.00 + 0.25 * runiform()) * `=_N')
 25.     local in2 = ceil((0.75 + 0.25 * runiform()) * `=_N')
 26.     local from = cond(`in1' < `in2', `in1', `in2')
 27.     local to   = cond(`in1' > `in2', `in1', `in2')
 28.     compare_inner_gstats_winsor if random2 < 0 in `from' / `to', `options'
 29.     disp
 30. end

. 
. capture program drop compare_inner_gstats_winsor

. program compare_inner_gstats_winsor
  1.     syntax [if] [in], [*]
  2.     compare_fail_gstats_winsor versus_gstats_winsor `if' `in', `options'
  3.     compare_fail_gstats_winsor versus_gstats_winsor `if' `in', `options' trim
  4. 
.     compare_fail_gstats_winsor versus_gstats_winsor str_12              `if' `in', `options'
  5.     compare_fail_gstats_winsor versus_gstats_winsor str_12              `if' `in', `options' trim
  6.     compare_fail_gstats_winsor versus_gstats_winsor str_12 str_32 str_4 `if' `in', `options'
  7.     compare_fail_gstats_winsor versus_gstats_winsor str_12 str_32 str_4 `if' `in', `options' trim
  8. 
.     compare_fail_gstats_winsor versus_gstats_winsor double1                 `if' `in', `options'
  9.     compare_fail_gstats_winsor versus_gstats_winsor double1                 `if' `in', `options' trim
 10.     compare_fail_gstats_winsor versus_gstats_winsor double1 double2 double3 `if' `in', `options'
 11.     compare_fail_gstats_winsor versus_gstats_winsor double1 double2 double3 `if' `in', `options' trim
 12. 
.     compare_fail_gstats_winsor versus_gstats_winsor int1           `if' `in', `options'
 13.     compare_fail_gstats_winsor versus_gstats_winsor int1           `if' `in', `options' trim
 14.     compare_fail_gstats_winsor versus_gstats_winsor int1 int2      `if' `in', `options'
 15.     compare_fail_gstats_winsor versus_gstats_winsor int1 int2      `if' `in', `options' trim
 16.     compare_fail_gstats_winsor versus_gstats_winsor int1 int2 int3 `if' `in', `options'
 17.     compare_fail_gstats_winsor versus_gstats_winsor int1 int2 int3 `if' `in', `options' trim
 18. 
.     compare_fail_gstats_winsor versus_gstats_winsor str_32 int3 double3  `if' `in', `options'
 19.     compare_fail_gstats_winsor versus_gstats_winsor str_32 int3 double3  `if' `in', `options' trim
 20.     compare_fail_gstats_winsor versus_gstats_winsor int1 double2 double3 `if' `in', `options'
 21.     compare_fail_gstats_winsor versus_gstats_winsor int1 double2 double3 `if' `in', `options' trim
 22.     compare_fail_gstats_winsor versus_gstats_winsor double? str_* int?   `if' `in', `options'
 23.     compare_fail_gstats_winsor versus_gstats_winsor double? str_* int?   `if' `in', `options' trim
 24. end

. 
. capture program drop compare_fail_gstats_winsor

. program compare_fail_gstats_winsor
  1.     gettoken cmd 0: 0
  2.     syntax [anything] [if] [in], [tol(real 1e-6) *]
  3.     cap `cmd' `0'
  4.     if ( _rc ) {
  5.         if ( "`if'`in'" == "" ) {
  6.             di "    compare_gstats_winsor (failed): full range, `anything'; `options'"
  7.         }
  8.         else if ( "`if'`in'" != "" ) {
  9.             di "    compare_gstats_winsor (failed): [`if'`in'], `anything'; `options'"
 10.         }
 11.         exit _rc
 12.     }
 13.     else {
 14.         if ( "`if'`in'" == "" ) {
 15.             di "    compare_gstats_winsor (passed): full range, gstats results equal to winsor2 (tol = `tol'; `anything'; `options')"
 16.         }
 17.         else if ( "`if'`in'" != "" ) {
 18.             di "    compare_gstats_winsor (passed): [`if'`in'], gstats results equal to winsor2 (tol = `tol'; `anything'; `options')"
 19.         }
 20.     }
 21. end

. 
. ***********************************************************************
. *                          Compare transform                          *
. ***********************************************************************
. 
. capture program drop checks_gstats_transform

. program checks_gstats_transform
  1. 
.     local percentiles p1 p10 p30.5 p50 p70.5 p90 p99
  2.     local selections  select1 select2 select5 select-5 select-2 select-1
  3.     local stats       nmissing sum mean geomean cv sd variance max min range count first last firstnm lastnm median iqr skew kurt
  4. 
.     local percentiles p1 p30.5 p70.5 p99
  5.     local selections  select1 select5 select-2 select-1
  6.     local stats       nmissing sum mean geomean cv sd variance max min range count first last firstnm lastnm median iqr skew kurt
  7. 
.     *********************************
.     *  Basic check transform stats  *
.     *********************************
. 
.     sysuse auto, clear
  8.     gstats transform (normalize) p1 = price p2 = price (demean) p3 = price (moving first) p4 = price, by(foreign) nogreedy
  9. 
.     clear
 10.     set obs 10
 11.     gen long x1 = _n
 12.     gen long x2 = -_n
 13.     gstats transform x1 = x2 x2 = x1, replace `0'
 14.     assert x1 != .
 15.     assert x2 != .
 16.     gstats transform x1, replace `0'
 17.     assert x1 != .
 18.     gstats transform x1 x2, replace `0'
 19.     assert x2 != .
 20. 
.     clear
 21.     set obs 10
 22.     gen long x1 = _n
 23.     gen long x2 = -_n
 24.     gstats transform x1 x2 (normalize) x1 x2, autorename replace `0'
 25. 
.     ******************
.     *  Moving stats  *
.     ******************
. 
.     foreach by in foreign mpg {
 26.         disp "`by'"
 27.         foreach stat in `stats' `selections' `percentiles' {
 28.             disp "    `stat'"
 29.             qui sysuse auto, clear
 30.             qui replace mpg = . if mod(_n, 19) == 0
 31.             qui {
 32.                 gstats transform (moving `stat' -3  -1) x1 = price, by(`by') `0'
 33.                 gstats transform (moving `stat'  4  2)  x2 = price, by(`by') `0'
 34.                 gstats transform (moving `stat'  3  6)  x3 = price, by(`by') `0'
 35.                 gstats transform (moving `stat'  -3 6)  x4 = price, by(`by') `0'
 36.             }
 37. 
.             local r1 moving `stat' -3 -1
 38.             local r2 moving `stat' -3 6
 39.             local r3 moving `stat' -3 .
 40.             local r4 moving `stat'
 41.             local call (`r1') x5 = price (`r2') x6 = price (`r3') x7 = price (`r4') x8 = price
 42. 
.             qui {
 43.                 gstats transform `call' , by(`by') replace window(-4 4) `0'
 44.                 gstats transform `call' , by(`by') replace window( 4 8) `0'
 45.                 gstats transform `call' , by(`by') replace window( 8 3) `0'
 46.                 gstats transform `call' , by(`by') replace window(-4 .) `0'
 47.                 gstats transform `call' , by(`by') replace window( . 4) `0'
 48.                 gstats transform `call' , by(`by') replace window( . .) `0'
 49. 
.                 gstats transform `call' [ w = gear_ratio * 10]      , by(`by') replace window(-4 4) `0'
 50.                 gstats transform `call' [aw = gear_ratio * 10]      , by(`by') replace window( 4 8) `0'
 51.                 gstats transform `call' [aw = gear_ratio * 10]      , by(`by') replace window( 9 2) `0'
 52.                 gstats transform `call' [fw = int(gear_ratio * 10)] , by(`by') replace window(-4 .) `0'
 53.                 gstats transform `call' [iw = gear_ratio / 10]      , by(`by') replace window( . 4) `0'
 54.                 gstats transform `call' [pw = gear_ratio / 10]      , by(`by') replace window( . .) `0'
 55.             }
 56.         }
 57.     }
 58. 
.     *****************
.     *  Range stats  *
.     *****************
. 
.     foreach by in foreign mpg {
 59.         disp "`by' (main)"
 60.         qui sysuse auto, clear
 61.         qui keep if mod(_n, 3) == 0
 62.         qui replace mpg = . if mod(_n, 19) == 0
 63.         local sl: copy local stat
 64.         local ul: copy local stat
 65. 
.         foreach stat in `stats' `selections' `percentiles' {
 66.             disp "    `stat'"
 67. 
.             local s1  ( range `stat'   -3      5.5      gear_ratio ) p1  = price       // g1  = weight
 68.             local s2  ( range `stat'   -3     -1        mpg        ) p2  = price       // g2  = weight
 69.             local s3  ( range `stat' 7.33      3        length     ) p3  = gear_ratio  // g3  = weight
 70.             local s4  ( range `stat'   -3      5.5                 ) p4  = gear_ratio  // g4  = weight
 71.             local s5  ( range `stat'   -3     -1                   ) p5  = gear_ratio  // g5  = weight
 72.             local s6  ( range `stat'    2      6.25     turn       ) p6  = gear_ratio  // g6  = weight
 73.             local s7  ( range `stat'   -3      .        turn       ) p7  = gear_ratio  // g7  = weight
 74.             local s8  ( range `stat'    .      3        gear_ratio ) p8  = gear_ratio  // g8  = weight
 75.             local s9  ( range `stat'    .     -3        gear_ratio ) p9  = price       // g9  = weight
 76.             local s10 ( range `stat' 7.33      3                   ) p10 = price       // g10 = weight
 77.             local s11 ( range `stat'    2      6.25                ) p11 = price       // g11 = weight
 78.             local s12 ( range `stat'   -3      .                   ) p12 = gear_ratio  // g12 = weight
 79.             local s13 ( range `stat'    .      3                   ) p13 = gear_ratio  // g13 = weight
 80.             local s14 ( range `stat'    .     -3                   ) p14 = price       // g14 = weight
 81.             local s15 ( range `stat'    3      .        gear_ratio ) p15 = price       // g15 = weight
 82.             local s16 ( range `stat'                               ) p16 = price       // g16 = weight
 83. 
.             local call
 84.             forvalues i = 1 / 16 {
 85.                 local call `call' `s`i''
 86.             }
 87. 
.             qui {
 88.                 gstats transform `call' , by(`by') replace interval(-4 4) `0'
 89.                 gstats transform `call' , by(`by') replace interval( 4 8) `0'
 90.                 gstats transform `call' , by(`by') replace interval( 8 3) `0'
 91.                 gstats transform `call' , by(`by') replace interval(-4 .) `0'
 92.                 gstats transform `call' , by(`by') replace interval( . 4) `0'
 93.                 gstats transform `call' , by(`by') replace interval( . .) `0'
 94.             }
 95. 
.             qui {
 96.                 gstats transform `call' [ w = gear_ratio * 10]      , by(`by') replace interval(-4 4) `0'
 97.                 gstats transform `call' [aw = gear_ratio * 10]      , by(`by') replace interval( 4 8) `0'
 98.                 gstats transform `call' [aw = gear_ratio * 10]      , by(`by') replace interval( 9 2) `0'
 99.                 gstats transform `call' [fw = int(gear_ratio * 10)] , by(`by') replace interval(-4 .) `0'
100.                 gstats transform `call' [iw = gear_ratio / 10]      , by(`by') replace interval( . 4) `0'
101.                 gstats transform `call' [pw = gear_ratio / 10]      , by(`by') replace interval( . .) `0'
102.             }
103. 
.             qui {
104.                 gstats transform `call' , by(`by') replace interval(-4 4) `0' excludeself
105.                 gstats transform `call' , by(`by') replace interval( 4 8) `0' excludeself
106.                 gstats transform `call' , by(`by') replace interval( 8 3) `0' excludeself
107.                 gstats transform `call' , by(`by') replace interval(-4 .) `0' excludeself
108.                 gstats transform `call' , by(`by') replace interval( . 4) `0' excludeself
109.                 gstats transform `call' , by(`by') replace interval( . .) `0' excludeself
110.             }
111. 
.             qui {
112.                 gstats transform `call' [ w = gear_ratio * 10]      , by(`by') replace interval(-4 4) `0' excludeself
113.                 gstats transform `call' [aw = gear_ratio * 10]      , by(`by') replace interval( 4 8) `0' excludeself
114.                 gstats transform `call' [aw = gear_ratio * 10]      , by(`by') replace interval( 9 2) `0' excludeself
115.                 gstats transform `call' [fw = int(gear_ratio * 10)] , by(`by') replace interval(-4 .) `0' excludeself
116.                 gstats transform `call' [iw = gear_ratio / 10]      , by(`by') replace interval( . 4) `0' excludeself
117.                 gstats transform `call' [pw = gear_ratio / 10]      , by(`by') replace interval( . .) `0' excludeself
118.             }
119. 
.             qui {
120.                 gstats transform `call' , by(`by') replace interval(-4 4) `0' excludebounds
121.                 gstats transform `call' , by(`by') replace interval( 4 8) `0' excludebounds
122.                 gstats transform `call' , by(`by') replace interval( 8 3) `0' excludebounds
123.                 gstats transform `call' , by(`by') replace interval(-4 .) `0' excludebounds
124.                 gstats transform `call' , by(`by') replace interval( . 4) `0' excludebounds
125.                 gstats transform `call' , by(`by') replace interval( . .) `0' excludebounds
126.             }
127. 
.             qui {
128.                 gstats transform `call' [ w = gear_ratio * 10]      , by(`by') replace interval(-4 4) `0' excludebounds
129.                 gstats transform `call' [aw = gear_ratio * 10]      , by(`by') replace interval( 4 8) `0' excludebounds
130.                 gstats transform `call' [aw = gear_ratio * 10]      , by(`by') replace interval( 9 2) `0' excludebounds
131.                 gstats transform `call' [fw = int(gear_ratio * 10)] , by(`by') replace interval(-4 .) `0' excludebounds
132.                 gstats transform `call' [iw = gear_ratio / 10]      , by(`by') replace interval( . 4) `0' excludebounds
133.                 gstats transform `call' [pw = gear_ratio / 10]      , by(`by') replace interval( . .) `0' excludebounds
134.             }
135.         }
136. 
.         disp "`by' (combo)"
137.         qui sysuse auto, clear
138.         qui keep if mod(_n, 3) == 0
139.         qui replace mpg = . if mod(_n, 19) == 0
140.         local sl: copy local stat
141.         local ul: copy local stat
142. 
.         foreach stat in `stats' `selections' `percentiles' {
143.             disp "    `stat'"
144. 
.             local s1  ( range mean       -3`sl'  5.5`ul'  gear_ratio ) p1  = price       // g1  = weight
145.             local s2  ( range mean        3      .                   ) p2  = price       // g2  = weight
146.             local s3  ( range nmissing   -3`sl'  5.5`ul'             ) p3  = gear_ratio  // g3  = weight
147.             local s4  ( range sum        -3`sl' -1`ul'               ) p4  = gear_ratio  // g4  = weight
148.             local s5  ( range mean     7.33`sl'  3`ul'               ) p5  = gear_ratio  // g5  = weight
149.             local s6  ( range geomean     2`sl'  6.25`ul'            ) p6  = gear_ratio  // g6  = weight
150.             local s7  ( range cv         -3`sl'  .                   ) p7  = gear_ratio  // g7  = weight
151.             local s8  ( range sd          .      3`ul'               ) p8  = gear_ratio  // g8  = weight
152.             local s9  ( range variance   -3`sl' -1`ul'    length     ) p9  = gear_ratio  // g9  = weight
153.             local s10 ( range max      7.33`sl'  3`ul'    length     ) p10 = price       // g10 = weight
154.             local s11 ( range min         .     -3`ul'               ) p11 = price       // g11 = weight
155.             local s12 ( range range       2`sl'  6.25`ul' gear_ratio ) p12 = price       // g12 = weight
156.             local s13 ( range count       3      .                   ) p13 = price       // g13 = weight
157.             local s14 ( range first      -3`sl'  .        gear_ratio ) p14 = price       // g14 = weight
158.             local s15 ( range last        .      3`ul'    mpg        ) p15 = price       // g15 = weight
159.             local s16 ( range mean        .     -3`ul'    mpg        ) p16 = price       // g16 = weight
160.             local s17 ( range firstnm    -3`sl'  5.5                 ) p17 = price       // g17 = weight
161.             local s18 ( range lastnm      3      .        mpg        ) p18 = price       // g18 = weight
162.             local s19 ( range median     -3`sl'  5.5      gear_ratio ) p19 = price       // g19 = weight
163.             local s20 ( range iqr        -3     -1`ul'               ) p20 = price       // g20 = weight
164.             local s21 ( range skew       -3     -1`ul'    gear_ratio ) p21 = price       // g21 = weight
165.             local s22 ( range kurt                                   ) p22 = price       // g22 = weight
166. 
.             local call
167.             forvalues i = 1 / 22 {
168.                 local call `call' `s`i''
169.             }
170. 
.             qui {
171.                 gstats transform `call' , by(`by') replace interval(-4 4) `0'
172.                 gstats transform `call' , by(`by') replace interval( 4 8) `0'
173.                 gstats transform `call' , by(`by') replace interval( 8 3) `0'
174.                 gstats transform `call' , by(`by') replace interval(-4 .) `0'
175.                 gstats transform `call' , by(`by') replace interval( . 4) `0'
176.                 gstats transform `call' , by(`by') replace interval( . .) `0'
177.             }
178. 
.             qui {
179.                 gstats transform `call' [ w = gear_ratio * 10]      , by(`by') replace interval(-4 4) `0'
180.                 gstats transform `call' [aw = gear_ratio * 10]      , by(`by') replace interval( 4 8) `0'
181.                 gstats transform `call' [aw = gear_ratio * 10]      , by(`by') replace interval( 9 2) `0'
182.                 gstats transform `call' [fw = int(gear_ratio * 10)] , by(`by') replace interval(-4 .) `0'
183.                 gstats transform `call' [iw = gear_ratio / 10]      , by(`by') replace interval( . 4) `0'
184.                 gstats transform `call' [pw = gear_ratio / 10]      , by(`by') replace interval( . .) `0'
185.             }
186. 
.             qui {
187.                 gstats transform `call' , by(`by') replace interval(-4 4) `0' excludeself
188.                 gstats transform `call' , by(`by') replace interval( 4 8) `0' excludeself
189.                 gstats transform `call' , by(`by') replace interval( 8 3) `0' excludeself
190.                 gstats transform `call' , by(`by') replace interval(-4 .) `0' excludeself
191.                 gstats transform `call' , by(`by') replace interval( . 4) `0' excludeself
192.                 gstats transform `call' , by(`by') replace interval( . .) `0' excludeself
193.             }
194. 
.             qui {
195.                 gstats transform `call' [ w = gear_ratio * 10]      , by(`by') replace interval(-4 4) `0' excludeself
196.                 gstats transform `call' [aw = gear_ratio * 10]      , by(`by') replace interval( 4 8) `0' excludeself
197.                 gstats transform `call' [aw = gear_ratio * 10]      , by(`by') replace interval( 9 2) `0' excludeself
198.                 gstats transform `call' [fw = int(gear_ratio * 10)] , by(`by') replace interval(-4 .) `0' excludeself
199.                 gstats transform `call' [iw = gear_ratio / 10]      , by(`by') replace interval( . 4) `0' excludeself
200.                 gstats transform `call' [pw = gear_ratio / 10]      , by(`by') replace interval( . .) `0' excludeself
201.             }
202. 
.             qui {
203.                 gstats transform `call' , by(`by') replace interval(-4 4) `0' excludebounds
204.                 gstats transform `call' , by(`by') replace interval( 4 8) `0' excludebounds
205.                 gstats transform `call' , by(`by') replace interval( 8 3) `0' excludebounds
206.                 gstats transform `call' , by(`by') replace interval(-4 .) `0' excludebounds
207.                 gstats transform `call' , by(`by') replace interval( . 4) `0' excludebounds
208.                 gstats transform `call' , by(`by') replace interval( . .) `0' excludebounds
209.             }
210. 
.             qui {
211.                 gstats transform `call' [ w = gear_ratio * 10]      , by(`by') replace interval(-4 4) `0' excludebounds
212.                 gstats transform `call' [aw = gear_ratio * 10]      , by(`by') replace interval( 4 8) `0' excludebounds
213.                 gstats transform `call' [aw = gear_ratio * 10]      , by(`by') replace interval( 9 2) `0' excludebounds
214.                 gstats transform `call' [fw = int(gear_ratio * 10)] , by(`by') replace interval(-4 .) `0' excludebounds
215.                 gstats transform `call' [iw = gear_ratio / 10]      , by(`by') replace interval( . 4) `0' excludebounds
216.                 gstats transform `call' [pw = gear_ratio / 10]      , by(`by') replace interval( . .) `0' excludebounds
217.             }
218.         }
219.     }
220. 
.     *******************
.     *  Non-moving by  *
.     *******************
. 
.     foreach by in foreign rep78 mpg {
221.         sysuse auto, clear
222. 
.         gegen _m1 = mean(price),   by(`by')
223.         gegen _s1 = sd(price),     by(`by')
224.         gegen _d1 = median(price), by(`by')
225.         gen   _x1 = (price - _m1) / _s1
226.         gen   _x3 = (price - _m1)
227.         gen   _x4 = (price - _d1)
228. 
.         gegen x1 = normalize(price),   by(`by') `0' labelf(#stat:pretty# #sourcelabel#) replace
229.         gegen x2 = standardize(price), by(`by') `0'
230.         gegen x3 = demean(price),      by(`by') `0'
231.         gegen x4 = demedian(price),    by(`by') `0'
232. 
.         gen diff1 = abs(x1 - _x1) / max(min(abs(x1), abs(_x1)), 1)
233.         gen diff2 = abs(x2 - _x1) / max(min(abs(x2), abs(_x1)), 1)
234.         gen diff3 = abs(x3 - _x3) / max(min(abs(x3), abs(_x3)), 1)
235.         gen diff4 = abs(x4 - _x4) / max(min(abs(x4), abs(_x4)), 1)
236. 
.         assert (diff1 < 1e-3) | mi(diff1)
237.         assert (diff2 < 1e-3) | mi(diff2)
238.         assert (diff3 < 1e-3) | mi(diff3)
239.         assert (diff4 < 1e-3) | mi(diff4)
240.     }
241. 
.     foreach by in foreign rep78 mpg {
242.         sysuse auto, clear
243. 
.         gegen _m1 = mean(price)   [aw = gear_ratio * 10], by(`by')
244.         gegen _s1 = sd(price)     [aw = gear_ratio * 10], by(`by')
245.         gegen _d1 = median(price) [pw = gear_ratio / 10], by(`by')
246.         gen   _x1 = (price - _m1) / _s1
247.         gen   _x3 = (price - _m1)
248.         gen   _x4 = (price - _d1)
249. 
.         gegen x1 = normalize(price)   [aw = gear_ratio * 10], by(`by') `0' labelf(#stat:pretty# #sourcelabel#) replace
250.         gegen x2 = standardize(price) [aw = gear_ratio * 10], by(`by') `0'
251.         gegen x3 = demean(price)      [aw = gear_ratio * 10], by(`by') `0'
252.         gegen x4 = demedian(price)    [pw = gear_ratio / 10], by(`by') `0'
253. 
.         gen diff1 = abs(x1 - _x1) / max(min(abs(x1), abs(_x1)), 1)
254.         gen diff2 = abs(x2 - _x1) / max(min(abs(x2), abs(_x1)), 1)
255.         gen diff3 = abs(x3 - _x3) / max(min(abs(x3), abs(_x3)), 1)
256.         gen diff4 = abs(x4 - _x4) / max(min(abs(x4), abs(_x4)), 1)
257. 
.         assert (diff1 < 1e-3) | mi(diff1)
258.         assert (diff2 < 1e-3) | mi(diff2)
259.         assert (diff3 < 1e-3) | mi(diff3)
260.         assert (diff4 < 1e-3) | mi(diff4)
261.     }
262. 
.     foreach by in foreign rep78 mpg {
263.         sysuse auto, clear
264. 
.         gegen _m1 = mean(price)   [fw = int(gear_ratio * 10)], by(`by')
265.         gegen _s1 = sd(price)     [fw = int(gear_ratio * 10)], by(`by')
266.         gegen _d1 = median(price) [iw = gear_ratio / 10],      by(`by')
267.         gen   _x1 = (price - _m1) / _s1
268.         gen   _x3 = (price - _m1)
269.         gen   _x4 = (price - _d1)
270. 
.         gegen x1 = normalize(price)   [fw = int(gear_ratio * 10)], by(`by') `0' labelf(#stat:pretty# #sourcelabel#) replace
271.         gegen x2 = standardize(price) [fw = int(gear_ratio * 10)], by(`by') `0'
272.         gegen x3 = demean(price)      [fw = int(gear_ratio * 10)], by(`by') `0'
273.         gegen x4 = demedian(price)    [iw = gear_ratio / 10],      by(`by') `0'
274. 
.         gen diff1 = abs(x1 - _x1) / max(min(abs(x1), abs(_x1)), 1)
275.         gen diff2 = abs(x2 - _x1) / max(min(abs(x2), abs(_x1)), 1)
276.         gen diff3 = abs(x3 - _x3) / max(min(abs(x3), abs(_x3)), 1)
277.         gen diff4 = abs(x4 - _x4) / max(min(abs(x4), abs(_x4)), 1)
278. 
.         assert (diff1 < 1e-3) | mi(diff1)
279.         assert (diff2 < 1e-3) | mi(diff2)
280.         assert (diff3 < 1e-3) | mi(diff3)
281.         assert (diff4 < 1e-3) | mi(diff4)
282.     }
283. end

. 
. capture program drop compare_gstats_transform

. program compare_gstats_transform
  1.     syntax, [weights *]
  2. 
.     qui `noisily' gen_data, n(500)
  3.     qui expand 20
  4.     qui `noisily' random_draws, random(5) double
  5.     gen long   ix = _n
  6.     gen double ru = runiform() * 500
  7.     qui replace ix = . if mod(_n, 500) == 0
  8.     qui replace ru = . if mod(_n, 500) == 0
  9.     qui sort random1
 10. 
.     local N = trim("`: di %15.0gc _N'")
 11.     di _n(1) "{hline 80}" _n(1) "compare_gstats_transform, N = `N', `options'" _n(1) "{hline 80}" _n(1)
 12. 
.     if ( `"`weights'"' != "" ) {
 13. 
.         qui {
 14.             gen unif_0_100     = 100 * runiform() if mod(_n, 100)
 15.             gen int_unif_0_100 = int(100 * runiform()) if mod(_n, 100)
 16.             gen float_unif_0_1 = runiform() if mod(_n, 100)
 17.             gen rnormal_0_10   = 10 * rnormal() if mod(_n, 100)
 18.         }
 19. 
.         local wcall_a  wgt([aw = unif_0_100])
 20.         local wcall_f  wgt([fw = int_unif_0_100])
 21.         local wcall_a2 wgt([aw = float_unif_0_1])
 22.         local wcall_i  wgt([iw = rnormal_0_10])
 23. 
.         compare_inner_gstats_transform, `options' `wcall_a'
 24.         disp
 25. 
.         compare_inner_gstats_transform in 1 / 5, `options' `wcall_f'
 26.         disp
 27. 
.         local in1 = ceil((0.00 + 0.25 * runiform()) * `=_N')
 28.         local in2 = ceil((0.75 + 0.25 * runiform()) * `=_N')
 29.         local from = cond(`in1' < `in2', `in1', `in2')
 30.         local to   = cond(`in1' > `in2', `in1', `in2')
 31.         compare_inner_gstats_transform in `from' / `to', `options' `wcall_a2'
 32.         disp
 33. 
.         compare_inner_gstats_transform if random2 > 0, `options' `wcall_i'
 34.         disp
 35. 
.         local in1 = ceil((0.00 + 0.25 * runiform()) * `=_N')
 36.         local in2 = ceil((0.75 + 0.25 * runiform()) * `=_N')
 37.         local from = cond(`in1' < `in2', `in1', `in2')
 38.         local to   = cond(`in1' > `in2', `in1', `in2')
 39.         compare_inner_gstats_transform if random2 < 0 in `from' / `to', `options' `wcall_a'
 40.         disp
 41.     }
 42.     else {
 43.         compare_inner_gstats_transform, `options'
 44.         disp
 45. 
.         compare_inner_gstats_transform in 1 / 5, `options'
 46.         disp
 47. 
.         local in1 = ceil((0.00 + 0.25 * runiform()) * `=_N')
 48.         local in2 = ceil((0.75 + 0.25 * runiform()) * `=_N')
 49.         local from = cond(`in1' < `in2', `in1', `in2')
 50.         local to   = cond(`in1' > `in2', `in1', `in2')
 51.         compare_inner_gstats_transform in `from' / `to', `options'
 52.         disp
 53. 
.         compare_inner_gstats_transform if random2 > 0, `options'
 54.         disp
 55. 
.         local in1 = ceil((0.00 + 0.25 * runiform()) * `=_N')
 56.         local in2 = ceil((0.75 + 0.25 * runiform()) * `=_N')
 57.         local from = cond(`in1' < `in2', `in1', `in2')
 58.         local to   = cond(`in1' > `in2', `in1', `in2')
 59.         compare_inner_gstats_transform if random2 < 0 in `from' / `to', `options'
 60.         disp
 61.     }
 62. end

. 
. capture program drop compare_inner_gstats_transform

. program compare_inner_gstats_transform
  1.     syntax [if] [in], [wgt(passthru) *]
  2. 
.     * ---------------------------------------------------------------------
. 
.     compare_fail_gstats_transform versus_gstats_transform                         `if' `in', `options' `wgt'
  3. 
.     compare_fail_gstats_transform versus_gstats_transform str_12                  `if' `in', `options' `wgt'
  4.     compare_fail_gstats_transform versus_gstats_transform str_12 str_32 str_4     `if' `in', `options' `wgt'
  5. 
.     compare_fail_gstats_transform versus_gstats_transform double1                 `if' `in', `options' `wgt'
  6.     compare_fail_gstats_transform versus_gstats_transform double1 double2 double3 `if' `in', `options' `wgt'
  7. 
.     compare_fail_gstats_transform versus_gstats_transform int1                    `if' `in', `options' `wgt'
  8.     compare_fail_gstats_transform versus_gstats_transform int1 int2               `if' `in', `options' `wgt'
  9.     compare_fail_gstats_transform versus_gstats_transform int1 int2 int3          `if' `in', `options' `wgt'
 10. 
.     compare_fail_gstats_transform versus_gstats_transform str_32 int3 double3     `if' `in', `options' `wgt'
 11.     compare_fail_gstats_transform versus_gstats_transform int1 double2 double3    `if' `in', `options' `wgt'
 12.     compare_fail_gstats_transform versus_gstats_transform double? str_* int?      `if' `in', `options' `wgt'
 13. 
.     * ---------------------------------------------------------------------
. 
.     if ( `"`wgt'"' == "" ) {
 14.         compare_fail_gstats_transform versus_gstats_transform_moving                         `if' `in', `options' `wgt' pr(rangestat w/index)
 15. 
.         compare_fail_gstats_transform versus_gstats_transform_moving str_12                  `if' `in', `options' `wgt' pr(rangestat w/index)
 16.         compare_fail_gstats_transform versus_gstats_transform_moving str_12 str_32 str_4     `if' `in', `options' `wgt' pr(rangestat w/index)
 17. 
.         compare_fail_gstats_transform versus_gstats_transform_moving double1                 `if' `in', `options' `wgt' pr(rangestat w/index)
 18.         compare_fail_gstats_transform versus_gstats_transform_moving double1 double2 double3 `if' `in', `options' `wgt' pr(rangestat w/index)
 19. 
.         compare_fail_gstats_transform versus_gstats_transform_moving int1                    `if' `in', `options' `wgt' pr(rangestat w/index)
 20.         compare_fail_gstats_transform versus_gstats_transform_moving int1 int2               `if' `in', `options' `wgt' pr(rangestat w/index)
 21.         compare_fail_gstats_transform versus_gstats_transform_moving int1 int2 int3          `if' `in', `options' `wgt' pr(rangestat w/index)
 22. 
.         compare_fail_gstats_transform versus_gstats_transform_moving str_32 int3 double3     `if' `in', `options' `wgt' pr(rangestat w/index)
 23.         compare_fail_gstats_transform versus_gstats_transform_moving int1 double2 double3    `if' `in', `options' `wgt' pr(rangestat w/index)
 24.         compare_fail_gstats_transform versus_gstats_transform_moving double? str_* int?      `if' `in', `options' `wgt' pr(rangestat w/index)
 25.     }
 26. 
.     * ---------------------------------------------------------------------
. 
.     if ( `"`wgt'"' == "" ) {
 27.         compare_fail_gstats_transform versus_gstats_transform_range                         `if' `in', `options' `wgt' pr(rangestat)
 28. 
.         compare_fail_gstats_transform versus_gstats_transform_range str_12                  `if' `in', `options' `wgt' pr(rangestat)
 29.         compare_fail_gstats_transform versus_gstats_transform_range str_12 str_32 str_4     `if' `in', `options' `wgt' pr(rangestat)
 30. 
.         compare_fail_gstats_transform versus_gstats_transform_range double1                 `if' `in', `options' `wgt' pr(rangestat)
 31.         compare_fail_gstats_transform versus_gstats_transform_range double1 double2 double3 `if' `in', `options' `wgt' pr(rangestat)
 32. 
.         compare_fail_gstats_transform versus_gstats_transform_range int1                    `if' `in', `options' `wgt' pr(rangestat)
 33.         compare_fail_gstats_transform versus_gstats_transform_range int1 int2               `if' `in', `options' `wgt' pr(rangestat)
 34.         compare_fail_gstats_transform versus_gstats_transform_range int1 int2 int3          `if' `in', `options' `wgt' pr(rangestat)
 35. 
.         compare_fail_gstats_transform versus_gstats_transform_range str_32 int3 double3     `if' `in', `options' `wgt' pr(rangestat)
 36.         compare_fail_gstats_transform versus_gstats_transform_range int1 double2 double3    `if' `in', `options' `wgt' pr(rangestat)
 37.         compare_fail_gstats_transform versus_gstats_transform_range double? str_* int?      `if' `in', `options' `wgt' pr(rangestat)
 38.     }
 39. end

. 
. capture program drop compare_fail_gstats_transform

. program compare_fail_gstats_transform
  1.     gettoken cmd 0: 0
  2.     syntax [anything] [if] [in], [tol(real 1e-6) PRogram(str) *]
  3.     cap `cmd' `0'
  4.     if ( _rc ) {
  5.         if ( "`if'`in'" == "" ) {
  6.             di "    compare_gstats_transform (failed): full range (vs `program') `anything'; `options'"
  7.         }
  8.         else if ( "`if'`in'" != "" ) {
  9.             di "    compare_gstats_transform (failed): [`if'`in'] (vs `program') `anything'; `options'"
 10.         }
 11.         exit _rc
 12.     }
 13.     else {
 14.         if ( "`if'`in'" == "" ) {
 15.             di "    compare_gstats_transform (passed): full range, gstats results equal to `program' (tol = `tol'; `anything'; `options')"
 16.         }
 17.         else if ( "`if'`in'" != "" ) {
 18.             di "    compare_gstats_transform (passed): [`if'`in'], gstats results equal to `program' (tol = `tol'; `anything'; `options')"
 19.         }
 20.     }
 21. end

. 
. ***********************************************************************
. *                             Benchmarks                              *
. ***********************************************************************
. 
. * di as txt _n(1)
. * di as txt "Benchmark vs Summary, detail; obs = `N', J = `J' (in seconds)"
. * di as txt "    sum, d | gstats sum, d | ratio (c/g) | varlist"
. * di as txt "    ------ | ------------- | ----------- | -------"
. * di as txt "           |               |             | int1
. * di as txt "           |               |             | int2
. * di as txt "           |               |             | int3
. * di as txt "           |               |             | double1
. * di as txt "           |               |             | double2
. * di as txt "           |               |             | double3
. * di as txt "           |               |             | int1 int2 int3 double1 double2 double3
. 
. capture program drop bench_gstats

. program bench_gstats
  1.     bench_gstats_winsor
  2. end

. 
. capture program drop bench_gstats_winsor

. program bench_gstats_winsor
  1.     syntax, [tol(real 1e-6) bench(real 1) n(int 500) NOIsily *]
  2. 
.     qui gen_data, n(`n')
  3.     qui expand `=100 * `bench''
  4.     qui `noisily' random_draws, random(2) double
  5.     qui hashsort random1
  6. 
.     local N = trim("`: di %15.0gc _N'")
  7.     local J = trim("`: di %15.0gc `n''")
  8. 
.     di as txt _n(1)
  9.     di as txt "Benchmark vs winsor2, obs = `N', J = `J' (in seconds)"
 10.     di as txt "    winsor | gstats winsor | ratio (c/g) | varlist"
 11.     di as txt "    ------ | ------------- | ----------- | -------"
 12. 
.     versus_gstats_winsor, `options'
 13. 
.     versus_gstats_winsor str_12,              `options'
 14.     versus_gstats_winsor str_12 str_32 str_4, `options'
 15. 
.     versus_gstats_winsor double1,                 `options'
 16.     versus_gstats_winsor double1 double2 double3, `options'
 17. 
.     versus_gstats_winsor int1,           `options'
 18.     versus_gstats_winsor int1 int2,      `options'
 19.     versus_gstats_winsor int1 int2 int3, `options'
 20. 
.     versus_gstats_winsor str_32 int3 double3,  `options'
 21.     versus_gstats_winsor int1 double2 double3, `options'
 22. 
.     di _n(1) "{hline 80}" _n(1) "bench_gstats_winsor, `options'" _n(1) "{hline 80}" _n(1)
 23. end

. 
. capture program drop versus_gstats_winsor

. program versus_gstats_winsor, rclass
  1.     syntax [anything] [if] [in], [tol(real 1e-6) trim *]
  2. 
.     timer clear
  3.     timer on 42
  4.     qui winsor2 random2 `if' `in', by(`anything') s(_w1) `options' `trim'
  5.     timer off 42
  6.     qui timer list
  7.     local time_winsor = r(t42)
  8. 
.     timer clear
  9.     timer on 43
 10.     qui gstats winsor random2 `if' `in', by(`anything') s(_w2) `options' `trim'
 11.     timer off 43
 12.     qui timer list
 13.     local time_gwinsor = r(t43)
 14. 
.     cap assert (abs(random2_w1 - random2_w2) < `tol' | random2_w1 == random2_w2)
 15.     if ( _rc & ("`trim'" != "") ) {
 16.         disp as err "(warning: `r(N)' indiscrepancies might be due to a numerical precision bug in winsor2)"
 17.     }
 18.     else if ( _rc ) {
 19.         exit _rc
 20.     }
 21.     qui drop random2_w*
 22. 
.     local rs = `time_winsor'  / `time_gwinsor'
 23.     di as txt "    `:di %6.3g `time_winsor'' | `:di %13.3g `time_gwinsor'' | `:di %11.4g `rs'' | `anything'"
 24. end

. 
. ***********************************************************************
. *                          Transform versus                           *
. ***********************************************************************
. 
. capture program drop versus_gstats_transform

. program versus_gstats_transform, rclass
  1.     syntax [anything] [if] [in], [tol(real 1e-6) wgt(str) *]
  2. 
.     local tcall1 (demean)    _out2 = random2 (demedian) _out3 = random3 (normalize) _out4 = random4 _out5 = random5
  3.     local tcall2 (demean)    _out* = random*
  4.     local tcall3 (normalize) _out* = random*
  5.     local tcall4 (cumsum)    _out1 = random1 _out2 = random2 (cumsum +) _out3 = random3 (cumsum -) _out4 = random4 (cumsum + random3) _out5 = random5
  6.     local tcall5 (rank)      _out* = random*
  7.     local tcall6 (shift -1)  _out1 = random1 _out2 = random2 (shift +3) _out3 = random3 (shift -4) _out4 = random4 (shift 2) _out5 = random5
  8. 
.     local gcall1 (mean)   _goutm2   = random2 _goutm4 = random4 _goutm5 = random5 /*
>               */ (sd)                         _gouts4 = random4 _gouts5 = random5 /*
>               */ (median) _goutmed3 = random3
  9.     local gcall2 (mean) _gout*  = random*
 10.     local gcall3 (mean) _goutm* = random* (sd) _gouts* = random*
 11. 
.     local I = cond(`"`wgt'"' == "", 6, 4)
 12.     forvalues i = 1 / `I' {
 13.         local opts = cond(`i' != 5, "", "ties(. track . field .)")
 14. 
.         timer clear
 15.         timer on 42
 16.         qui gstats transform `tcall`i'' `if' `in' `wgt', by(`anything') wild replace `options' `opts'
 17.         timer off 42
 18.         qui timer list
 19.         local time_gtransform = r(t42)
 20. 
.         preserve
 21.         gen long _sort = _n
 22.         timer clear
 23.         timer on 43
 24.         if ( `i' == 1 ) {
 25.             local start = 2
 26.             qui {
 27.                 gcollapse `gcall`i'' `if' `in' `wgt', by(`anything') wild merge replace
 28.                 gen _gout2 = (random2 - _goutm2)
 29.                 gen _gout3 = (random3 - _goutmed3)
 30.                 gen _gout4 = (random4 - _goutm4) / _gouts4
 31.                 gen _gout5 = (random5 - _goutm5) / _gouts5
 32.             }
 33.         }
 34.         else if ( `i' == 2 ) {
 35.             local start = 1
 36.             qui gcollapse `gcall`i'' `if' `in' `wgt', by(`anything') wild merge replace _subtract
 37.         }
 38.         else if ( `i' == 3 ) {
 39.             local start = 1
 40.             qui {
 41.                 gcollapse `gcall`i'' `if' `in' `wgt', by(`anything') wild merge replace
 42.                 gen _gout1 = (random1 - _goutm1) / _gouts1
 43.                 gen _gout2 = (random2 - _goutm2) / _gouts2
 44.                 gen _gout3 = (random3 - _goutm3) / _gouts3
 45.                 gen _gout4 = (random4 - _goutm4) / _gouts4
 46.                 gen _gout5 = (random5 - _goutm5) / _gouts5
 47.             }
 48.         }
 49.         else if ( `i' == 4 ) {
 50.             qui {
 51.                 local start = 1
 52.                 if ( `"`if'`in'"' != "" ) keep `if' `in'
 53.                 if ( `"`wgt'"' != "" ) {
 54.                     local 0 `wgt'
 55.                     syntax [aw fw pw iw]
 56.                     tempvar w
 57.                     gen double `w' `exp'
 58.                     local w1 * `w'
 59.                     local w2 & !mi(`w')
 60.                 }
 61.                 else {
 62.                     local w1
 63.                     local w2
 64.                 }
 65. 
.                 if ( `"`anything'"' != "" ) {
 66.                     sort `anything', stable
 67.                     by `anything': gen _gout1 = sum(random1 `w1') if !mi(random1) `w2'
 68.                     by `anything': gen _gout2 = sum(random2 `w1') if !mi(random2) `w2'
 69.                     sort `anything' random3, stable
 70.                     by `anything': gen _gout3 = sum(random3 `w1') if !mi(random3) `w2'
 71.                     sort `anything' random3 random5, stable
 72.                     by `anything': gen _gout5 = sum(random5 `w1') if !mi(random5) `w2'
 73.                     gsort `anything' -random4 _sort
 74.                     by `anything': gen _gout4 = sum(random4 `w1') if !mi(random4) `w2'
 75.                 }
 76.                 else {
 77.                     gen _gout1 = sum(random1 `w1') if !mi(random1) `w2'
 78.                     gen _gout2 = sum(random2 `w1') if !mi(random2) `w2'
 79.                     sort random3, stable
 80.                     gen _gout3 = sum(random3 `w1') if !mi(random3) `w2'
 81.                     sort random3 random5, stable
 82.                     gen _gout5 = sum(random5 `w1') if !mi(random5) `w2'
 83.                     gsort -random4 _sort
 84.                     gen _gout4 = sum(random4 `w1') if !mi(random4) `w2'
 85.                 }
 86.             }
 87.         }
 88.         else if ( `i' == 5 ) {
 89.             qui {
 90.                 local start = 1
 91.                 egen double _gout1 = rank(random1) `if' `in', by(`anything')
 92.                 egen double _gout2 = rank(random2) `if' `in', by(`anything') track
 93.                 egen double _gout3 = rank(random3) `if' `in', by(`anything')
 94.                 egen double _gout4 = rank(random4) `if' `in', by(`anything') field
 95.                 egen double _gout5 = rank(random5) `if' `in', by(`anything')
 96.             }
 97.         }
 98.         else if ( `i' == 6 ) {
 99.             qui {
100.                 mark _touse `if' `in'
101.                 sort `anything' _touse, stable
102.                 local start = 1
103.                 by `anything' _touse: gen `:type random1' _gout1 = random1[_n - 1] if _touse
104.                 by `anything' _touse: gen `:type random2' _gout2 = random2[_n - 1] if _touse
105.                 by `anything' _touse: gen `:type random3' _gout3 = random3[_n + 3] if _touse
106.                 by `anything' _touse: gen `:type random4' _gout4 = random4[_n - 4] if _touse
107.                 by `anything' _touse: gen `:type random5' _gout5 = random5[_n + 2] if _touse
108.             }
109.         }
110.         timer off 43
111.         qui timer list
112.         local time_manual = r(t43)
113. 
.         sort _sort
114.         forvalues j = `start' / 5 {
115.             cap assert (abs((_gout`j' - _out`j') / max(abs(_gout`j'), 1)) < `tol' | _gout`j' == _out`j')
116.             if ( _rc ) {
117.                 disp `j'
118.                 exit _rc
119.             }
120.         }
121.         restore
122. 
.         cap drop _*
123.         local rs = `time_manual'  / `time_gtransform'
124.         di as txt "    `:di %6.3g `time_manual'' | `:di %13.3g `time_gtransform'' | `:di %11.4g `rs'' | (`i') `anything'"
125.     }
126. end

. 
. capture program drop versus_gstats_transform_range

. program versus_gstats_transform_range, rclass
  1.     syntax [anything] [if] [in], [tol(real 1e-6) wgt(str) pr(str) *]
  2. 
.     local rcall1
  3.     local rcall2
  4.     local rcall3
  5.     local rcall4
  6. 
.     local rcall1 `rcall1'  (count)    _out1  = random2
  7.     local rcall1 `rcall1'  (first)    _out12 = random2
  8.     local rcall1 `rcall1'  (firstnm)  _out13 = random2
  9.     local rcall1 `rcall1'  (min)      _out9  = random2
 10.     local rcall1 `rcall1'  (mean)     _out3  = random2
 11. 
.     local rcall2 `rcall2'  (missing)  _out2  = random2
 12.     local rcall2 `rcall2'  (last)     _out14 = random2
 13.     local rcall2 `rcall2'  (lastnm)   _out15 = random2
 14.     local rcall2 `rcall2'  (max)      _out11 = random2
 15.     local rcall2 `rcall2'  (sum)      _out4  = random2
 16. 
.     local rcall3 `rcall3'  (sd)       _out5  = random2
 17.     local rcall3 `rcall3'  (variance) _out6  = random2
 18. 
.     local rcall4 `rcall4'  (skewness) _out7  = random2
 19.     local rcall4 `rcall4'  (kurtosis) _out8  = random2
 20.     local rcall4 `rcall4'  (median)   _out10 = random2
 21. 
.     local tcall1
 22.     local tcall2
 23.     local tcall3
 24.     local tcall4
 25. 
.     local tcall1 `tcall1' (range count)    _gout1  = random2
 26.     local tcall1 `tcall1' (range first)    _gout12 = random2
 27.     local tcall1 `tcall1' (range firstnm)  _gout13 = random2
 28.     local tcall1 `tcall1' (range min)      _gout9  = random2
 29.     local tcall1 `tcall1' (range mean)     _gout3  = random2
 30. 
.     local tcall2 `tcall2' (range nmissing) _gout2  = random2
 31.     local tcall2 `tcall2' (range last)     _gout14 = random2
 32.     local tcall2 `tcall2' (range lastnm)   _gout15 = random2
 33.     local tcall2 `tcall2' (range max)      _gout11 = random2
 34.     local tcall2 `tcall2' (range sum)      _gout4  = random2
 35. 
.     local tcall3 `tcall3' (range sd)       _gout5  = random2
 36.     local tcall3 `tcall3' (range variance) _gout6  = random2
 37. 
.     local tcall4 `tcall4' (range skewness) _gout7  = random2
 38.     local tcall4 `tcall4' (range kurtosis) _gout8  = random2
 39.     local tcall4 `tcall4' (range median)   _gout10 = random2
 40. 
.     local opts
 41.     gegen double _sd = sd(random4) `if' `in' `wgt', by(`anything')
 42.     qui gen double _low  = random4 - 0.75 * _sd
 43.     qui gen double _high = random4 + 0.75 * _sd
 44. 
.     timer clear
 45.     timer on 42
 46.     qui gstats transform `tcall1'  `if' `in' `wgt', by(`anything') `options' interval(-0.5    0.5    random3)
 47.     qui gstats transform `tcall2'  `if' `in' `wgt', by(`anything') `options' interval(-0.75sd 0.75sd random4)
 48.     qui gstats transform `tcall3'  `if' `in' `wgt', by(`anything') `options' interval(-0.5      .    random3)
 49.     qui gstats transform `tcall4'  `if' `in' `wgt', by(`anything') `options' interval(   .    0.5    random3)
 50.     timer off 42
 51.     qui timer list
 52.     local time_gtransform = r(t42)
 53. 
.     timer clear
 54.     timer on 43
 55.     rangestat `rcall1' `if' `in' `wgt', by(`anything') interval(random3 -0.5   0.5)
 56.     rangestat `rcall2' `if' `in' `wgt', by(`anything') interval(random4 _low _high)
 57.     rangestat `rcall3' `if' `in' `wgt', by(`anything') interval(random3 -0.5     .)
 58.     rangestat `rcall4' `if' `in' `wgt', by(`anything') interval(random3    .   0.5)
 59.     timer off 43
 60.     qui timer list
 61.     local time_manual = r(t43)
 62. 
.     forvalues j = 1 / 15 {
 63.         cap assert (((abs(_gout`j' - _out`j') / max(abs(_gout`j'), 1)) < `tol') | (_gout`j' == _out`j'))
 64.         if ( _rc ) {
 65.             disp `j'
 66.             exit _rc
 67.         }
 68.     }
 69.     * head random? _sd _low _high _gout4 _out4
. 
.     cap drop _*
 70.     local rs = `time_manual'  / `time_gtransform'
 71.     di as txt "    `:di %6.3g `time_manual'' | `:di %13.3g `time_gtransform'' | `:di %11.4g `rs'' | (`i') `anything'"
 72. end

. 
. capture program drop versus_gstats_transform_moving

. program versus_gstats_transform_moving, rclass
  1.     syntax [anything] [if] [in], [tol(real 1e-6) wgt(str) pr(str) *]
  2. 
.     local rcall1
  3.     local rcall2
  4.     local rcall3
  5. 
.     local rcall1 `rcall1'  (count)    _out1  = random2
  6.     local rcall1 `rcall1'  (first)    _out12 = random2
  7.     local rcall1 `rcall1'  (firstnm)  _out13 = random2
  8.     local rcall1 `rcall1'  (min)      _out9  = random2
  9.     local rcall1 `rcall1'  (mean)     _out3  = random2
 10. 
.     local rcall2 `rcall2'  (missing)  _out2  = random2
 11.     local rcall2 `rcall2'  (last)     _out14 = random2
 12.     local rcall2 `rcall2'  (lastnm)   _out15 = random2
 13.     local rcall2 `rcall2'  (max)      _out11 = random2
 14.     local rcall2 `rcall2'  (sum)      _out4  = random2
 15. 
.     local rcall3 `rcall3'  (sd)       _out5  = random2
 16.     local rcall3 `rcall3'  (variance) _out6  = random2
 17.     local rcall3 `rcall3'  (skewness) _out7  = random2
 18.     local rcall3 `rcall3'  (kurtosis) _out8  = random2
 19.     local rcall3 `rcall3'  (median)   _out10 = random2
 20. 
.     local tcall1
 21.     local tcall2
 22.     local tcall3
 23. 
.     local tcall1 `tcall1' (moving count)    _gout1  = random2
 24.     local tcall1 `tcall1' (moving first)    _gout12 = random2
 25.     local tcall1 `tcall1' (moving firstnm)  _gout13 = random2
 26.     local tcall1 `tcall1' (moving min)      _gout9  = random2
 27.     local tcall1 `tcall1' (moving mean)     _gout3  = random2
 28. 
.     local tcall2 `tcall2' (moving nmissing) _gout2  = random2
 29.     local tcall2 `tcall2' (moving last)     _gout14 = random2
 30.     local tcall2 `tcall2' (moving lastnm)   _gout15 = random2
 31.     local tcall2 `tcall2' (moving max)      _gout11 = random2
 32.     local tcall2 `tcall2' (moving sum)      _gout4  = random2
 33. 
.     local tcall3 `tcall3' (moving sd)       _gout5  = random2
 34.     local tcall3 `tcall3' (moving variance) _gout6  = random2
 35.     local tcall3 `tcall3' (moving skewness) _gout7  = random2
 36.     local tcall3 `tcall3' (moving kurtosis) _gout8  = random2
 37.     local tcall3 `tcall3' (moving median)   _gout10 = random2
 38. 
.     if ( `"`anything'"' != "" ) {
 39.         qui bys `anything': gen _index = _n
 40.         qui bys `anything': gen _ilow  = _n > 5
 41.         qui bys `anything': gen _ihigh = _n < (_N - 5 + 1)
 42.     }
 43.     else {
 44.         qui gen _index = _n
 45.         qui gen _ilow  = _n > 5
 46.         qui gen _ihigh = _n < (_N - 5 + 1)
 47.     }
 48. 
.     timer clear
 49.     timer on 42
 50.     qui gstats transform `tcall1'  `if' `in' `wgt', by(`anything') `options' window(-5 5)
 51.     qui gstats transform `tcall2'  `if' `in' `wgt', by(`anything') `options' window(-5 .)
 52.     qui gstats transform `tcall3'  `if' `in' `wgt', by(`anything') `options' window( . 5)
 53.     timer off 42
 54.     qui timer list
 55.     local time_gtransform = r(t42)
 56. 
.     timer clear
 57.     timer on 43
 58.     qui rangestat `rcall1' `if' `in' `wgt', by(`anything') interval(_index -5 5)
 59.     qui rangestat `rcall2' `if' `in' `wgt', by(`anything') interval(_index -5 .)
 60.     qui rangestat `rcall3' `if' `in' `wgt', by(`anything') interval(_index  . 5)
 61.     timer off 43
 62.     qui timer list
 63.     local time_manual = r(t43)
 64. 
.     qui {
 65.         replace _out1  = . if _ilow == 0
 66.         replace _out12 = . if _ilow == 0
 67.         replace _out13 = . if _ilow == 0
 68.         replace _out9  = . if _ilow == 0
 69.         replace _out3  = . if _ilow == 0
 70. 
.         replace _out1  = . if _ihigh == 0
 71.         replace _out12 = . if _ihigh == 0
 72.         replace _out13 = . if _ihigh == 0
 73.         replace _out9  = . if _ihigh == 0
 74.         replace _out3  = . if _ihigh == 0
 75. 
.         replace _out2  = . if _ilow == 0
 76.         replace _out14 = . if _ilow == 0
 77.         replace _out15 = . if _ilow == 0
 78.         replace _out11 = . if _ilow == 0
 79.         replace _out4  = . if _ilow == 0
 80. 
.         replace _out5  = . if _ihigh == 0
 81.         replace _out6  = . if _ihigh == 0
 82.         replace _out7  = . if _ihigh == 0
 83.         replace _out8  = . if _ihigh == 0
 84.         replace _out10 = . if _ihigh == 0
 85.     }
 86. 
.     forvalues j = 1 / 15 {
 87.         cap assert (((abs(_gout`j' - _out`j') / max(abs(_gout`j'), 1)) < `tol') | (_gout`j' == _out`j'))
 88.         if ( _rc ) {
 89.             disp `j'
 90.             gen _diff`j' = abs(_gout`j' - _out`j') / max(abs(_gout`j'), 1)
 91.             * exit _rc
.         }
 92.     }
 93. 
.     cap drop _*
 94.     local rs = `time_manual'  / `time_gtransform'
 95.     di as txt "    `:di %6.3g `time_manual'' | `:di %13.3g `time_gtransform'' | `:di %11.4g `rs'' | (`i') `anything'"
 96. end

. capture program drop checks_duplicates

. program checks_duplicates
  1.     syntax, [tol(real 1e-6) NOIsily *]
  2.     di _n(1) "{hline 80}" _n(1) "checks_duplicates, `options'" _n(1) "{hline 80}" _n(1)
  3. 
.     qui `noisily' gen_data, n(5000)
  4.     qui expand 2
  5. 
.     checks_inner_duplicates str_12,              `options'
  6.     checks_inner_duplicates str_12 str_32,       `options'
  7.     checks_inner_duplicates str_12 str_32 str_4, `options'
  8. 
.     checks_inner_duplicates double1,                 `options'
  9.     checks_inner_duplicates double1 double2,         `options'
 10.     checks_inner_duplicates double1 double2 double3, `options'
 11. 
.     checks_inner_duplicates int1,           `options'
 12.     checks_inner_duplicates int1 int2,      `options'
 13.     checks_inner_duplicates int1 int2 int3, `options'
 14. 
.     checks_inner_duplicates int1 str_32 double1,                                        `options'
 15.     checks_inner_duplicates int1 str_32 double1 int2 str_12 double2,                    `options'
 16.     checks_inner_duplicates int1 str_32 double1 int2 str_12 double2 int3 str_4 double3, `options'
 17. 
.     if ( `c(stata_version)' >= 14.1 ) {
 18.         local forcestrl: disp cond(strpos(lower("`c(os)'"), "windows"), "forcestrl", "")
 19.         checks_inner_duplicates strL1,             `options' `forcestrl'
 20.         checks_inner_duplicates strL1 strL2,       `options' `forcestrl'
 21.         checks_inner_duplicates strL1 strL2 strL3, `options' `forcestrl'
 22.     }
 23. 
.     sysuse auto, clear
 24.     gen idx = _n
 25.     qui gduplicates report foreign,       `options'
 26.     assert r(unique_value) == 2
 27.     qui gduplicates report foreign price, `options'
 28.     assert r(unique_value) == _N
 29.     qui gduplicates report foreign make,  `options'
 30.     assert r(unique_value) == _N
 31.     qui gduplicates report idx,           `options' gtools(v bench)
 32. end

. 
. capture program drop checks_inner_duplicates

. program checks_inner_duplicates
  1.     syntax varlist, [*]
  2.     preserve
  3.     tempvar tag
  4.     qui gduplicates report   `varlist', gtools(`options')
  5.     qui gduplicates examples `varlist', gtools(`options')
  6.     qui gduplicates list     `varlist', gtools(`options')
  7.     qui gduplicates tag      `varlist', gtools(`options') gen(`tag')
  8.     cap gduplicates drop     `varlist', gtools(`options')
  9.     assert _rc == 198
 10.     qui gduplicates drop     `varlist', force
 11.     restore
 12. end

. 
. ***********************************************************************
. *                               Compare                               *
. ***********************************************************************
. 
. capture program drop compare_duplicates

. program compare_duplicates
  1.     syntax, [tol(real 1e-6) NOIsily bench(int 1) n(int 500) *]
  2. 
.     qui `noisily' gen_data, n(`n')
  3.     qui expand `=100 * `bench''
  4.     qui `noisily' random_draws, random(2)
  5.     qui gen rsort = rnormal()
  6.     qui sort rsort
  7. 
.     compare_duplicates_internal str_12,              `options'
  8.     compare_duplicates_internal str_12 str_32 str_4, `options'
  9. 
.     compare_duplicates_internal double1,                 `options'
 10.     compare_duplicates_internal double1 double2 double3, `options'
 11. 
.     compare_duplicates_internal int1,           `options'
 12.     compare_duplicates_internal int1 int2 int3, `options'
 13. 
.     compare_duplicates_internal str_32 int3 double3,  `options'
 14.     compare_duplicates_internal int1 double2 double3, `options'
 15.     compare_duplicates_internal double? str_* int?,   `options'
 16. 
.     if ( `c(stata_version)' >= 14.1 ) {
 17.         local forcestrl: disp cond(strpos(lower("`c(os)'"), "windows"), "forcestrl", "")
 18.         compare_duplicates_internal strL1,             `options' `forcestrl'
 19.         compare_duplicates_internal strL1 strL2,       `options' `forcestrl'
 20.         compare_duplicates_internal strL1 strL2 strL3, `options' `forcestrl'
 21.     }
 22. end

. 
. capture program drop compare_duplicates_internal

. program compare_duplicates_internal
  1.     syntax varlist, [*]
  2. 
.     if ( "`benchmode'" == "" )  {
  3.         di _n(2) "Checking duplicates; varlist = `varlist'" _n(1) "{hline `hlen'}"
  4.     }
  5. 
.     preserve
  6.         _compare_duplicates `varlist' `if' `in', `options' report
  7.         _compare_duplicates `varlist' `if' `in', `options' tag
  8.         _compare_duplicates `varlist' `if' `in', `options' drop
  9.     restore, preserve
 10.         if ( "`shuffle'" != "" ) sort `rsort'
 11.         local in1 = ceil((0.00 + 0.25 * runiform()) * `=_N')
 12.         local in2 = ceil((0.75 + 0.25 * runiform()) * `=_N')
 13.         local from = cond(`in1' < `in2', `in1', `in2')
 14.         local to   = cond(`in1' > `in2', `in1', `in2')
 15.         _compare_duplicates `varlist' in `from' / `to', `options' report
 16.         _compare_duplicates `varlist' in `from' / `to', `options' tag
 17.         _compare_duplicates `varlist' in `from' / `to', `options' drop
 18.     restore, preserve
 19.         _compare_duplicates `varlist' if random2 > 0, `options' report
 20.         _compare_duplicates `varlist' if random2 > 0, `options' tag
 21.         _compare_duplicates `varlist' if random2 > 0, `options' drop
 22.     restore, preserve
 23.         local in1 = ceil((0.00 + 0.25 * runiform()) * `=_N')
 24.         local in2 = ceil((0.75 + 0.25 * runiform()) * `=_N')
 25.         local from = cond(`in1' < `in2', `in1', `in2')
 26.         local to   = cond(`in1' > `in2', `in1', `in2')
 27.         _compare_duplicates `varlist' if random2 < 0 in `from' / `to', `options' report
 28.         _compare_duplicates `varlist' if random2 < 0 in `from' / `to', `options' tag
 29.         _compare_duplicates `varlist' if random2 < 0 in `from' / `to', `options' drop
 30.     restore
 31. end

. 
. ***********************************************************************
. *                              Benchmark                              *
. ***********************************************************************
. 
. capture program drop bench_duplicates

. program bench_duplicates
  1.     syntax, [tol(real 1e-6) NOIsily bench(int 1) n(int 500) *]
  2.     local options `options' benchmode
  3. 
.     qui `noisily' gen_data, n(`n')
  4.     qui expand `=100 * `bench''
  5.     qui gen rsort = rnormal()
  6.     qui sort rsort
  7. 
.     local N = trim("`: di %15.0gc _N'")
  8.     local J = trim("`: di %15.0gc `n''")
  9. 
.     di as txt _n(1)
 10.     di as txt "Benchmark vs duplicates report, obs = `N', J = `J' (in seconds)"
 11.     di as txt "    duplicates | gduplicates | ratio (g/h) | varlist"
 12.     di as txt "    ---------- | ----------- | ----------- | -------"
 13. 
.     _compare_duplicates str_12,              `options' report
 14.     _compare_duplicates str_12 str_32,       `options' report
 15.     _compare_duplicates str_12 str_32 str_4, `options' report
 16. 
.     _compare_duplicates double1,                 `options' report
 17.     _compare_duplicates double1 double2,         `options' report
 18.     _compare_duplicates double1 double2 double3, `options' report
 19. 
.     _compare_duplicates int1,           `options' report
 20.     _compare_duplicates int1 int2,      `options' report
 21.     _compare_duplicates int1 int2 int3, `options' report
 22. 
.     _compare_duplicates int1 str_32 double1,                                        `options' report
 23.     _compare_duplicates int1 str_32 double1 int2 str_12 double2,                    `options' report
 24.     _compare_duplicates int1 str_32 double1 int2 str_12 double2 int3 str_4 double3, `options' report
 25. 
.     if ( `c(stata_version)' >= 14.1 ) {
 26.         local forcestrl: disp cond(strpos(lower("`c(os)'"), "windows"), "forcestrl", "")
 27.         _compare_duplicates strL1,             `options' report `forcestrl'
 28.         _compare_duplicates strL1 strL2,       `options' report `forcestrl'
 29.         _compare_duplicates strL1 strL2 strL3, `options' report `forcestrl'
 30.     }
 31. 
.     di as txt _n(1)
 32.     di as txt "Benchmark vs duplicates drop, obs = `N', J = `J' (in seconds; output compared via {opt cf})"
 33.     di as txt "    duplicates | gduplicates | ratio (g/h) | varlist"
 34.     di as txt "    ---------- | ----------- | ----------- | -------"
 35. 
.     _compare_duplicates str_12,              `options' drop
 36.     _compare_duplicates str_12 str_32,       `options' drop
 37.     _compare_duplicates str_12 str_32 str_4, `options' drop
 38. 
.     _compare_duplicates double1,                 `options' drop
 39.     _compare_duplicates double1 double2,         `options' drop
 40.     _compare_duplicates double1 double2 double3, `options' drop
 41. 
.     _compare_duplicates int1,           `options' drop
 42.     _compare_duplicates int1 int2,      `options' drop
 43.     _compare_duplicates int1 int2 int3, `options' drop
 44. 
.     _compare_duplicates int1 str_32 double1,                                        `options' drop
 45.     _compare_duplicates int1 str_32 double1 int2 str_12 double2,                    `options' drop
 46.     _compare_duplicates int1 str_32 double1 int2 str_12 double2 int3 str_4 double3, `options' drop
 47. 
.     if ( `c(stata_version)' >= 14.1 ) {
 48.         local forcestrl: disp cond(strpos(lower("`c(os)'"), "windows"), "forcestrl", "")
 49.         _compare_duplicates strL1,             `options' drop `forcestrl'
 50.         _compare_duplicates strL1 strL2,       `options' drop `forcestrl'
 51.         _compare_duplicates strL1 strL2 strL3, `options' drop `forcestrl'
 52.     }
 53. 
.     di _n(1) "{hline 80}" _n(1) "compare_duplicates, `options'" _n(1) "{hline 80}" _n(1)
 54. end

. 
. capture program drop _compare_duplicates

. program _compare_duplicates, rclass
  1.     syntax varlist [if] [in], [drop report tag benchmode *]
  2. 
.     tempvar r_tag g_tag
  3.     if ( "`drop'" != "" ) {
  4.         local force force
  5.     }
  6.     else if ( "`tag'" != "" ) {
  7.         local r_gen gen(`r_tag')
  8.         local g_gen gen(`g_tag')
  9.     }
 10. 
.     timer clear
 11.     if ( "`drop'" != "" ) preserve
 12.         timer on 42
 13.         qui duplicates `tag' `drop' `report' `varlist' `if' `in', `force' `r_gen'
 14.         timer off 42
 15.         if ( "`report'" != "" ) {
 16.             local r_duplicates = `r(unique_value)'
 17.         }
 18.         else if ( "`drop'" != "" ) {
 19.             tempfile file_duplicates
 20.             qui save `file_duplicates'
 21.         }
 22.         else if ( "`tag'" != "" ) {
 23.         }
 24.     if ( "`drop'" != "" ) restore
 25.     qui timer list
 26.     local time_duplicates = r(t42)
 27. 
.     timer clear
 28.     if ( "`drop'" != "" ) preserve
 29.         timer on 43
 30.         qui gduplicates `tag' `drop' `report' `varlist' `if' `in', `force' gtools(`options') `g_gen'
 31.         timer off 43
 32.         if ( "`report'" != "" ) {
 33.             cap noi assert `r(unique_value)' == `r_duplicates'
 34.             if ( _rc ) exit _rc
 35.             local rc = _rc
 36.         }
 37.         else if ( "`drop'" != "" ) {
 38.             cap noi cf * using `file_duplicates'
 39.             local rc = _rc
 40.         }
 41.         else if ( "`tag'" != "" ) {
 42.             cap noi assert `r_tag' == `g_tag'
 43.             local rc = _rc
 44.         }
 45.         else {
 46.             local rc 0
 47.         }
 48.     if ( "`drop'" != "" ) restore
 49. 
.     if ( "`benchmode'" == "" ) {
 50.         local dstr: di %7s "`drop'`report'`tag'"
 51. 
.         if ( `rc' ) {
 52.             di as err "    compare_gduplicates (failed): `dstr' `if' `in' yielded different results"
 53.         }
 54.         else {
 55.             di as txt "    compare_gduplicates (passed): `dstr' `if' `in' yielded identical results"
 56.         }
 57.         exit `rc'
 58.     }
 59. 
.     qui timer list
 60.     local time_gduplicates = r(t43)
 61. 
.     local rs = `time_duplicates'  / `time_gduplicates'
 62.     di as txt "    `:di %10.3g `time_duplicates'' | `:di %11.3g `time_gduplicates'' | `:di %11.3g `rs'' | `varlist'"
 63. end

. capture program drop checks_hashsort

. program checks_hashsort
  1.     syntax, [tol(real 1e-6) NOIsily *]
  2.     di _n(1) "{hline 80}" _n(1) "checks_hashsort, `options'" _n(1) "{hline 80}" _n(1)
  3. 
.     qui `noisily' gen_data, n(5000)
  4.     qui expand 2
  5.     gen long ix = _n
  6. 
.     checks_inner_hashsort -str_12,              `options'
  7.     checks_inner_hashsort str_12 -str_32,       `options'
  8.     checks_inner_hashsort str_12 -str_32 str_4, `options'
  9. 
.     checks_inner_hashsort -double1,                 `options'
 10.     checks_inner_hashsort double1 -double2,         `options'
 11.     checks_inner_hashsort double1 -double2 double3, `options'
 12. 
.     checks_inner_hashsort -int1,           `options'
 13.     checks_inner_hashsort int1 -int2,      `options'
 14.     checks_inner_hashsort int1 -int2 int3, `options'
 15. 
.     checks_inner_hashsort -int1 -str_32 -double1,                                         `options'
 16.     checks_inner_hashsort int1 -str_32 double1 -int2 str_12 -double2,                     `options'
 17.     checks_inner_hashsort int1 -str_32 double1 -int2 str_12 -double2 int3 -str_4 double3, `options'
 18. 
.     * 1.4.1 removed strL support in hashsort
.     * if ( `c(stata_version)' >= 14.1 ) {
.     *     local forcestrl: disp cond(strpos(lower("`c(os)'"), "windows"), "forcestrl", "")
.     *     checks_inner_hashsort -strL1,             `options' `forcestrl'
.     *     checks_inner_hashsort strL1 -strL2,       `options' `forcestrl'
.     *     checks_inner_hashsort strL1 -strL2 strL3, `options' `forcestrl'
.     * }
. 
.     sysuse auto, clear
 19.     gen idx = _n
 20.     hashsort -foreign rep78 make -mpg, `options'
 21.     hashsort idx,                      `options'
 22.     hashsort -foreign -rep78,          `options'
 23.     hashsort idx,                      `options'
 24.     hashsort foreign rep78 mpg,        `options'
 25.     hashsort idx,                      `options' v bench
 26. 
.     * https://github.com/mcaceresb/stata-gtools/issues/31
.     qui {
 27.         clear
 28.         set obs 10
 29.         gen x = "hi"
 30.         replace x = "" in 1 / 5
 31.         gen y = floor(_n / 3)
 32.         replace y = .a in 1
 33.         replace y = .b in 2
 34.         replace y = .c in 3
 35.         replace y = .  in 4
 36. 
.         preserve
 37.             gsort x -y
 38.             tempfile a
 39.             save "`a'"
 40.         restore
 41.         hashsort x -y, mlast
 42.         cf * using "`a'"
 43.     }
 44. 
.     ****************
.     *  Misc tests  *
.     ****************
. 
.     clear
 45.     gen x = 1
 46.     hashsort x
 47. 
.     clear
 48.     set obs 10
 49.     gen x = _n
 50.     expand 3
 51.     hashsort x, gen(y) sortgen
 52.     assert "`:sortedby'" == "y"
 53.     hashsort x, v
 54.     assert "`:sortedby'" == "x"
 55.     hashsort x, skipcheck v
 56.     hashsort x, gen(y) replace
 57.     assert "`:sortedby'" == "x"
 58. end

. 
. capture program drop checks_inner_hashsort

. program checks_inner_hashsort
  1.     syntax anything, [*]
  2.     tempvar ix
  3.     hashsort `anything', `options' gen(`ix')
  4.     hashsort `: subinstr local anything "-" "", all', `options'
  5.     hashsort ix, `options'
  6. end

. 
. capture program drop bench_hashsort

. program bench_hashsort
  1.     compare_hashsort `0'
  2. end

. 
. capture program drop compare_hashsort

. program compare_hashsort
  1.     syntax, [tol(real 1e-6) NOIsily bench(int 1) n(int 500) benchmode *]
  2.     local options `options' `benchmode'
  3.     if ( "`benchmode'" == "" ) {
  4.         local benchcomp Comparison
  5.     }
  6.     else {
  7.         local benchcomp Benchmark
  8.     }
  9. 
.     cap gen_data, n(`n')
 10.     qui expand 10 * `bench'
 11.     qui gen rsort = rnormal()
 12.     qui sort rsort
 13. 
.     local N = trim("`: di %15.0gc _N'")
 14.     local J = trim("`: di %15.0gc `n''")
 15. 
.     di _n(1)
 16.     di "`benchcomp' vs gsort, obs = `N', J = `J' (in seconds; datasets are compared via {opt cf})"
 17.     di "    gsort | hashsort | ratio (g/h) | varlist"
 18.     di "    ----- | -------- | ----------- | -------"
 19. 
.     compare_gsort -str_12,              `options' mfirst
 20.     compare_gsort str_12 -str_32,       `options' mfirst
 21.     compare_gsort str_12 -str_32 str_4, `options' mfirst
 22. 
.     compare_gsort -double1,                 `options' mfirst
 23.     compare_gsort double1 -double2,         `options' mlast
 24.     compare_gsort double1 -double2 double3, `options' mfirst
 25. 
.     compare_gsort -int1,           `options' mfirst
 26.     compare_gsort int1 -int2,      `options' mfirst
 27.     compare_gsort int1 -int2 int3, `options' mlast
 28. 
.     compare_gsort -int1 -str_32 -double1,                                         `options' mlast
 29.     compare_gsort int1 -str_32 double1 -int2 str_12 -double2,                     `options' mfirst
 30.     compare_gsort int1 -str_32 double1 -int2 str_12 -double2 int3 -str_4 double3, `options' mfirst
 31. 
.     * 1.4.1 removed strL support in hashsort
.     * if ( `c(stata_version)' >= 14.1 ) {
.     *     local forcestrl: disp cond(strpos(lower("`c(os)'"), "windows"), "forcestrl", "")
.     *     compare_gsort -strL1,             `options' mfirst `forcestrl'
.     *     compare_gsort strL1 -strL2,       `options' mfirst `forcestrl'
.     *     compare_gsort strL1 -strL2 strL3, `options' mlast  `forcestrl'
.     * }
. 
.     qui expand 10
 32.     local N = trim("`: di %15.0gc _N'")
 33.     cap drop rsort
 34.     qui gen rsort = rnormal()
 35.     qui sort rsort
 36. 
.     di _n(1)
 37.     di "`benchcomp' vs sort (stable), obs = `N', J = `J' (in seconds; datasets are compared via {opt cf})"
 38.     di "     sort | fsort | hashsort | ratio (s/h) | ratio (f/h) | varlist"
 39.     di "     ---- | ----- | -------- | ----------- | ----------- | -------"
 40. 
.     compare_sort str_12,              `options' fsort
 41.     compare_sort str_12 str_32,       `options' fsort
 42.     compare_sort str_12 str_32 str_4, `options' fsort
 43. 
.     compare_sort double1,                 `options' fsort
 44.     compare_sort double1 double2,         `options' fsort
 45.     compare_sort double1 double2 double3, `options' fsort
 46. 
.     compare_sort int1,           `options' fsort
 47.     compare_sort int1 int2,      `options' fsort
 48.     compare_sort int1 int2 int3, `options' fsort
 49. 
.     compare_sort int1 str_32 double1,                                        `options'
 50.     compare_sort int1 str_32 double1 int2 str_12 double2,                    `options'
 51.     compare_sort int1 str_32 double1 int2 str_12 double2 int3 str_4 double3, `options'
 52. 
.     * 1.4.1 removed strL support in hashsort
.     * if ( `c(stata_version)' >= 14.1 ) {
.     *     local forcestrl: disp cond(strpos(lower("`c(os)'"), "windows"), "forcestrl", "")
.     *     compare_sort strL1,             `options' mfirst `forcestrl'
.     *     compare_sort strL1 strL2,       `options' mfirst `forcestrl'
.     *     compare_sort strL1 strL2 strL3, `options' mlast  `forcestrl'
.     * }
. 
.     di _n(1) "{hline 80}" _n(1) "compare_hashsort, `options'" _n(1) "{hline 80}" _n(1)
 53. end

. 
. capture program drop compare_sort

. program compare_sort, rclass
  1.     syntax varlist, [fsort benchmode *]
  2.     local rc = 0
  3. 
.     timer clear
  4.     preserve
  5.         timer on 42
  6.         sort `varlist' , stable
  7.         timer off 42
  8.         tempfile file_sort
  9.         qui save `file_sort'
 10.     restore
 11.     qui timer list
 12.     local time_sort = r(t42)
 13. 
.     timer clear
 14.     preserve
 15.         timer on 43
 16.         qui hashsort `varlist', `options'
 17.         timer off 43
 18.         cf * using `file_sort'
 19.         * if ( _rc ) {
.         *     qui ds *
.         *     local memvars `r(varlist)'
.         *     local firstvar: word 1 of `varlist'
.         *     local compvars: list memvars - firstvar
.         *     if ( "`compvars'" != "" ) {
.         *         cf `compvars' using `file_sort'
.         *     }
.         *     keep `firstvar'
.         *     tempfile file_first
.         *     qui save `file_first'
.         *
.         *     use `firstvar' using `file_sort', clear
.         *     rename `firstvar' c_`firstvar'
.         *     qui merge 1:1 _n using `file_first'
.         *     cap noi assert (`firstvar' == c_`firstvar') | (abs(`firstvar' - c_`firstvar') < 1e-15)
.         *     if ( _rc ) {
.         *         local rc = _rc
.         *         di as err "hashsort gave different sort order to sort"
.         *     }
.         *     else {
.         *         if ("`benchmode'" == "") di as txt "    hashsort same as sort but sortpreserve trick caused some loss of precision (< 1e-15)"
.         *     }
.         * }
. 
.         * Make sure already sorted check is OK
.         qui gen byte one = 1
 20.         hashsort one `varlist', `options'
 21.         qui drop one
 22.         cf * using `file_sort'
 23.         * if ( _rc ) {
.         *     qui ds *
.         *     local memvars `r(varlist)'
.         *     local firstvar: word 1 of `varlist'
.         *     local compvars: list memvars - firstvar
.         *     if ( "`compvars'" != "" ) {
.         *         cf `compvars' using `file_sort'
.         *     }
.         *     keep `firstvar'
.         *     tempfile file_one
.         *     qui save `file_one'
.         *
.         *     use `firstvar' using `file_sort', clear
.         *     rename `firstvar' c_`firstvar'
.         *     qui merge 1:1 _n using `file_one'
.         *     cap noi assert (`firstvar' == c_`firstvar') | (abs(`firstvar' - c_`firstvar') < 1e-15)
.         *     if ( _rc ) {
.         *         local rc = _rc
.         *         di as err "hashsort gave different sort order to sort"
.         *     }
.         *     else {
.         *         if ("`benchmode'" == "") di as txt "    hashsort same as sort but sortpreserve trick caused some loss of precision (< 1e-15)"
.         *     }
.         * }
.     restore
 24.     qui timer list
 25.     local time_hashsort = r(t43)
 26. 
.     if ( `rc' ) exit `rc'
 27. 
.     if ( "`fsort'" == "fsort" ) {
 28.         timer clear
 29.         preserve
 30.             timer on 44
 31.             cap fsort `varlist'
 32.             local rc_f = _rc
 33.             timer off 44
 34.             if ( `rc_f' ) {
 35.                 disp as err "(warning: fsort `varlist' failed)"
 36.             }
 37.             else {
 38.                 cap noi cf * using `file_sort'
 39.                 if ( _rc ) {
 40.                     disp as txt "(note: ftools `varlist' returned different data vs sort, stable)"
 41.                 }
 42.             }
 43.         restore
 44.         if ( `rc_f' ) {
 45.             local time_fsort = .
 46.         }
 47.         else {
 48.             qui timer list
 49.             local time_fsort = r(t44)
 50.         }
 51.     }
 52.     else {
 53.         local time_fsort = .
 54.     }
 55. 
.     local rs = `time_sort'  / `time_hashsort'
 56.     local rf = `time_fsort' / `time_hashsort'
 57.     di "    `:di %5.3g `time_sort'' | `:di %5.3g `time_fsort'' | `:di %8.3g `time_hashsort'' | `:di %11.3g `rs'' | `:di %11.3g `rf'' | `varlist'"
 58. end

. 
. capture program drop compare_gsort

. program compare_gsort, rclass
  1.     syntax anything, [benchmode mfirst mlast *]
  2.     tempvar ix
  3.     gen long `ix' = _n
  4.     if ( "`benchmode'" == "" ) local gstable `ix'
  5. 
.     timer clear
  6.     preserve
  7.         timer on 42
  8.         gsort `anything' `gstable', `mfirst'
  9.         timer off 42
 10.         tempfile file_sort
 11.         qui save `file_sort'
 12.     restore
 13.     qui timer list
 14.     local time_sort = r(t42)
 15. 
.     timer clear
 16.     preserve
 17.         timer on 43
 18.         qui hashsort `anything', `mlast'  `options'
 19.         timer off 43
 20.         cf `:di subinstr("`anything'", "-", "", .)' using `file_sort'
 21.     restore
 22.     qui timer list
 23.     local time_hashsort = r(t43)
 24. 
.     local rs = `time_sort'  / `time_hashsort'
 25.     di "    `:di %5.3g `time_sort'' | `:di %8.3g `time_hashsort'' | `:di %11.3g `rs'' | `anything'"
 26. end

. * ---------------------------------------------------------------------
. * Run the things
. 
. if ( `"`0'"' == "" ) local 0 basic_checks switches bench_test

. main, `0'
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
      name:  gtools_tests
       log:  /home/mauricio/Documents/projects/dev/code/archive/2017/stata-gtools/build/gtools_tests_unix.log
  log type:  text
 opened on:  28 Aug 2021, 00:13:56


Start:        00:13:56 28 Aug 2021
Options:      basic_checks switches bench_test
OS:           Unix
Machine Type: PC (64-bit x86-64)

-------------------------------------
Basic unit-tests 00:13:56 28 Aug 2021
-------------------------------------
    test(failed): checks_gcontract, oncollision(error)

WARNING: 00:13:56 28 Aug 2021
tests ran with non-0 exit status

tests ran but Stata gave error code r(198)

Start: 00:13:56 28 Aug 2021
End: 00:13:56 28 Aug 2021
      name:  gtools_tests
       log:  /home/mauricio/Documents/projects/dev/code/archive/2017/stata-gtools/build/gtools_tests_unix.log
  log type:  text
 closed on:  28 Aug 2021, 00:13:56
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
r(198);

end of do-file
r(198);
